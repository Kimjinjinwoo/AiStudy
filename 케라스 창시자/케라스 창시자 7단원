{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"케라스 창시자 7단원","provenance":[],"authorship_tag":"ABX9TyOFIIxM2bDIqMKszK4cG10Q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 7. 딥러닝을 위한 고급 도구"],"metadata":{"id":"aT66nsjNxOSl"}},{"cell_type":"markdown","source":["## 7-1 Sequential 모델을 넘어서: 케라스의 함수형 API"],"metadata":{"id":"f-B1d7D1xSsH"}},{"cell_type":"markdown","source":["https://arxiv.org/abs/1512.03385"],"metadata":{"id":"fWP5QQSgz9Me"}},{"cell_type":"markdown","source":["### 7-1-1 함수형 API 소개"],"metadata":{"id":"sqERjkk40dUd"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"NeJhdlGsxKlD"},"outputs":[],"source":["from keras import Input , layers\n","\n","input_tensor = Input(shape=(32,))\n","dense = layers.Dense(32 , activation = 'relu')\n","\n","output_tensor = dense(input_tensor)"]},{"cell_type":"markdown","source":["### 7-1-2 다중 입력 모델"],"metadata":{"id":"69oPjhzP14M7"}},{"cell_type":"code","source":["from keras.models import Model\n","from keras import layers\n","from keras import Input\n","\n","test_vocabulary_size = 10000\n","question_vocabulary_size = 10000\n","answer_vocabulary_size = 500\n","\n","text_input = Input(shape = (None,) , dtype='int32' , name='text')\n","\n","embedded_text =  layers.Embedding( test_vocabulary_size , 64)(text_input)\n","\n","encoded_text = layers.LSTM(32)(embedded_text)\n","\n","question_input = Input(shape=(None,), dtype='int32' , name='question')\n","\n","embedded_question = layers.Embedding( question_vocabulary_size , 32)(question_input)\n","encoded_question = layers.LSTM(16)(embedded_question)\n","\n","concatenated = layers.concatenate([encoded_text , encoded_question], axis = -1)\n","\n","answer = layers.Dense(answer_vocabulary_size, activation='softmax')(concatenated)\n","\n","model = Model([text_input , question_input] , answer)\n","model.compile(optimizer = 'rmsprop' , loss = 'categorical_crossentropy', metrics = ['acc'])"],"metadata":{"id":"r_I9t-Y51C9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from tensorflow.keras.utils import to_categorical\n","\n","num_samples = 1000\n","max_length = 100\n","\n","text = np.random.randint(1 , test_vocabulary_size, size = (num_samples , max_length))\n","question = np.random.randint(1, question_vocabulary_size, size = (num_samples , max_length))\n","answers = np.random.randint(0, answer_vocabulary_size , size = num_samples)\n","answers = to_categorical(answers)\n","\n","model.fit([text , question] , answers, epochs = 10, batch_size = 128)\n","\n","model.fit({'text':text , 'question':question} , answers, epochs=10 , batch_size = 128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jBrGVVSo6GoH","executionInfo":{"status":"ok","timestamp":1647958509659,"user_tz":-540,"elapsed":21526,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"03ea0a05-b945-4c58-8830-068813462352"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","8/8 [==============================] - 1s 122ms/step - loss: 6.2938 - acc: 0.0040\n","Epoch 2/10\n","8/8 [==============================] - 1s 118ms/step - loss: 6.1601 - acc: 0.0020\n","Epoch 3/10\n","8/8 [==============================] - 1s 111ms/step - loss: 6.0842 - acc: 0.0060\n","Epoch 4/10\n","8/8 [==============================] - 1s 104ms/step - loss: 6.0175 - acc: 0.0080\n","Epoch 5/10\n","8/8 [==============================] - 1s 108ms/step - loss: 5.9546 - acc: 0.0150\n","Epoch 6/10\n","8/8 [==============================] - 1s 119ms/step - loss: 5.8684 - acc: 0.0170\n","Epoch 7/10\n","8/8 [==============================] - 1s 107ms/step - loss: 5.7758 - acc: 0.0200\n","Epoch 8/10\n","8/8 [==============================] - 1s 105ms/step - loss: 5.6773 - acc: 0.0270\n","Epoch 9/10\n","8/8 [==============================] - 1s 107ms/step - loss: 5.5881 - acc: 0.0300\n","Epoch 10/10\n","8/8 [==============================] - 1s 109ms/step - loss: 5.4825 - acc: 0.0370\n","Epoch 1/10\n","8/8 [==============================] - 3s 119ms/step - loss: 5.4032 - acc: 0.0420\n","Epoch 2/10\n","8/8 [==============================] - 1s 126ms/step - loss: 5.3318 - acc: 0.0440\n","Epoch 3/10\n","8/8 [==============================] - 1s 112ms/step - loss: 5.2598 - acc: 0.0490\n","Epoch 4/10\n","8/8 [==============================] - 1s 107ms/step - loss: 5.1942 - acc: 0.0480\n","Epoch 5/10\n","8/8 [==============================] - 1s 112ms/step - loss: 5.1414 - acc: 0.0550\n","Epoch 6/10\n","8/8 [==============================] - 1s 125ms/step - loss: 5.0554 - acc: 0.0590\n","Epoch 7/10\n","8/8 [==============================] - 1s 120ms/step - loss: 5.0045 - acc: 0.0640\n","Epoch 8/10\n","8/8 [==============================] - 1s 123ms/step - loss: 4.9614 - acc: 0.0690\n","Epoch 9/10\n","8/8 [==============================] - 1s 112ms/step - loss: 4.8926 - acc: 0.0650\n","Epoch 10/10\n","8/8 [==============================] - 1s 125ms/step - loss: 4.8048 - acc: 0.0740\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f9d8209cdd0>"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["### 7-1-3 다중 출력 모델"],"metadata":{"id":"i5jEWL1T-635"}},{"cell_type":"code","source":["from keras import layers\n","from keras import Input\n","from keras.models import Model\n","vocabulary_size = 50000\n","num_income_groups = 10\n","\n","posts_input = Input(shape=(None,) , dtype='int32' , name='posts')\n","embedded_posts = layers.Embedding(vocabulary_size , 256)(posts_input)\n","x = layers.Conv1D(128 , 5 , activation='relu')(embedded_posts)\n","x = layers.MaxPooling1D(5)(x)\n","x = layers.Conv1D(256 , 5 , activation ='relu')(x)\n","x = layers.Conv1D(256 , 5 , activation ='relu')(x)\n","x = layers.MaxPooling1D(5)(x)\n","x = layers.Conv1D(256 , 5 , activation = 'relu')(x)\n","x = layers.Conv1D(256 , 5 , activation = 'relu')(x)\n","x = layers.GlobalMaxPooling1D()(x)\n","x = layers.Dense(128 , activation = 'relu')(x)\n","\n","age_prediction = layers.Dense(1, name='age')(x)\n","income_prediction = layers.Dense(num_income_groups , activation = 'softmax' , name = 'income')(x)\n","gender_prediction = layers.Dense(1 , activation='sigmoid' , name='gender')(x)\n","\n","model = Model(posts_input , [age_prediction , income_prediction , gender_prediction])"],"metadata":{"id":"FG_6eEN-9mdL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer = 'rmsprop' , loss = ['mse' , 'categorical_crossentropy' , 'binary_crossentropy'])\n","\n","model.compile(optimizer = 'rmsprop' , loss = {'age' : 'mse' , 'income' : 'categorical_crossentropy' , 'gender' : 'binary_crossentropy' })"],"metadata":{"id":"f__ZaUOLAq5O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer = 'rmsprop' , loss = ['mse' , 'categorical_crossentropy' , 'binary_crossentropy'] , loss_weights = [0.25 , 1. , 10.])\n","\n","model.compile(optimizer = 'rmsprop' , loss = {'age':'mse' , 'income':'categorical_crossentropy' , 'gender' : 'binzry_crossentropy'} , loss_weights = {'age':0.25 , 'income':1. , 'gender': 10.})"],"metadata":{"id":"eMXFiF-yCZkx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 7-1-4 층으로 구성된 비순환 유향 그래프"],"metadata":{"id":"gAh88JGdEn5P"}},{"cell_type":"markdown","source":["https://arxiv.org/abs/1409.4842."],"metadata":{"id":"XkiMYnLLG0Ml"}},{"cell_type":"markdown","source":["https://arxiv.org/abs/1312.4400."],"metadata":{"id":"Z9w5b5V2G7Ks"}},{"cell_type":"markdown","source":["#### 인셉션 모듈"],"metadata":{"id":"GSbDiGsjHuxu"}},{"cell_type":"code","source":["from keras import layers\n","branch_a = layers.Conv2D(128 , 1 , activation = 'relu' , strides = 2)(x)\n","\n","branch_b = layers.ConV2D(128 , 1 , activation = 'relu')(x)\n","branch_b = layers.Conv2D(128 , 1 , activation = 'relu' , strides=2)(branch_b)\n","\n","branch_c = layers.AveragePooling2D(3 , strides = 2)(x)\n","branch_c = layers.Conv2D(128 , 3 , activation = 'relu' , strides = 2)(branch_c)\n","\n","branch_d = layers.Conv2D(128 , 1 , activation='relu')(x)\n","branch_d = layers.Conv2D(128 , 3 , activation='relu')(branch_d)\n","branch_d = layers.Conv2D(128 , 3 , activation='relu' , strides=2)(branch_d)\n","\n","output = layers.concatenate([branch_a , branch_b , branch_c , branch_d] , axis = -1)"],"metadata":{"id":"SzI8Rsf3WmLG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### 잔차 연결"],"metadata":{"id":"MAZ9Qj7oXipI"}},{"cell_type":"markdown","source":["### 7-1-5 층 가중치 공유"],"metadata":{"id":"pmvMNfMxm7dp"}},{"cell_type":"code","source":["from keras import layers\n","from keras import Input\n","from keras.models import Model\n","\n","lstm = layers.LSTM(32)\n","left_input = Input(shape=(None , 128))\n","left_output = lstm(left_input)\n","\n","right_input = Input(shape=(None , 128))\n","right_output = lstm(right_input)\n","\n","merged = layers.concatenate([left_output , right_output] , axis = -1)\n","predictions = layers.Dense(1 , activation='sigmoid')(merged)\n","\n","model = Model( [left_input , right_input] , predictions )"],"metadata":{"id":"euHG9Yt2WtD6","executionInfo":{"status":"ok","timestamp":1648120442676,"user_tz":-540,"elapsed":937,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["### 7-1-6 층과 모델"],"metadata":{"id":"WK44Myi4omfw"}},{"cell_type":"code","source":["from keras import layers\n","from tensorflow.keras import applications\n","from keras import Input\n","\n","xception_base = applications.Xception(weights = None , include_top = False)\n","left_input = Input(shape=(250 , 250 , 3))\n","right_input = Input(shape=(250 , 250 ,3))\n","\n","left_features = xception_base(left_input)\n","right_features = xception_base(right_input)\n","\n","merged_features = layers.concatenate( [left_features , right_features] , axis = -1 )"],"metadata":{"id":"JKpPOzw5oikq","executionInfo":{"status":"ok","timestamp":1648120923237,"user_tz":-540,"elapsed":2263,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["### 7-1-7 정리"],"metadata":{"id":"c8qY-hr8rEQO"}},{"cell_type":"markdown","source":["## 7-2 케라스 콜백과 텐서보드를 사용한 딥러닝 모델 검사와 모니터링"],"metadata":{"id":"dF9xtrP6rYc0"}},{"cell_type":"markdown","source":["### 7-2-1 콜백을 사용하여 모델의 훈련 과정 제어하기"],"metadata":{"id":"s0bTLxcur3q9"}},{"cell_type":"markdown","source":["#### ModelCheckpoint와 EarlyStopping 콜백"],"metadata":{"id":"Wg_K5tGfsWfV"}},{"cell_type":"code","source":["import keras\n","\n","callbacks_list = [\n","    keras.callbacks.EarlyStopping(\n","        monitor = 'val_acc',\n","        patience=1,\n","    ),\n","    keras.callbacks.ModelCheckpoint(\n","        filepath = 'my_model.h5',\n","        monitor='val_loss',\n","        save_bset_only = True,\n","    )\n","]\n","\n","model.compile(optimizer='rmsprop',\n","              loss = 'binary_crossentropy',\n","              metrics = ['acc'])\n","\n","model.fit(x, y,\n","          epochs = 10,\n","          batch_size = 32,\n","          callbacks=callbacks_list,\n","          validation_data = (x_val , y_val))"],"metadata":{"id":"-J7gxNuAtKBu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### ReduceLROnPlateau 콜백"],"metadata":{"id":"wo5EknrctSVZ"}},{"cell_type":"code","source":["callbck_list = [\n","                keras.callbacks.ReduceLROnPlateau(\n","                    factor = 0.1 , \n","                    patience = 10\n","                )\n","]"],"metadata":{"id":"7EjVMibDtNTG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### 자신만의 콜백 만들기"],"metadata":{"id":"9f34ry4ftuLG"}},{"cell_type":"markdown","source":["### 7-2-2 텐서보드 소개: 텐서플로의 시각화 프레임 워크"],"metadata":{"id":"_48F5SQk_f6E"}},{"cell_type":"code","source":["import keras\n","from keras import layers\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","\n","max_features = 2000\n","max_len = 500\n","\n","(x_train , y_train) , (x_test , y_test) = imdb.load_data(num_words = max_features)\n","x_train = sequence.pad_sequences( x_train , maxlen = max_len )\n","x_test =  sequence.pad_sequences( x_test , maxlen=max_len )\n","\n","model = keras.models.Sequential()\n","model.add(layers.Embedding(max_features , 128 , input_length = max_len , name = 'embed'))\n","model.add(layers.Conv1D(32 , 7 , activation = 'relu'))\n","model.add(layers.MaxPooling1D(5))\n","model.add(layers.Conv1D(32 , 7 , activation = 'relu'))\n","model.add(layers.GlobalMaxPooling1D())\n","model.add(layers.Dense(1))\n","model.summary()\n","model.compile(optimizer='rmsprop', loss = 'binary_crossentropy' , metrics=['acc'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U2MaO3rztwV-","executionInfo":{"status":"ok","timestamp":1648128184037,"user_tz":-540,"elapsed":6327,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"df8244cc-b747-4ea4-f36c-a039eff8aa0e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embed (Embedding)           (None, 500, 128)          256000    \n","                                                                 \n"," conv1d_3 (Conv1D)           (None, 494, 32)           28704     \n","                                                                 \n"," max_pooling1d_1 (MaxPooling  (None, 98, 32)           0         \n"," 1D)                                                             \n","                                                                 \n"," conv1d_4 (Conv1D)           (None, 92, 32)            7200      \n","                                                                 \n"," global_max_pooling1d (Globa  (None, 32)               0         \n"," lMaxPooling1D)                                                  \n","                                                                 \n"," dense (Dense)               (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 291,937\n","Trainable params: 291,937\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["! mkdir my_log_dir"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UAWNJRQ8FVm3","executionInfo":{"status":"ok","timestamp":1648128192329,"user_tz":-540,"elapsed":529,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"f1f09878-4016-412f-e6ef-edb59257357c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["mkdir: cannot create directory ‘my_log_dir’: File exists\n"]}]},{"cell_type":"code","source":["callbacks = [\n","             keras.callbacks.TensorBoard(\n","                 log_dir = 'my_log_dir',\n","                 histogram_freq = 1,\n","                 embeddings_freq = 1,\n","             )\n","]\n","\n","history = model.fit(x_train , y_train,\n","                    epochs=20,\n","                    batch_size = 128,\n","                    validation_split=0.2,\n","                    callbacks=callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RALTtkmdFm5u","executionInfo":{"status":"ok","timestamp":1648129835849,"user_tz":-540,"elapsed":1643095,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d963cf40-8ade-429d-f9d2-d32fcf6a8cf3"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","157/157 [==============================] - 75s 469ms/step - loss: 0.6008 - acc: 0.6809 - val_loss: 0.4226 - val_acc: 0.8404\n","Epoch 2/20\n","157/157 [==============================] - 72s 456ms/step - loss: 0.4295 - acc: 0.8562 - val_loss: 0.5054 - val_acc: 0.8354\n","Epoch 3/20\n","157/157 [==============================] - 73s 463ms/step - loss: 0.3756 - acc: 0.8784 - val_loss: 0.4355 - val_acc: 0.8668\n","Epoch 4/20\n","157/157 [==============================] - 72s 460ms/step - loss: 0.3215 - acc: 0.9073 - val_loss: 0.6877 - val_acc: 0.8436\n","Epoch 5/20\n","157/157 [==============================] - 76s 484ms/step - loss: 0.2878 - acc: 0.9236 - val_loss: 0.6428 - val_acc: 0.8622\n","Epoch 6/20\n","157/157 [==============================] - 75s 474ms/step - loss: 0.2593 - acc: 0.9397 - val_loss: 0.6326 - val_acc: 0.8700\n","Epoch 7/20\n","157/157 [==============================] - 74s 471ms/step - loss: 0.2101 - acc: 0.9575 - val_loss: 0.6869 - val_acc: 0.8702\n","Epoch 8/20\n","157/157 [==============================] - 73s 462ms/step - loss: 0.1755 - acc: 0.9712 - val_loss: 0.8469 - val_acc: 0.8560\n","Epoch 9/20\n","157/157 [==============================] - 73s 467ms/step - loss: 0.1588 - acc: 0.9749 - val_loss: 0.8371 - val_acc: 0.8682\n","Epoch 10/20\n","157/157 [==============================] - 72s 456ms/step - loss: 0.1292 - acc: 0.9851 - val_loss: 0.8921 - val_acc: 0.8680\n","Epoch 11/20\n","157/157 [==============================] - 74s 471ms/step - loss: 0.1184 - acc: 0.9864 - val_loss: 0.9638 - val_acc: 0.8644\n","Epoch 12/20\n","157/157 [==============================] - 72s 462ms/step - loss: 0.1107 - acc: 0.9872 - val_loss: 1.1000 - val_acc: 0.8600\n","Epoch 13/20\n","157/157 [==============================] - 74s 473ms/step - loss: 0.1034 - acc: 0.9894 - val_loss: 1.0571 - val_acc: 0.8668\n","Epoch 14/20\n","157/157 [==============================] - 72s 460ms/step - loss: 0.1028 - acc: 0.9900 - val_loss: 1.1266 - val_acc: 0.8672\n","Epoch 15/20\n","157/157 [==============================] - 74s 471ms/step - loss: 0.1020 - acc: 0.9905 - val_loss: 1.1501 - val_acc: 0.8646\n","Epoch 16/20\n","157/157 [==============================] - 73s 468ms/step - loss: 0.0993 - acc: 0.9912 - val_loss: 1.2052 - val_acc: 0.8554\n","Epoch 17/20\n","157/157 [==============================] - 103s 655ms/step - loss: 0.1003 - acc: 0.9905 - val_loss: 1.1944 - val_acc: 0.8682\n","Epoch 18/20\n","157/157 [==============================] - 103s 659ms/step - loss: 0.1034 - acc: 0.9901 - val_loss: 1.1821 - val_acc: 0.8648\n","Epoch 19/20\n","157/157 [==============================] - 120s 763ms/step - loss: 0.0965 - acc: 0.9916 - val_loss: 1.2361 - val_acc: 0.8710\n","Epoch 20/20\n","157/157 [==============================] - 95s 604ms/step - loss: 0.0920 - acc: 0.9922 - val_loss: 1.2421 - val_acc: 0.8644\n"]}]},{"cell_type":"code","source":["!tensorboard --logdir=my_log_dir"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XKIUu38iF8a1","executionInfo":{"status":"ok","timestamp":1648130074738,"user_tz":-540,"elapsed":237578,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"5ce79652-3c3c-4e3d-8029-c6a96ab58894"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["2022-03-24 13:50:40.714050: E tensorflow/stream_executor/cuda/cuda_driver.cc:271] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n","\n","NOTE: Using experimental fast data loading logic. To disable, pass\n","    \"--load_fast=false\" and report issues on GitHub. More details:\n","    https://github.com/tensorflow/tensorboard/issues/4784\n","\n","Serving TensorBoard on localhost; to expose to the network, use a proxy or pass --bind_all\n","TensorBoard 2.8.0 at http://localhost:6006/ (Press CTRL+C to quit)\n","http://localhost:6006/\n","^C\n"]}]},{"cell_type":"markdown","source":["### 7-2-3 정리"],"metadata":{"id":"UPzgj3RjIRzu"}},{"cell_type":"markdown","source":["## 7-3 모델의 성능을 최대로 끌어올리기"],"metadata":{"id":"QBfkYExUIYtq"}},{"cell_type":"markdown","source":["### 7-3-1 고급 구조 패턴"],"metadata":{"id":"-Sdlpa5LJT5k"}},{"cell_type":"markdown","source":["#### 배치 정규화"],"metadata":{"id":"fkAZgj8MJj2g"}},{"cell_type":"markdown","source":["#### 깊이별 분리 합성곱"],"metadata":{"id":"Ku0Wsq16KI2y"}},{"cell_type":"code","source":["from keras.models import Sequential, Model\n","from keras import layers\n","\n","height = 64\n","width = 64\n","channels = 3\n","num_classes = 10\n","\n","model = Sequential()\n","model.add(layers.SeparableConv2D(32 , 3,\n","                                 activation='relu',\n","                                 input_shape=(height , width , channels,)))\n","model.add(layers.SeparableConv2D(64 , 3 , activation = 'relu'))\n","model.add(layers.SeparableConv2D(128 , 3 , activation = 'relu'))\n","model.add(layers.MaxPooling2D(2))\n","\n","model.add(layers.SeparableConv2D(64 , 3 , activation = 'relu'))\n","model.add(layers.SeparableConv2D(128 , 3 , activation = 'relu'))\n","model.add(layers.GlobalAveragePooling2D())\n","\n","model.add(layers.Dense(32 , activation='relu'))\n","model.add(layers.Dense(num_classes , activation='softmax'))\n","\n","model.compile(optimizer = 'rmsprop' , loss = 'categorical_crossentropy')"],"metadata":{"id":"wY5M8kOcHi5-","executionInfo":{"status":"ok","timestamp":1648130096756,"user_tz":-540,"elapsed":424,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["### 7-3-2 하이퍼파라미터 최적화"],"metadata":{"id":"FWR23vx4Nex4"}},{"cell_type":"code","source":["#Hyperopt\n","# Random"],"metadata":{"id":"V5flCClfPslH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 7-3-3 모델 앙상블"],"metadata":{"id":"nG-UtoY0OPi3"}},{"cell_type":"markdown","source":["### 7-3-4 정리"],"metadata":{"id":"Tiq4YW0tPflf"}},{"cell_type":"code","source":[""],"metadata":{"id":"DjqKRPPiNXhS"},"execution_count":null,"outputs":[]}]}