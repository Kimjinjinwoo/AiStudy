{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"케라스창시자 3단원","provenance":[],"authorship_tag":"ABX9TyNtoWR3Q4BAh5PmY9654yfR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# 3장 신경망 시작하기"],"metadata":{"id":"-ZbEfjqin_3x"}},{"cell_type":"markdown","source":["## 3-1 신경망의 구조"],"metadata":{"id":"FZuQjwZBoFq7"}},{"cell_type":"markdown","source":["### 3-1-1 층: 딥러닝의 구성 단위"],"metadata":{"id":"EmeNi0gxrIzz"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"vJoF-RF6n7QU"},"outputs":[],"source":["from keras import layers\n","\n","layer = layers.Dense(32, input_shape=(784,))"]},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","model = models.Sequential()\n","model.add(layers.Dense(32 , input_shape=(784,)))\n","model.add(layers.Dense(10))"],"metadata":{"id":"PCqUUN6prpys"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3-1-2 모델: 층의 네트워크"],"metadata":{"id":"ujDor47asERT"}},{"cell_type":"markdown","source":["### 3-1-3 손실 함수와 옵티마이저: 학습 과정을 조절하는 열쇠"],"metadata":{"id":"tUtBiqiHsn1Q"}},{"cell_type":"markdown","source":["## 3-2 케라스 소개"],"metadata":{"id":"PymwxlYDtPXI"}},{"cell_type":"markdown","source":["### 3-2-1 케라스, 텐서플로 , 씨아노, CNTK"],"metadata":{"id":"j9M9wOR-thzd"}},{"cell_type":"markdown","source":["### 3-2-2 케라스를 사용한 개발: 빠르게 둘러보기"],"metadata":{"id":"fRjzH2Xsydz1"}},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","model = models.Sequential()\n","model.add(layers.Dense(32 , activation = 'relu' , input_shape=(784,)))\n","model.add(layers.Dense(10 , activation = 'softmax'))"],"metadata":{"id":"IERkcIgssCp_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input_tensor = layers.Input(shape=(784,))\n","x = layers.Dense(32 , activation='relu')(input_tensor)\n","output_tensor = layers.Dense(10 , activation = 'softmax')(x)\n","\n","model = models.Model(inputs = input_tensor, outputs=output_tensor)"],"metadata":{"id":"UOzfH0InzPv0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras import optimizers\n","\n","model.compile(optimizer = optimizers.RMSprop(lr=0.001) , loss = 'mse' , metrics=['accuracy'])"],"metadata":{"id":"noWXYRbj0V4d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.fit( input_tensor , target_tensor , batch_sizr = 128 , epochs=10 )"],"metadata":{"id":"XeWXVJkQ0KsV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 3-3 딥러닝 컴퓨터 셋팅"],"metadata":{"id":"t1kglEsC0ic4"}},{"cell_type":"markdown","source":["### 3-3-1 주피터 노트북: 딥러닝 실험을 위한 최적의 방법"],"metadata":{"id":"qJWq7txXFofY"}},{"cell_type":"markdown","source":["### 3-3-2 케라스 시작하기: 두 가지 방법"],"metadata":{"id":"Dwm1eznFF-KP"}},{"cell_type":"markdown","source":["### 3-3-3 클라우드에서 딥러닝 작업을 수행했을 때 장단점"],"metadata":{"id":"Y8_hYLK1HbJz"}},{"cell_type":"markdown","source":["### 3-3-4 어떤 GPU 카드가 딥러닝에 최적일까?"],"metadata":{"id":"FPjMEelAIQFL"}},{"cell_type":"markdown","source":["## 3-4 영화 리뷰 분류: 이진 분류 예제"],"metadata":{"id":"rCjlBI2WI5dR"}},{"cell_type":"markdown","source":["### 3-4-1 IMDB 데이터셋"],"metadata":{"id":"lSA27cLPI_tW"}},{"cell_type":"code","source":["from keras.datasets import imdb\n","\n","(train_data , train_labels) , (test_data , test_labels) = imdb.load_data(num_words=10000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G_7I19j70lJX","executionInfo":{"status":"ok","timestamp":1646115822577,"user_tz":-540,"elapsed":4850,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d440bf7f-f1cc-4268-9861-3b74d0895fbb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["train_data[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rxmoAQVRJgal","executionInfo":{"status":"ok","timestamp":1646115831967,"user_tz":-540,"elapsed":2,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"a5e76c80-8536-45a9-a976-859ba000e32f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 14,\n"," 22,\n"," 16,\n"," 43,\n"," 530,\n"," 973,\n"," 1622,\n"," 1385,\n"," 65,\n"," 458,\n"," 4468,\n"," 66,\n"," 3941,\n"," 4,\n"," 173,\n"," 36,\n"," 256,\n"," 5,\n"," 25,\n"," 100,\n"," 43,\n"," 838,\n"," 112,\n"," 50,\n"," 670,\n"," 2,\n"," 9,\n"," 35,\n"," 480,\n"," 284,\n"," 5,\n"," 150,\n"," 4,\n"," 172,\n"," 112,\n"," 167,\n"," 2,\n"," 336,\n"," 385,\n"," 39,\n"," 4,\n"," 172,\n"," 4536,\n"," 1111,\n"," 17,\n"," 546,\n"," 38,\n"," 13,\n"," 447,\n"," 4,\n"," 192,\n"," 50,\n"," 16,\n"," 6,\n"," 147,\n"," 2025,\n"," 19,\n"," 14,\n"," 22,\n"," 4,\n"," 1920,\n"," 4613,\n"," 469,\n"," 4,\n"," 22,\n"," 71,\n"," 87,\n"," 12,\n"," 16,\n"," 43,\n"," 530,\n"," 38,\n"," 76,\n"," 15,\n"," 13,\n"," 1247,\n"," 4,\n"," 22,\n"," 17,\n"," 515,\n"," 17,\n"," 12,\n"," 16,\n"," 626,\n"," 18,\n"," 2,\n"," 5,\n"," 62,\n"," 386,\n"," 12,\n"," 8,\n"," 316,\n"," 8,\n"," 106,\n"," 5,\n"," 4,\n"," 2223,\n"," 5244,\n"," 16,\n"," 480,\n"," 66,\n"," 3785,\n"," 33,\n"," 4,\n"," 130,\n"," 12,\n"," 16,\n"," 38,\n"," 619,\n"," 5,\n"," 25,\n"," 124,\n"," 51,\n"," 36,\n"," 135,\n"," 48,\n"," 25,\n"," 1415,\n"," 33,\n"," 6,\n"," 22,\n"," 12,\n"," 215,\n"," 28,\n"," 77,\n"," 52,\n"," 5,\n"," 14,\n"," 407,\n"," 16,\n"," 82,\n"," 2,\n"," 8,\n"," 4,\n"," 107,\n"," 117,\n"," 5952,\n"," 15,\n"," 256,\n"," 4,\n"," 2,\n"," 7,\n"," 3766,\n"," 5,\n"," 723,\n"," 36,\n"," 71,\n"," 43,\n"," 530,\n"," 476,\n"," 26,\n"," 400,\n"," 317,\n"," 46,\n"," 7,\n"," 4,\n"," 2,\n"," 1029,\n"," 13,\n"," 104,\n"," 88,\n"," 4,\n"," 381,\n"," 15,\n"," 297,\n"," 98,\n"," 32,\n"," 2071,\n"," 56,\n"," 26,\n"," 141,\n"," 6,\n"," 194,\n"," 7486,\n"," 18,\n"," 4,\n"," 226,\n"," 22,\n"," 21,\n"," 134,\n"," 476,\n"," 26,\n"," 480,\n"," 5,\n"," 144,\n"," 30,\n"," 5535,\n"," 18,\n"," 51,\n"," 36,\n"," 28,\n"," 224,\n"," 92,\n"," 25,\n"," 104,\n"," 4,\n"," 226,\n"," 65,\n"," 16,\n"," 38,\n"," 1334,\n"," 88,\n"," 12,\n"," 16,\n"," 283,\n"," 5,\n"," 16,\n"," 4472,\n"," 113,\n"," 103,\n"," 32,\n"," 15,\n"," 16,\n"," 5345,\n"," 19,\n"," 178,\n"," 32]"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["train_labels[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_XiFFrMmJjuK","executionInfo":{"status":"ok","timestamp":1646115838326,"user_tz":-540,"elapsed":5,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"792102b0-1936-4c0a-f0bc-f5e79e9319ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["max([max(sequence) for sequence in train_data])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IfBkEk1yJlWs","executionInfo":{"status":"ok","timestamp":1646115879167,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d12551ec-e412-44a4-a356-9e81f17ab12b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9999"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import numpy as np\n","\n","def vectorize_sequences(sequences , dimension=10000):\n","    results = np.zeros((len(sequences), dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i , sequence] = 1\n","    return results\n","\n","x_train = vectorize_sequences(train_data)\n","x_test = vectorize_sequences(test_data)"],"metadata":{"id":"wfGapZHXJsrH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = np.asarray(train_labels).astype('float32')\n","y_test = np.asarray(test_labels.astype('float32'))"],"metadata":{"id":"43nLm2auRDrq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3-4-3 신경망 모델 만들기"],"metadata":{"id":"qS3NFMo7MTMO"}},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","model = models.Sequential()\n","model.add(layers.Dense(16 , activation='relu' , input_shape=(10000,)))\n","model.add(layers.Dense(16 , activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))"],"metadata":{"id":"Cybk44jFLk_T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer='rmsprop',\n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])"],"metadata":{"id":"nsQWlZDBNVQx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras import optimizers\n","\n","model.compile(optimizer = optimizers.RMSprop(lr=0.001) ,\n","              loss = 'losses.binary_crossentropy',\n","              metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_o3ebDPXN1Uv","executionInfo":{"status":"ok","timestamp":1646117833815,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"1332386e-c34b-479a-8562-893ccac482b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/rmsprop.py:130: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(RMSprop, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"markdown","source":["### 3-4-4 훈련 검증"],"metadata":{"id":"mCqKUEwBQPEg"}},{"cell_type":"code","source":["x_val = x_train[:10000]\n","partial_x_train = x_train[10000:]\n","y_val = y_train[:10000]\n","partial_y_train = y_train[10000:]"],"metadata":{"id":"aBrCq30WO0yq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer = 'rmsprop',\n","              loss = 'binary_crossentropy',\n","              metrics=['acc'])\n","\n","history = model.fit(partial_x_train , partial_y_train , epochs=20 , batch_size =512 , validation_data=(x_val , y_val))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bbH_rCX2Qwul","executionInfo":{"status":"ok","timestamp":1646118472773,"user_tz":-540,"elapsed":22113,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"7ff09d23-0a8b-4d92-bb68-8e65a094b2c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","30/30 [==============================] - 5s 52ms/step - loss: 0.5267 - acc: 0.7745 - val_loss: 0.3933 - val_acc: 0.8686\n","Epoch 2/20\n","30/30 [==============================] - 1s 23ms/step - loss: 0.3136 - acc: 0.9008 - val_loss: 0.3169 - val_acc: 0.8791\n","Epoch 3/20\n","30/30 [==============================] - 1s 29ms/step - loss: 0.2271 - acc: 0.9282 - val_loss: 0.2877 - val_acc: 0.8873\n","Epoch 4/20\n","30/30 [==============================] - 1s 25ms/step - loss: 0.1753 - acc: 0.9445 - val_loss: 0.3159 - val_acc: 0.8735\n","Epoch 5/20\n","30/30 [==============================] - 1s 20ms/step - loss: 0.1470 - acc: 0.9517 - val_loss: 0.3197 - val_acc: 0.8755\n","Epoch 6/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.1166 - acc: 0.9643 - val_loss: 0.2954 - val_acc: 0.8857\n","Epoch 7/20\n","30/30 [==============================] - 1s 22ms/step - loss: 0.0941 - acc: 0.9724 - val_loss: 0.3085 - val_acc: 0.8820\n","Epoch 8/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0767 - acc: 0.9789 - val_loss: 0.3555 - val_acc: 0.8764\n","Epoch 9/20\n","30/30 [==============================] - 1s 22ms/step - loss: 0.0626 - acc: 0.9841 - val_loss: 0.3612 - val_acc: 0.8809\n","Epoch 10/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0496 - acc: 0.9886 - val_loss: 0.3762 - val_acc: 0.8779\n","Epoch 11/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0376 - acc: 0.9925 - val_loss: 0.4055 - val_acc: 0.8737\n","Epoch 12/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0316 - acc: 0.9931 - val_loss: 0.4305 - val_acc: 0.8764\n","Epoch 13/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0235 - acc: 0.9957 - val_loss: 0.4609 - val_acc: 0.8743\n","Epoch 14/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0146 - acc: 0.9987 - val_loss: 0.5167 - val_acc: 0.8732\n","Epoch 15/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0175 - acc: 0.9963 - val_loss: 0.5296 - val_acc: 0.8708\n","Epoch 16/20\n","30/30 [==============================] - 1s 22ms/step - loss: 0.0074 - acc: 0.9997 - val_loss: 0.5684 - val_acc: 0.8679\n","Epoch 17/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0087 - acc: 0.9989 - val_loss: 0.5924 - val_acc: 0.8703\n","Epoch 18/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0066 - acc: 0.9993 - val_loss: 0.6246 - val_acc: 0.8673\n","Epoch 19/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0029 - acc: 0.9999 - val_loss: 0.6597 - val_acc: 0.8677\n","Epoch 20/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.0053 - acc: 0.9986 - val_loss: 0.6901 - val_acc: 0.8664\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","history_dict = history.history\n","loss = history_dict['loss']\n","val_loss = history_dict['val_loss']\n","\n","epochs = range(1, len(loss) + 1)\n","\n","plt.plot(epochs, loss , 'bo' , label='Training loss')\n","plt.plot(epochs, val_loss , 'b' , label='Validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"wQb6TDQ7TeQj","executionInfo":{"status":"ok","timestamp":1646118624325,"user_tz":-540,"elapsed":533,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"05a8f1ee-4a47-47b3-924f-095e24197a4b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.clf()\n","acc = history_dict['acc']\n","val_acc = history_dict['val_acc']\n","\n","plt.plot(epochs ,  acc , 'bo' , label='Training acc')\n","plt.plot(epochs, val_acc , 'b' , label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"_KmgTvDqUNZS","executionInfo":{"status":"ok","timestamp":1646118780277,"user_tz":-540,"elapsed":966,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"a85b5227-39d7-49f0-b3e8-fa300afe2c7c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model = models.Sequential()\n","model.add(layers.Dense(16 , activation='relu' , input_shape=(10000,)))\n","model.add(layers.Dense(16 , activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","\n","model.compile(optimizer='rmsprop', loss = 'binary_crossentropy' , metrics = ['accuracy'])\n","\n","model.fit(x_train , y_train , epochs=4 , batch_size = 512)\n","results = model.evaluate(x_test , y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"twm6NVa4UxIp","executionInfo":{"status":"ok","timestamp":1646119127004,"user_tz":-540,"elapsed":11993,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"833999f5-915c-48b3-c50b-80cc5729512a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/4\n","49/49 [==============================] - 1s 14ms/step - loss: 0.4519 - accuracy: 0.8198\n","Epoch 2/4\n","49/49 [==============================] - 1s 14ms/step - loss: 0.2609 - accuracy: 0.9104\n","Epoch 3/4\n","49/49 [==============================] - 1s 13ms/step - loss: 0.2030 - accuracy: 0.9290\n","Epoch 4/4\n","49/49 [==============================] - 1s 14ms/step - loss: 0.1690 - accuracy: 0.9381\n","782/782 [==============================] - 3s 4ms/step - loss: 0.2963 - accuracy: 0.8819\n"]}]},{"cell_type":"markdown","source":["### 3-4-5 훈련된 모델로 새로운 데이터에 대해 예측하기"],"metadata":{"id":"7NT1Pc_AWGo3"}},{"cell_type":"code","source":["model.predict(x_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nnzRc_e_VxQe","executionInfo":{"status":"ok","timestamp":1646119157615,"user_tz":-540,"elapsed":3160,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"bf6c75ec-8462-46e2-efc2-e36d58127db9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.24219932],\n","       [0.9998691 ],\n","       [0.93756366],\n","       ...,\n","       [0.14380167],\n","       [0.09265055],\n","       [0.63077   ]], dtype=float32)"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["### 3-4-6 추가 실험"],"metadata":{"id":"MvPZg-MmWQnr"}},{"cell_type":"markdown","source":["### 3-4-7 정리"],"metadata":{"id":"elp2YWfUWqrq"}},{"cell_type":"markdown","source":["## 3-5 뉴스 기사 분류: 다중 분류 문제"],"metadata":{"id":"bX8cWIEtWtJt"}},{"cell_type":"markdown","source":["### 3-5-1 로이터 데이터 셋"],"metadata":{"id":"VLrKOT8zWyx_"}},{"cell_type":"code","source":["from keras.datasets import reuters\n","\n","(train_data , train_labels) , (test_data , test_labels) = reuters.load_data(num_words=10000)"],"metadata":{"id":"_7JvreEdWO9t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_labels.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tlsoq2txglGj","executionInfo":{"status":"ok","timestamp":1646121973319,"user_tz":-540,"elapsed":11,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"2ca80ad1-444c-4d5f-a806-9c1fe49cd116"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(8982,)"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["test_lables.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aWZQ6xT7Xpsu","executionInfo":{"status":"ok","timestamp":1646121973320,"user_tz":-540,"elapsed":11,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"44cd02e9-e6f8-43c8-e9cc-1cf2675e3fed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2246,)"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["len(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GAfHfqVyXugw","executionInfo":{"status":"ok","timestamp":1646121973321,"user_tz":-540,"elapsed":9,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"c64b6eb3-4711-46d3-8ae4-64ff94a01104"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2246"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["train_data[10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-mpG9utvXvqM","executionInfo":{"status":"ok","timestamp":1646121973808,"user_tz":-540,"elapsed":6,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"8485b139-5770-44cf-b468-33e7e02994af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 245,\n"," 273,\n"," 207,\n"," 156,\n"," 53,\n"," 74,\n"," 160,\n"," 26,\n"," 14,\n"," 46,\n"," 296,\n"," 26,\n"," 39,\n"," 74,\n"," 2979,\n"," 3554,\n"," 14,\n"," 46,\n"," 4689,\n"," 4329,\n"," 86,\n"," 61,\n"," 3499,\n"," 4795,\n"," 14,\n"," 61,\n"," 451,\n"," 4329,\n"," 17,\n"," 12]"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["word_index = reuters.get_word_index()\n","reverse_word_index = dict([(value , key) for (key, value) in word_index.items()])\n","decoded_newswire = ' '.join([reverse_word_index.get(i - 3 , '?' ) for i in train_data[0] ] ) "],"metadata":{"id":"QknWoQUkXx5d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3-5-2 데이터 준비"],"metadata":{"id":"FUgHjUZ-YTV5"}},{"cell_type":"code","source":["import numpy as np\n","\n","def vectorize_sequences(sequences , dimension = 10000):\n","    results = np.zeros((len(sequences) , dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i , sequence] = 1.\n","    return results\n","\n","x_train = vectorize_sequences(train_data)\n","x_test = vectorize_sequences(test_data)"],"metadata":{"id":"80CQm0kXYN05"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def to_one_hot(labels , dimension = 46):\n","    results = np.zeros((len(labels) , dimension))\n","    for i, label in enumerate(labels):\n","        results[i, label] = 1.\n","    return results\n","\n","one_hot_train_labels = to_one_hot(train_labels)\n","one_hot_test_labels = to_one_hot(test_labels)"],"metadata":{"id":"mI_jBB9vYzH8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.utils.np_utils import to_categorical\n","\n","one_hot_train_labels = to_categorical(train_labels)\n","one_hot_test_labels = to_categorical(test_labels)"],"metadata":{"id":"tBSOiwXwZcMS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_labels.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-yKU11zugQAU","executionInfo":{"status":"ok","timestamp":1646121974870,"user_tz":-540,"elapsed":10,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"da86eb5e-d8d3-4cab-edd4-9c8897821c38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2246,)"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["test_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YO7v5SvXgW6-","executionInfo":{"status":"ok","timestamp":1646121974871,"user_tz":-540,"elapsed":8,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"fd74f91a-22eb-4ebc-f874-dcf0e44b7e84"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2246,)"]},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","source":["### 3-5-3 모델구성"],"metadata":{"id":"KTnPenlYZqyf"}},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","model = models.Sequential()\n","model.add(layers.Dense(64 , activation='relu' , input_shape=(10000,)))\n","model.add(layers.Dense(64 , activation='relu'))\n","model.add(layers.Dense(46 , activation='softmax'))"],"metadata":{"id":"GXvYc2BUZqSN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer='rmsprop',\n","              loss = 'categorical_crossentropy',\n","              metrics=['accuracy'])"],"metadata":{"id":"CSO6ay9QaXRS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3-5-4 훈련 검증"],"metadata":{"id":"arbl0fcPakv1"}},{"cell_type":"code","source":["x_val = x_train[:1000]\n","partial_x_train = x_train[1000:]\n","y_val = one_hot_train_labels[:1000]\n","partial_y_train = one_hot_train_labels[1000:]"],"metadata":{"id":"-lDWB0yiakW7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model.fit(partial_x_train,\n","                    partial_y_train,\n","                    epochs=20,\n","                    batch_size=512,\n","                    validation_data=(x_val , y_val) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HQOMOfhLa_J5","executionInfo":{"status":"ok","timestamp":1646121987178,"user_tz":-540,"elapsed":11322,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d8818ecc-a682-460b-8a28-91623ca7c701"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","16/16 [==============================] - 1s 33ms/step - loss: 2.5344 - accuracy: 0.5356 - val_loss: 1.6714 - val_accuracy: 0.6560\n","Epoch 2/20\n","16/16 [==============================] - 1s 34ms/step - loss: 1.3841 - accuracy: 0.7199 - val_loss: 1.3056 - val_accuracy: 0.7160\n","Epoch 3/20\n","16/16 [==============================] - 0s 18ms/step - loss: 1.0424 - accuracy: 0.7829 - val_loss: 1.1417 - val_accuracy: 0.7550\n","Epoch 4/20\n","16/16 [==============================] - 1s 32ms/step - loss: 0.8258 - accuracy: 0.8321 - val_loss: 1.0416 - val_accuracy: 0.7780\n","Epoch 5/20\n","16/16 [==============================] - 0s 24ms/step - loss: 0.6647 - accuracy: 0.8637 - val_loss: 0.9706 - val_accuracy: 0.8010\n","Epoch 6/20\n","16/16 [==============================] - 0s 21ms/step - loss: 0.5298 - accuracy: 0.8938 - val_loss: 0.9459 - val_accuracy: 0.8060\n","Epoch 7/20\n","16/16 [==============================] - 1s 33ms/step - loss: 0.4296 - accuracy: 0.9134 - val_loss: 0.9131 - val_accuracy: 0.8130\n","Epoch 8/20\n","16/16 [==============================] - 0s 17ms/step - loss: 0.3497 - accuracy: 0.9280 - val_loss: 0.9062 - val_accuracy: 0.8150\n","Epoch 9/20\n","16/16 [==============================] - 0s 17ms/step - loss: 0.2943 - accuracy: 0.9370 - val_loss: 0.9336 - val_accuracy: 0.8070\n","Epoch 10/20\n","16/16 [==============================] - 0s 19ms/step - loss: 0.2450 - accuracy: 0.9437 - val_loss: 0.9280 - val_accuracy: 0.8070\n","Epoch 11/20\n","16/16 [==============================] - 0s 18ms/step - loss: 0.2118 - accuracy: 0.9471 - val_loss: 0.9290 - val_accuracy: 0.8280\n","Epoch 12/20\n","16/16 [==============================] - 0s 20ms/step - loss: 0.1853 - accuracy: 0.9530 - val_loss: 0.9508 - val_accuracy: 0.8140\n","Epoch 13/20\n","16/16 [==============================] - 0s 18ms/step - loss: 0.1667 - accuracy: 0.9536 - val_loss: 0.9707 - val_accuracy: 0.8100\n","Epoch 14/20\n","16/16 [==============================] - 0s 18ms/step - loss: 0.1545 - accuracy: 0.9535 - val_loss: 0.9801 - val_accuracy: 0.8140\n","Epoch 15/20\n","16/16 [==============================] - 0s 17ms/step - loss: 0.1475 - accuracy: 0.9549 - val_loss: 1.0199 - val_accuracy: 0.8040\n","Epoch 16/20\n","16/16 [==============================] - 0s 17ms/step - loss: 0.1305 - accuracy: 0.9572 - val_loss: 1.0344 - val_accuracy: 0.8030\n","Epoch 17/20\n","16/16 [==============================] - 0s 20ms/step - loss: 0.1224 - accuracy: 0.9595 - val_loss: 1.0286 - val_accuracy: 0.8100\n","Epoch 18/20\n","16/16 [==============================] - 0s 21ms/step - loss: 0.1209 - accuracy: 0.9570 - val_loss: 1.0622 - val_accuracy: 0.8070\n","Epoch 19/20\n","16/16 [==============================] - 0s 17ms/step - loss: 0.1178 - accuracy: 0.9583 - val_loss: 1.0639 - val_accuracy: 0.8060\n","Epoch 20/20\n","16/16 [==============================] - 0s 19ms/step - loss: 0.1133 - accuracy: 0.9560 - val_loss: 1.0866 - val_accuracy: 0.8080\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(loss) + 1)\n","\n","plt.plot(epochs , loss , 'bo' , label='Training loss')\n","plt.plot(epochs , val_loss , 'b' , label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"Lg7wjzNjbMH0","executionInfo":{"status":"ok","timestamp":1646121987181,"user_tz":-540,"elapsed":10,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"46ad4537-7c84-4cdb-c347-15a8be8f0672"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["history.history.keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QjZDd6bqcy4j","executionInfo":{"status":"ok","timestamp":1646121987182,"user_tz":-540,"elapsed":9,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"610bed54-71e1-4914-cf02-6fd5e532aaef"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["plt.clf()\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","plt.plot(epochs , acc , 'bo' , label='Training acc')\n","plt.plot(epochs , val_acc , 'b' , label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"5iyZiV2ncFf-","executionInfo":{"status":"ok","timestamp":1646121987524,"user_tz":-540,"elapsed":6,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"79858bac-0e94-4a05-e7d9-7088b5405c7c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model = models.Sequential()\n","model.add(layers.Dense(64 , activation='relu' , input_shape=(10000,) ) )\n","model.add(layers.Dense(64 , activation='relu'))\n","model.add(layers.Dense(46 , activation='softmax'))\n","\n","model.compile(optimizer='rmsprop',\n","              loss= 'categorical_crossentropy',\n","              metrics=['accuracy'])\n","model.fit(partial_x_train ,\n","          partial_y_train,\n","          epochs=9,\n","          batch_size = 512,\n","          validation_data = (x_val,y_val))\n","\n","results = model.evaluate( x_test , one_hot_test_labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4GemKoRXcghg","executionInfo":{"status":"ok","timestamp":1646121994246,"user_tz":-540,"elapsed":6727,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"5f3b84e5-d363-4d62-ad60-5940fd6c7a00"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/9\n","16/16 [==============================] - 2s 38ms/step - loss: 2.6136 - accuracy: 0.4965 - val_loss: 1.7387 - val_accuracy: 0.6530\n","Epoch 2/9\n","16/16 [==============================] - 0s 26ms/step - loss: 1.4241 - accuracy: 0.7048 - val_loss: 1.3049 - val_accuracy: 0.7180\n","Epoch 3/9\n","16/16 [==============================] - 0s 25ms/step - loss: 1.0537 - accuracy: 0.7750 - val_loss: 1.1272 - val_accuracy: 0.7660\n","Epoch 4/9\n","16/16 [==============================] - 0s 22ms/step - loss: 0.8199 - accuracy: 0.8305 - val_loss: 1.0334 - val_accuracy: 0.7850\n","Epoch 5/9\n","16/16 [==============================] - 0s 24ms/step - loss: 0.6450 - accuracy: 0.8701 - val_loss: 0.9726 - val_accuracy: 0.7970\n","Epoch 6/9\n","16/16 [==============================] - 0s 25ms/step - loss: 0.5154 - accuracy: 0.8965 - val_loss: 0.9200 - val_accuracy: 0.8150\n","Epoch 7/9\n","16/16 [==============================] - 0s 22ms/step - loss: 0.4111 - accuracy: 0.9142 - val_loss: 0.9096 - val_accuracy: 0.8190\n","Epoch 8/9\n","16/16 [==============================] - 0s 23ms/step - loss: 0.3371 - accuracy: 0.9275 - val_loss: 0.9008 - val_accuracy: 0.8140\n","Epoch 9/9\n","16/16 [==============================] - 0s 19ms/step - loss: 0.2796 - accuracy: 0.9384 - val_loss: 0.8958 - val_accuracy: 0.8120\n","71/71 [==============================] - 0s 6ms/step - loss: 0.9787 - accuracy: 0.7894\n"]}]},{"cell_type":"markdown","source":["### 3-5-5 새로운 데이터에 대해 예측하기"],"metadata":{"id":"NPriF0AihLVQ"}},{"cell_type":"code","source":["predictions = model.predict(x_test)"],"metadata":{"id":"rREs44gkeljJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3-5-6 레이블과 손실을 다루는 다른 방법"],"metadata":{"id":"RU6aLPgrhRlp"}},{"cell_type":"code","source":["y_train = np.array(train_labels)\n","y_test = np.array(test_labels)"],"metadata":{"id":"G1jtOyj1hQ0M"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3-5-7 충분히 큰 중간층을 두어야 하는 이유"],"metadata":{"id":"Wwrm9L-mhecP"}},{"cell_type":"code","source":["model = models.Sequential()\n","model.add(layers.Dense(64 , activation='relu' , input_shape=(10000,)))\n","model.add(layers.Dense(4 , activation='relu'))\n","model.add(layers.Dense(46 , activation='softmax'))\n","\n","model.compile(optimizer='rmsprop',\n","              loss = 'categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","model.fit(partial_x_train,\n","          partial_y_train,\n","          epochs=20,\n","          batch_size=128,\n","          validation_data=(x_val , y_val))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0I_AskaPhZiG","executionInfo":{"status":"ok","timestamp":1646122279513,"user_tz":-540,"elapsed":22250,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"37de08ed-95f6-40e0-d08d-e7666dd2ba82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","63/63 [==============================] - 2s 20ms/step - loss: 3.3679 - accuracy: 0.1463 - val_loss: 2.8123 - val_accuracy: 0.3630\n","Epoch 2/20\n","63/63 [==============================] - 1s 12ms/step - loss: 2.2533 - accuracy: 0.5355 - val_loss: 1.8552 - val_accuracy: 0.6020\n","Epoch 3/20\n","63/63 [==============================] - 1s 11ms/step - loss: 1.5752 - accuracy: 0.6487 - val_loss: 1.5383 - val_accuracy: 0.6480\n","Epoch 4/20\n","63/63 [==============================] - 1s 12ms/step - loss: 1.3432 - accuracy: 0.6729 - val_loss: 1.4504 - val_accuracy: 0.6480\n","Epoch 5/20\n","63/63 [==============================] - 1s 11ms/step - loss: 1.2232 - accuracy: 0.6802 - val_loss: 1.4146 - val_accuracy: 0.6460\n","Epoch 6/20\n","63/63 [==============================] - 1s 11ms/step - loss: 1.1374 - accuracy: 0.6853 - val_loss: 1.4017 - val_accuracy: 0.6490\n","Epoch 7/20\n","63/63 [==============================] - 1s 12ms/step - loss: 1.0721 - accuracy: 0.6961 - val_loss: 1.4147 - val_accuracy: 0.6540\n","Epoch 8/20\n","63/63 [==============================] - 1s 13ms/step - loss: 1.0161 - accuracy: 0.7160 - val_loss: 1.4489 - val_accuracy: 0.6640\n","Epoch 9/20\n","63/63 [==============================] - 1s 14ms/step - loss: 0.9635 - accuracy: 0.7392 - val_loss: 1.4460 - val_accuracy: 0.6680\n","Epoch 10/20\n","63/63 [==============================] - 1s 14ms/step - loss: 0.9200 - accuracy: 0.7486 - val_loss: 1.4780 - val_accuracy: 0.6690\n","Epoch 11/20\n","63/63 [==============================] - 1s 14ms/step - loss: 0.8793 - accuracy: 0.7526 - val_loss: 1.5107 - val_accuracy: 0.6740\n","Epoch 12/20\n","63/63 [==============================] - 1s 13ms/step - loss: 0.8447 - accuracy: 0.7563 - val_loss: 1.5545 - val_accuracy: 0.6680\n","Epoch 13/20\n","63/63 [==============================] - 1s 13ms/step - loss: 0.8167 - accuracy: 0.7573 - val_loss: 1.5660 - val_accuracy: 0.6710\n","Epoch 14/20\n","63/63 [==============================] - 1s 13ms/step - loss: 0.7916 - accuracy: 0.7595 - val_loss: 1.6246 - val_accuracy: 0.6580\n","Epoch 15/20\n","63/63 [==============================] - 1s 11ms/step - loss: 0.7677 - accuracy: 0.7601 - val_loss: 1.6553 - val_accuracy: 0.6580\n","Epoch 16/20\n","63/63 [==============================] - 1s 18ms/step - loss: 0.7453 - accuracy: 0.7645 - val_loss: 1.7558 - val_accuracy: 0.6640\n","Epoch 17/20\n","63/63 [==============================] - 1s 12ms/step - loss: 0.7254 - accuracy: 0.7704 - val_loss: 1.7795 - val_accuracy: 0.6630\n","Epoch 18/20\n","63/63 [==============================] - 1s 14ms/step - loss: 0.7086 - accuracy: 0.7806 - val_loss: 1.8398 - val_accuracy: 0.6660\n","Epoch 19/20\n","63/63 [==============================] - 1s 13ms/step - loss: 0.6895 - accuracy: 0.7917 - val_loss: 1.8939 - val_accuracy: 0.6530\n","Epoch 20/20\n","63/63 [==============================] - 1s 12ms/step - loss: 0.6719 - accuracy: 0.7979 - val_loss: 1.9380 - val_accuracy: 0.6570\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f7d09a45190>"]},"metadata":{},"execution_count":95}]},{"cell_type":"markdown","source":["## 3-6 주택 가격 예측: 회귀 문제"],"metadata":{"id":"0ky3cJIqjSAO"}},{"cell_type":"markdown","source":["### 3-6-1 보스턴 주택 가격 데이터 셋"],"metadata":{"id":"UWbV0V4zjYX9"}},{"cell_type":"code","source":["from keras.datasets import boston_housing\n","\n","(train_data , train_targets) , (test_data , test_target) = boston_housing.load_data()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XWu3le7NiEi2","executionInfo":{"status":"ok","timestamp":1646315747749,"user_tz":-540,"elapsed":442,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"beee5f5b-650c-4624-9d5d-4cce766437fa"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/boston_housing.npz\n","57344/57026 [==============================] - 0s 0us/step\n","65536/57026 [==================================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["train_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hrJk79Jojti9","executionInfo":{"status":"ok","timestamp":1646315749478,"user_tz":-540,"elapsed":11,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"696fab4f-8cb8-4c67-98e5-9ab3340fa871"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(404, 13)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["test_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bWTJmudKj0GX","executionInfo":{"status":"ok","timestamp":1646315749479,"user_tz":-540,"elapsed":10,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"f9c8e5c2-d6ab-4675-dcdd-253a1c3496d7"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(102, 13)"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["train_targets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y4jw3f9Wj0_G","executionInfo":{"status":"ok","timestamp":1646315752718,"user_tz":-540,"elapsed":8,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"26eed60f-6f4d-43d1-a7bd-1f44d4a17d4f"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([15.2, 42.3, 50. , 21.1, 17.7, 18.5, 11.3, 15.6, 15.6, 14.4, 12.1,\n","       17.9, 23.1, 19.9, 15.7,  8.8, 50. , 22.5, 24.1, 27.5, 10.9, 30.8,\n","       32.9, 24. , 18.5, 13.3, 22.9, 34.7, 16.6, 17.5, 22.3, 16.1, 14.9,\n","       23.1, 34.9, 25. , 13.9, 13.1, 20.4, 20. , 15.2, 24.7, 22.2, 16.7,\n","       12.7, 15.6, 18.4, 21. , 30.1, 15.1, 18.7,  9.6, 31.5, 24.8, 19.1,\n","       22. , 14.5, 11. , 32. , 29.4, 20.3, 24.4, 14.6, 19.5, 14.1, 14.3,\n","       15.6, 10.5,  6.3, 19.3, 19.3, 13.4, 36.4, 17.8, 13.5, 16.5,  8.3,\n","       14.3, 16. , 13.4, 28.6, 43.5, 20.2, 22. , 23. , 20.7, 12.5, 48.5,\n","       14.6, 13.4, 23.7, 50. , 21.7, 39.8, 38.7, 22.2, 34.9, 22.5, 31.1,\n","       28.7, 46. , 41.7, 21. , 26.6, 15. , 24.4, 13.3, 21.2, 11.7, 21.7,\n","       19.4, 50. , 22.8, 19.7, 24.7, 36.2, 14.2, 18.9, 18.3, 20.6, 24.6,\n","       18.2,  8.7, 44. , 10.4, 13.2, 21.2, 37. , 30.7, 22.9, 20. , 19.3,\n","       31.7, 32. , 23.1, 18.8, 10.9, 50. , 19.6,  5. , 14.4, 19.8, 13.8,\n","       19.6, 23.9, 24.5, 25. , 19.9, 17.2, 24.6, 13.5, 26.6, 21.4, 11.9,\n","       22.6, 19.6,  8.5, 23.7, 23.1, 22.4, 20.5, 23.6, 18.4, 35.2, 23.1,\n","       27.9, 20.6, 23.7, 28. , 13.6, 27.1, 23.6, 20.6, 18.2, 21.7, 17.1,\n","        8.4, 25.3, 13.8, 22.2, 18.4, 20.7, 31.6, 30.5, 20.3,  8.8, 19.2,\n","       19.4, 23.1, 23. , 14.8, 48.8, 22.6, 33.4, 21.1, 13.6, 32.2, 13.1,\n","       23.4, 18.9, 23.9, 11.8, 23.3, 22.8, 19.6, 16.7, 13.4, 22.2, 20.4,\n","       21.8, 26.4, 14.9, 24.1, 23.8, 12.3, 29.1, 21. , 19.5, 23.3, 23.8,\n","       17.8, 11.5, 21.7, 19.9, 25. , 33.4, 28.5, 21.4, 24.3, 27.5, 33.1,\n","       16.2, 23.3, 48.3, 22.9, 22.8, 13.1, 12.7, 22.6, 15. , 15.3, 10.5,\n","       24. , 18.5, 21.7, 19.5, 33.2, 23.2,  5. , 19.1, 12.7, 22.3, 10.2,\n","       13.9, 16.3, 17. , 20.1, 29.9, 17.2, 37.3, 45.4, 17.8, 23.2, 29. ,\n","       22. , 18. , 17.4, 34.6, 20.1, 25. , 15.6, 24.8, 28.2, 21.2, 21.4,\n","       23.8, 31. , 26.2, 17.4, 37.9, 17.5, 20. ,  8.3, 23.9,  8.4, 13.8,\n","        7.2, 11.7, 17.1, 21.6, 50. , 16.1, 20.4, 20.6, 21.4, 20.6, 36.5,\n","        8.5, 24.8, 10.8, 21.9, 17.3, 18.9, 36.2, 14.9, 18.2, 33.3, 21.8,\n","       19.7, 31.6, 24.8, 19.4, 22.8,  7.5, 44.8, 16.8, 18.7, 50. , 50. ,\n","       19.5, 20.1, 50. , 17.2, 20.8, 19.3, 41.3, 20.4, 20.5, 13.8, 16.5,\n","       23.9, 20.6, 31.5, 23.3, 16.8, 14. , 33.8, 36.1, 12.8, 18.3, 18.7,\n","       19.1, 29. , 30.1, 50. , 50. , 22. , 11.9, 37.6, 50. , 22.7, 20.8,\n","       23.5, 27.9, 50. , 19.3, 23.9, 22.6, 15.2, 21.7, 19.2, 43.8, 20.3,\n","       33.2, 19.9, 22.5, 32.7, 22. , 17.1, 19. , 15. , 16.1, 25.1, 23.7,\n","       28.7, 37.2, 22.6, 16.4, 25. , 29.8, 22.1, 17.4, 18.1, 30.3, 17.5,\n","       24.7, 12.6, 26.5, 28.7, 13.3, 10.4, 24.4, 23. , 20. , 17.8,  7. ,\n","       11.8, 24.4, 13.8, 19.4, 25.2, 19.4, 19.4, 29.1])"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### 3-6-2 데이터 준비"],"metadata":{"id":"8wL4yfv0j4GG"}},{"cell_type":"code","source":["mean = train_data.mean(axis = 0)\n","train_data -= mean\n","std = train_data.std(axis = 0)\n","train_data /= std\n","\n","test_data -= mean\n","test_data /= std"],"metadata":{"id":"QzPlaTXGj3Jv","executionInfo":{"status":"ok","timestamp":1646315752720,"user_tz":-540,"elapsed":7,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["### 3-6-3 모델 구성"],"metadata":{"id":"TZzUvivKkOMW"}},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","def build_model():\n","    model = models.Sequential()\n","    model.add(layers.Dense(64 , activation='relu',\n","                           input_shape = (train_data.shape[1],)))\n","    model.add(layers.Dense(64 , activation = 'relu'))\n","    model.add(layers.Dense(1))\n","    model.compile(optimizer = 'rmsprop' , loss='mse' , metrics=['mae'])\n","    return model"],"metadata":{"id":"DZQS1ZJ0kLD_","executionInfo":{"status":"ok","timestamp":1646315753328,"user_tz":-540,"elapsed":11,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["### 3-6-4 K-겹 검증을 사용한 훈련 검증"],"metadata":{"id":"5-d8JpTblVch"}},{"cell_type":"code","source":["import numpy as np\n","\n","k = 4\n","\n","num_val_samples = len(train_data) //k\n","num_epochs = 100\n","all_scores = []\n","for i in range(k):\n","    print('처리중인 폴드 #', i)\n","    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n","    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n","\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples] , train_data[(i+1) * num_val_samples:]],\n","        axis = 0\n","    )\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples] , train_targets[(i+1) * num_val_samples:]],\n","        axis = 0\n","    )\n","\n","    model = build_model()\n","    model.fit(partial_train_data , partial_train_targets, epochs=num_epochs , batch_size =1 , verbose=0)\n","    val_mse, val_mae = model.evaluate(val_data , val_targets , verbose=0)\n","    all_scores.append(val_mae)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"63ik8XQsk1h7","executionInfo":{"status":"ok","timestamp":1646316022369,"user_tz":-540,"elapsed":269050,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"89b0a63c-4d46-48ca-d266-a5cc513dfd9b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["처리중인 폴드 # 0\n","처리중인 폴드 # 1\n","처리중인 폴드 # 2\n","처리중인 폴드 # 3\n"]}]},{"cell_type":"code","source":["num_epochs = 500\n","all_mae_histories = []\n","for i in range(k):\n","    print('처리중인 퐁드 #' , i)\n","    val_targets = train_data[i*num_val_samples: (i+1) * num_val_samples]\n","    val_targets = train_targets[i*num_val_samples: (i+1) * num_val_samples]\n","\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples],\n","         train_data[(i+1) * num_val_samples:]],\n","         axis = 0)\n","\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples],\n","         train_targets[(i+1) * num_val_samples:]],\n","         axis= 0\n","    )\n","\n","    model = build_model()\n","    history = model.fit(partial_train_data , partial_train_targets,\n","                        validation_data = (val_data , val_targets),\n","                        epochs = num_epochs , batch_size=1 , verbose=0)\n","    mae_history = history.history['val_mae']\n","    all_mae_histories.append(mae_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mOXLgWxmnTMk","outputId":"d1d67a9c-5c65-4fba-f3c4-a9c7a71a7be1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["처리중인 퐁드 # 0\n"]}]},{"cell_type":"code","source":["history.history.keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y2vdzpjgIJbU","executionInfo":{"status":"ok","timestamp":1646316829944,"user_tz":-540,"elapsed":6,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"4a7f7564-4305-41ab-e813-4cfc1632e433"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'mae', 'val_loss', 'val_mae'])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["average_mae_history = [\n","                       np.mean([x[i] for x in all_mae_histories])  for i in range(num_epochs)\n","]"],"metadata":{"id":"-URO90AJpBNr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlob.pyplot as plt\n","\n","plt.plot(range(1, len(average_mae_history) + 1) , average_mae_history)"],"metadata":{"id":"ZzxSqjxiEM-n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def smooth_curve(points, factor=0.9):\n","    smoothed_points = []\n","    for point in points:\n","        previous = smoothed_points[-1]\n","        smoothed_points.append(previous * factor + point * (1 - factor))\n","    else:\n","        smoothed_points.append(point)\n","    return smoothed_points\n","\n","smooth_mae_history = smooth_curve(average_mae_history[10:])\n","\n","plt.plot(range(1, len(smooth_mae_history) + 1)  , smooth_mae_history)\n","plt.xlabel('Epochs')\n","plt.ylabel('Validation MAE')\n","plt.show()"],"metadata":{"id":"lXQa83GhEobl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = build_model()\n","model.fit(train_data , train_targets , epochs=80 , batch_size = 16 , verbose = 0)\n","test_mse_score , test_mae_score = model.evaluate(test_data , test_targets)"],"metadata":{"id":"ed8ExmB8FHY2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"m4_aAHhbF3CX"},"execution_count":null,"outputs":[]}]}