{"cells":[{"cell_type":"markdown","metadata":{"id":"hVY-4Dl1shmd"},"source":["# 6장 텍스트와 시퀀스를 위한 딥러닝"]},{"cell_type":"markdown","metadata":{"id":"wEeSBgBtsp0K"},"source":["## 6-1 텍스트 데이터 다루기"]},{"cell_type":"markdown","metadata":{"id":"gBkY_OLWuofD"},"source":["### 6-1-1 단어와 문자의 원-핫 인코딩"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gItG-TdRsTIU"},"outputs":[],"source":["import numpy as np\n","\n","samples = ['The cat sat on the mat.' , 'The dog ate my homework.']\n","\n","token_index = {}\n","\n","for sample in samples:\n","    for word in sample.split():\n","\n","        if word not in token_index:\n","            token_index[word] = len( token_index ) + 1\n","\n","max_length = 10\n","\n","results = np.zeros(shape=(len(samples) ,\n","                          max_length ,\n","                          max(token_index.values()) + 1))\n","\n","for i, sample in enumerate(samples):\n","    for j , word in list(enumerate(sample.split()))[:max_length]:\n","        index = token_index.get(word)\n","        results[i , j , index] = 1."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"09l4VrllvqhX"},"outputs":[],"source":["import string\n","\n","sample =  ['The cat sat on the mat.' , 'The dog ate my homework.']\n","characters = string.printable\n","token_index = dict(zip(characters , range(1, len(characters) + 1)))\n","\n","max_length = 50\n","results = np.zeros((len(samples) ,max_length , max(token_index.values()) + 1 ))\n","\n","for i, sample in enumerate(samples):\n","    for j , character in enumerate(sample):\n","        index = token_index.get(character)\n","        results[i , j , index] = 1."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1647493762565,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"1jzSj3sax8JV","outputId":"f7ccc270-5ddf-4cb6-8e8d-04d4061a40ee"},"outputs":[{"data":{"text/plain":["(2, 50, 101)"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["results.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3318,"status":"ok","timestamp":1647493765878,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"azk9vguFx2eW","outputId":"53059817-b5d2-46f0-e54e-b8081fb136e0"},"outputs":[{"name":"stdout","output_type":"stream","text":["9개의 고유한 토큰을 찾았습니다.\n"]}],"source":["from keras.preprocessing.text import Tokenizer\n","\n","samples = ['The cat sat on the mat.' , 'The dog ate my homework.']\n","\n","tokenizer = Tokenizer(num_words = 1000)\n","tokenizer.fit_on_texts(samples)\n","\n","sequences = tokenizer.texts_to_sequences(samples) # 문자열을 정수 인덱스의 리스트로 변환합니다.\n","\n","one_hot_results = tokenizer.texts_to_matrix(samples ,mode = 'binary')\n","\n","word_index = tokenizer.word_index\n","print('%s개의 고유한 토큰을 찾았습니다.' % len(word_index))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1647493765878,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"FlJhuIr-yjYo","outputId":"00a2ef79-2c45-4d5d-f6aa-f2a63a8b26f7"},"outputs":[{"data":{"text/plain":["[[1, 2, 3, 4, 1, 5], [1, 6, 7, 8, 9]]"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["sequences"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1647493765878,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"Wl0gFriEy6Gl","outputId":"b900f47f-ff51-4852-d3f8-155da1d25062"},"outputs":[{"data":{"text/plain":["(2, 1000)"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["one_hot_results.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Sx4B2d2zZjI"},"outputs":[],"source":["samples = ['The cat sat on the mat.' , 'The dog ate my homework.']\n","\n","dimensionality = 1000\n","max_length = 10\n","\n","results = np.zeros((len(samples) , max_length , dimensionality))\n","\n","for i, sample in enumerate(samples):\n","    for j,word in list(enumerate(sample.split()))[:max_length]:\n","        index = abs(hash(word)) % dimensionality\n","        results[i , j , index] = 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1647493765879,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"81EoyVcFzPee","outputId":"552aeb73-36c2-43bc-c158-389161cee98b"},"outputs":[{"data":{"text/plain":["(2, 10, 1000)"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["results.shape"]},{"cell_type":"markdown","metadata":{"id":"lyqUUax4SItH"},"source":["### 6-1-2 단어 임베딩 사용하기"]},{"cell_type":"markdown","metadata":{"id":"TtlHvjJkSnyN"},"source":["#### Embedding 층을 사용하여 단어 임베딩 학습하기"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":4010,"status":"ok","timestamp":1647739782811,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"hJwhqSPt0H4K"},"outputs":[],"source":["from keras.layers import Embedding\n","\n","embedding_layer = Embedding(1000 , 64)"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6702,"status":"ok","timestamp":1647739789466,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"xTLRHJ0-TUtj","outputId":"8dc15820-1de2-4e71-ea3d-17f44a1035ed"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n"]}],"source":["from keras.datasets import imdb\n","from keras import preprocessing\n","\n","max_features = 10000\n","maxlen = 20\n","\n","(x_train , y_train) , (x_test , y_test) = imdb.load_data(num_words = max_features)\n","\n","x_train = preprocessing.sequence.pad_sequences(x_train , maxlen = maxlen)\n","x_test = preprocessing.sequence.pad_sequences(x_test , maxlen=maxlen)\n","#pad_sequences ===\u003e 리스트를 (samples , maxlen)크기의 2D 정수 텐서로 변환합니다."]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23397,"status":"ok","timestamp":1647739813550,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"vH4UlDb5X1m2","outputId":"cd3c821f-2efc-4ff2-f340-c24468a1b1c0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, 20, 8)             80000     \n","                                                                 \n"," flatten (Flatten)           (None, 160)               0         \n","                                                                 \n"," dense (Dense)               (None, 1)                 161       \n","                                                                 \n","=================================================================\n","Total params: 80,161\n","Trainable params: 80,161\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/10\n","625/625 [==============================] - 4s 5ms/step - loss: 0.6554 - acc: 0.6425 - val_loss: 0.5935 - val_acc: 0.7054\n","Epoch 2/10\n","625/625 [==============================] - 1s 2ms/step - loss: 0.5222 - acc: 0.7570 - val_loss: 0.5160 - val_acc: 0.7330\n","Epoch 3/10\n","625/625 [==============================] - 1s 2ms/step - loss: 0.4540 - acc: 0.7882 - val_loss: 0.4965 - val_acc: 0.7464\n","Epoch 4/10\n","625/625 [==============================] - 1s 2ms/step - loss: 0.4207 - acc: 0.8087 - val_loss: 0.4926 - val_acc: 0.7536\n","Epoch 5/10\n","625/625 [==============================] - 1s 2ms/step - loss: 0.3977 - acc: 0.8198 - val_loss: 0.4942 - val_acc: 0.7530\n","Epoch 6/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.3795 - acc: 0.8309 - val_loss: 0.4979 - val_acc: 0.7556\n","Epoch 7/10\n","625/625 [==============================] - 1s 2ms/step - loss: 0.3626 - acc: 0.8408 - val_loss: 0.5017 - val_acc: 0.7564\n","Epoch 8/10\n","625/625 [==============================] - 1s 2ms/step - loss: 0.3467 - acc: 0.8508 - val_loss: 0.5062 - val_acc: 0.7572\n","Epoch 9/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.3311 - acc: 0.8610 - val_loss: 0.5120 - val_acc: 0.7570\n","Epoch 10/10\n","625/625 [==============================] - 2s 2ms/step - loss: 0.3154 - acc: 0.8701 - val_loss: 0.5187 - val_acc: 0.7562\n"]}],"source":["from keras.models import Sequential\n","from keras.layers import Flatten, Dense , Embedding\n","\n","model = Sequential()\n","model.add(Embedding(10000 , 8 , input_length=maxlen))\n","\n","model.add(Flatten())\n","\n","model.add(Dense(1 , activation = 'sigmoid'))\n","model.compile(optimizer='rmsprop' , loss = 'binary_crossentropy' , metrics=['acc']) \n","model.summary()\n","\n","history = model.fit(x_train , y_train , epochs = 10 , batch_size = 32 , validation_split = 0.2)"]},{"cell_type":"markdown","metadata":{"id":"hHWKGFJgZhi9"},"source":["#### 사전 훈련된 단어 임베딩 사용하기"]},{"cell_type":"markdown","metadata":{"id":"R72Z0LIUlh0T"},"source":["### 6-1-3 모든 내용을 적용하기: 원본 텍스트에서 단어 임베딩까지"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EWrFG9OR8v5x"},"outputs":[],"source":["import os\n","imdb_dir = '/content/drive/MyDrive/AI/독학/케라스 창시자/aclImdb/aclImdb/test'\n","train_dir = os.path.join(imdb_dir  , 'train')\n","\n","labels = []\n","\n","texts = []\n","\n","for label_type in ['neg' , 'pos']:\n","    dir_name =os.path.join(train_dir , label_type)\n","    for fname in os.listdir(dir_name):\n","        if fname[-4:] == '.txt':\n","            f = open(os.path.join(train_dir , label_type))"]},{"cell_type":"markdown","metadata":{"id":"S85Id7cv9zT4"},"source":["임베딩 파트는 데이터 문제로 일단은 스킵"]},{"cell_type":"markdown","metadata":{"id":"4_irQ4oJ9pR0"},"source":["## 6-2 순환 신경망 이해하기"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":394,"status":"ok","timestamp":1647741190563,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"NEpl16ux9okZ"},"outputs":[],"source":["# 넘파이로 구현한 간단한 RNN\n","\n","import numpy as np\n","timesteps = 100\n","input_features = 32\n","output_features = 64\n","\n","inputs = np.random.random((timesteps , input_features))\n","\n","state_t = np.zeros((output_features,))\n","\n","W = np.random.random((output_features , input_features))\n","U = np.random.random((output_features , output_features))\n","b = np.random.random((output_features,))\n","\n","successive_outputs = []\n","for input_t in inputs:\n","    output_t = np.tanh(np.dot(W , input_t) + np.dot(U , state_t) + b)\n","\n","    successive_outputs.append(output_t)\n","\n","    state_t = output_t\n","\n","final_output_sequence = np.stack(successive_outputs , axis = 0)"]},{"cell_type":"markdown","metadata":{"id":"n83phW1IB1NN"},"source":["### 6-2-1 케라스의 순환 층"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":4396,"status":"ok","timestamp":1647756621936,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"gy27EyFyBydl"},"outputs":[],"source":["from keras.layers import SimpleRNN"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":848,"status":"ok","timestamp":1647756622766,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"94z6oJRECJ84","outputId":"3ff90141-315d-4a62-955f-b8fb94892397"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, None, 32)          320000    \n","                                                                 \n"," simple_rnn (SimpleRNN)      (None, 32)                2080      \n","                                                                 \n","=================================================================\n","Total params: 322,080\n","Trainable params: 322,080\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["from keras.models import Sequential\n","from keras.layers import Embedding , SimpleRNN\n","model = Sequential()\n","model.add(Embedding(10000 , 32))\n","model.add(SimpleRNN(32))\n","model.summary()"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1647756622767,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"5h_njN3oCotT","outputId":"fc88810c-c643-441c-882d-1f2d900e44a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, None, 32)          320000    \n","                                                                 \n"," simple_rnn_1 (SimpleRNN)    (None, None, 32)          2080      \n","                                                                 \n","=================================================================\n","Total params: 322,080\n","Trainable params: 322,080\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model = Sequential()\n","model.add(Embedding(10000 , 32))\n","model.add(SimpleRNN(32 , return_sequences = True))\n","model.summary()"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1647756622768,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"rvRPRYrACzGT","outputId":"f406770b-f0d1-44a2-d6a1-57bc6485f271"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_2 (Embedding)     (None, None, 32)          320000    \n","                                                                 \n"," simple_rnn_2 (SimpleRNN)    (None, None, 32)          2080      \n","                                                                 \n"," simple_rnn_3 (SimpleRNN)    (None, None, 32)          2080      \n","                                                                 \n"," simple_rnn_4 (SimpleRNN)    (None, None, 32)          2080      \n","                                                                 \n"," simple_rnn_5 (SimpleRNN)    (None, 32)                2080      \n","                                                                 \n","=================================================================\n","Total params: 328,320\n","Trainable params: 328,320\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model = Sequential()\n","model.add(Embedding(10000 , 32))\n","model.add(SimpleRNN(32 , return_sequences=True))\n","model.add(SimpleRNN(32 , return_sequences=True))\n","model.add(SimpleRNN(32 , return_sequences=True))\n","model.add(SimpleRNN((32)))\n","model.summary()"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8008,"status":"ok","timestamp":1647756630762,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"-BLwyO2BFTEa","outputId":"75efd512-a066-4a1b-9420-27641911a7c0"},"outputs":[{"name":"stdout","output_type":"stream","text":["데이터 로딩...\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n","25000 훈련 시퀀스\n","25000 테스트 시퀀스\n","시퀀스 패딩 (samples x time)\n","input_train 크기: (25000, 500)\n","input_test: (25000, 500)\n"]}],"source":["#IMDB 데이터 전처리 하기\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","\n","max_features = 10000\n","maxlen = 500\n","batch_size = 32\n","\n","print('데이터 로딩...')\n","(input_train , y_train) , (input_test , y_test) = imdb.load_data(\n","    num_words=max_features)\n","print(len(input_train) , '훈련 시퀀스')\n","print(len(input_test) , '테스트 시퀀스')\n","\n","print('시퀀스 패딩 (samples x time)')\n","\n","input_train = sequence.pad_sequences(input_train , maxlen = maxlen)\n","input_test = sequence.pad_sequences(input_test , maxlen=maxlen)\n","print('input_train 크기:' , input_train.shape )\n","print('input_test:' , input_test.shape)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":444475,"status":"ok","timestamp":1647757606828,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"mDLeqlMbF3v4","outputId":"0eb3b83d-eaf5-4915-d8a1-c92a73c77c7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","157/157 [==============================] - 38s 230ms/step - loss: 0.6354 - acc: 0.6239 - val_loss: 0.5684 - val_acc: 0.7174\n","Epoch 2/10\n","157/157 [==============================] - 41s 264ms/step - loss: 0.4221 - acc: 0.8202 - val_loss: 0.4364 - val_acc: 0.8108\n","Epoch 3/10\n","157/157 [==============================] - 51s 326ms/step - loss: 0.3002 - acc: 0.8783 - val_loss: 0.4555 - val_acc: 0.7888\n","Epoch 4/10\n","157/157 [==============================] - 55s 351ms/step - loss: 0.2257 - acc: 0.9150 - val_loss: 0.3690 - val_acc: 0.8598\n","Epoch 5/10\n","157/157 [==============================] - 49s 314ms/step - loss: 0.1671 - acc: 0.9398 - val_loss: 0.5493 - val_acc: 0.8154\n","Epoch 6/10\n","157/157 [==============================] - 35s 225ms/step - loss: 0.1072 - acc: 0.9631 - val_loss: 0.5826 - val_acc: 0.7504\n","Epoch 7/10\n","157/157 [==============================] - 31s 198ms/step - loss: 0.0705 - acc: 0.9779 - val_loss: 0.4861 - val_acc: 0.8226\n","Epoch 8/10\n","157/157 [==============================] - 34s 214ms/step - loss: 0.0451 - acc: 0.9869 - val_loss: 0.5047 - val_acc: 0.8528\n","Epoch 9/10\n","157/157 [==============================] - 47s 301ms/step - loss: 0.0255 - acc: 0.9923 - val_loss: 0.6787 - val_acc: 0.7790\n","Epoch 10/10\n","157/157 [==============================] - 36s 232ms/step - loss: 0.0201 - acc: 0.9941 - val_loss: 0.6119 - val_acc: 0.8300\n"]}],"source":["# Embedding 층과 SimpleRNN 층을 사용한 모델 훈련하기\n","from keras.layers import Dense\n","\n","model = Sequential()\n","model.add(Embedding(max_features , 32))\n","model.add(SimpleRNN(32))\n","model.add(Dense(1 , activation = 'sigmoid'))\n","\n","model.compile(optimizer = 'rmsprop' , loss='binary_crossentropy' , metrics = ['acc'])\n","history = model.fit(input_train , y_train,\n","                    epochs = 10,\n","                    batch_size = 128,\n","                    validation_split = 0.2)"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"executionInfo":{"elapsed":1291,"status":"ok","timestamp":1647757679979,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"dcd9VbuH-vGC","outputId":"17d40a1d-7d0b-4f41-d197-174135318abf"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(acc) + 1)\n","\n","plt.plot(epochs ,acc , 'bo' , label='Training acc')\n","plt.plot(epochs , val_acc , 'b' , label = 'Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs , loss , 'bo' , label = 'Training loss')\n","plt.plot(epochs , val_loss , 'b' , label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"4wkc2lX8A4He"},"source":["### 6-2-2 LSTM과 GRU 층 이해하기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Lj-IXbwbAThL"},"outputs":[],"source":["# LSTM 구조의 의사코드 (1/2)\n","output_t = activation(c_t) * activation(dot(input_t , Wo) + dot(state_t , Uo) + bo)\n","\n","i_t = activation(dot(state_t , Ui) + dot(input_t , Wi) + bi)\n","f_t = activation(dot(state_t , Uf) + dot(input_t , Wf) + bf)\n","k_t = activation(dot(state_t , Uk) + dot(input_t , Wk) + bk)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UZIRm-uBHjj6"},"outputs":[],"source":["# LSTM 구조의 의사코드(2/2)\n","(c_t + 1) = i_t * k_t + c_t * f_t"]},{"cell_type":"markdown","metadata":{"id":"zGa_pgxINPcb"},"source":["### 6-2-3 케라스를 사용한 LSTM 예제"]},{"cell_type":"markdown","metadata":{"id":"AA69WKtmNpmP"},"source":["## 6-3 순환 신경망의 고급 사용법"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":580,"status":"ok","timestamp":1647761772843,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"vGOBZ872NPA4","outputId":"9d64af3c-b522-4766-9709-96c0c9ff2b2d"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/AI/독학/케라스 창시자\n"]}],"source":["%cd /content/drive/MyDrive/AI/독학/케라스 창시자"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":530,"status":"ok","timestamp":1647761780585,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"VsiAwI0QQUhI"},"outputs":[],"source":["mkdir jena_climate"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":484,"status":"ok","timestamp":1647761790501,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"4RdLWAt1QWqS","outputId":"2222ca27-be50-45f0-c3e0-734797f8ee70"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/AI/독학/케라스 창시자/jena_climate\n"]}],"source":["%cd jena_climate"]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3587,"status":"ok","timestamp":1647763268242,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"336SU6GbQY8y","outputId":"3a050468-74cd-4470-de96-a71d73bf6bd7"},"outputs":[{"name":"stdout","output_type":"stream","text":["--2022-03-20 08:01:04--  https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n","Resolving s3.amazonaws.com (s3.amazonaws.com)... 52.217.46.134\n","Connecting to s3.amazonaws.com (s3.amazonaws.com)|52.217.46.134|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 13565642 (13M) [application/zip]\n","Saving to: ‘jena_climate_2009_2016.csv.zip’\n","\n","jena_climate_2009_2 100%[===================\u003e]  12.94M  5.72MB/s    in 2.3s    \n","\n","2022-03-20 08:01:07 (5.72 MB/s) - ‘jena_climate_2009_2016.csv.zip’ saved [13565642/13565642]\n","\n"]}],"source":["!wget https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1226,"status":"ok","timestamp":1647763269460,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"O-6v09mpR2Bo","outputId":"0c5ea507-dd11-4996-c6a3-494420d6c287"},"outputs":[{"name":"stdout","output_type":"stream","text":["Archive:  jena_climate_2009_2016.csv.zip\n","  inflating: jena_climate_2009_2016.csv  \n","  inflating: __MACOSX/._jena_climate_2009_2016.csv  \n"]}],"source":["!unzip jena_climate_2009_2016.csv.zip"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2288,"status":"ok","timestamp":1647770545035,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"UuvsqKDmTOwb","outputId":"c8c4d042-6516-412c-e1a2-654c2db8da9e"},"outputs":[{"name":"stdout","output_type":"stream","text":["['\"Date Time\"', '\"p (mbar)\"', '\"T (degC)\"', '\"Tpot (K)\"', '\"Tdew (degC)\"', '\"rh (%)\"', '\"VPmax (mbar)\"', '\"VPact (mbar)\"', '\"VPdef (mbar)\"', '\"sh (g/kg)\"', '\"H2OC (mmol/mol)\"', '\"rho (g/m**3)\"', '\"wv (m/s)\"', '\"max. wv (m/s)\"', '\"wd (deg)\"']\n","420451\n"]}],"source":["import os\n","\n","data_dir = '/content/drive/MyDrive/AI/독학/케라스 창시자/jena_climate'\n","fname = os.path.join(data_dir , 'jena_climate_2009_2016.csv')\n","\n","f = open(fname)\n","data = f.read()\n","f.close()\n","\n","lines = data.split('\\n')\n","header = lines[0].split(',')\n","lines = lines[1:]\n","\n","print(header)\n","print(len(lines))"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":1753,"status":"ok","timestamp":1647770546784,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"wXgOd3PVTlwH"},"outputs":[],"source":["import numpy as np\n","\n","float_data = np.zeros((len(lines) , len(header) - 1))\n","for i , line in enumerate(lines):\n","    values = [float(x) for x in line.split(',')[1:]]\n","    float_data[i,:] = values"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"elapsed":1447,"status":"ok","timestamp":1647770548226,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"yBvWGqZJWkCd","outputId":"ff347aca-f597-415b-eb5c-8a6cb28a9f01"},"outputs":[{"data":{"text/plain":["[\u003cmatplotlib.lines.Line2D at 0x7f79d3ebef10\u003e]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["from matplotlib import pyplot as plt\n","\n","temp = float_data[: , 1]\n","plt.plot(range(len(temp)) , temp)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1647770548227,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"wRl7fVe4Wuzd","outputId":"fd935d10-117e-4fa5-a61c-a23719e90b54"},"outputs":[{"data":{"text/plain":["[\u003cmatplotlib.lines.Line2D at 0x7f79d3eafad0\u003e]"]},"execution_count":4,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(range(1440) , temp[:1440])"]},{"cell_type":"markdown","metadata":{"id":"6jidCX_eW9ZU"},"source":["### 6-3-2 데이터 준비"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1647770548228,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"BBwAb_mmW0ck"},"outputs":[],"source":["# 데이터 정규화 하기\n","mean = float_data[:200000].mean(axis=0)\n","float_data -= mean\n","std = float_data[:200000].std(axis=0)\n","float_data /= std"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1647770548229,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"xHfQ2_waXM8H"},"outputs":[],"source":["def generator(data , lookback , delay , min_index , max_index , shuffle=False , batch_size = 128 , step = 6):\n","    if max_index is None:\n","        max_index = len(data) - delay - 1\n","\n","    i = min_index + lookback\n","\n","    while 1:\n","        if shuffle:\n","            rows = np.random.randint( min_index + lookback , max_index , size = batch_size)\n","        else:\n","            if i + batch_size \u003e= max_index:\n","                i = min_index + lookback\n","            rows = np.arange(i , min( i + batch_size , max_index))\n","            i += len(rows)\n","        samples = np.zeros((len(rows),          # 데이터 수\n","                            lookback // step,   # 각 시간\n","                            data.shape[-1]))    # 각 시간 당 데이터 피처 수\n","\n","        targets = np.zeros((len(rows),))\n","\n","        for j, row in enumerate(rows):\n","            indices = range( rows[j] - lookback , rows[j] , step)\n","            samples[j] = data[indices]\n","            targets[j] = data[rows[j] + delay][1]\n","        yield samples , targets"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":351,"status":"ok","timestamp":1647771294095,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"9gtj-MaecEhj"},"outputs":[],"source":["lookback = 1440\n","step = 6\n","delay = 144\n","batch_size = 128\n","train_gen = generator(float_data,\n","                      lookback = lookback,\n","                      delay = delay,\n","                      min_index = 0,\n","                      max_index = 200000,\n","                      shuffle=True,\n","                      step = step,\n","                      batch_size = batch_size)\n","\n","val_gen = generator(float_data,\n","                    lookback = lookback,\n","                    delay = delay,\n","                    min_index = 200001,\n","                    max_index = 300000,\n","                    step = step,\n","                    batch_size=batch_size)\n","\n","test_gen = generator(float_data,\n","                     lookback = lookback,\n","                     delay = delay,\n","                     min_index = 300001,\n","                     max_index = None,\n","                     step = step,\n","                     batch_size = batch_size)\n","\n","val_steps = (300000 - 200001 - lookback) // batch_size\n","\n","test_steps = (len(float_data) - 300001 - lookback) // batch_size"]},{"cell_type":"markdown","metadata":{"id":"TP_MGB2t1hXF"},"source":["### 6-3-3 상식 수준의 기준점"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4034,"status":"ok","timestamp":1647771745334,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"apBK1glVxvBb","outputId":"70268de7-2dff-4e0b-cd16-380fb7ee2329"},"outputs":[{"name":"stdout","output_type":"stream","text":["nan\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3441: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:189: RuntimeWarning: invalid value encountered in double_scalars\n","  ret = ret.dtype.type(ret / rcount)\n"]}],"source":["def evaluate_naive_method():\n","    batch_maes = []\n","    for step in range(val_steps):\n","        samples, targets = next(val_gen)\n","        preds = samples[: , -1 , 1]\n","        mae = np.mean(np.abs(preds - targets))\n","    print(np.mean(batch_maes))\n","\n","evaluate_naive_method()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":374,"status":"ok","timestamp":1647771961997,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"Ofe1QZHn2S8r","outputId":"d0cc20b5-a7e4-46dd-c283-5f1be534210a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.5672247338393395\n"]}],"source":["celsius_mae = 0.29 * std[1]\n","print(celsius_mae)"]},{"cell_type":"markdown","metadata":{"id":"aX_PC0rN4zTR"},"source":["### 6-3-4 기본적인 머신 러닝"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":383209,"status":"ok","timestamp":1647773213467,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"1pJuVqRb2wKl","outputId":"be6e2299-1862-41cd-e4df-3825f14704ed"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","500/500 [==============================] - 19s 36ms/step - loss: 0.9499 - val_loss: 0.3791\n","Epoch 2/20\n","500/500 [==============================] - 19s 39ms/step - loss: 0.3437 - val_loss: 0.3433\n","Epoch 3/20\n","500/500 [==============================] - 18s 37ms/step - loss: 0.2814 - val_loss: 0.3173\n","Epoch 4/20\n","500/500 [==============================] - 19s 38ms/step - loss: 0.2617 - val_loss: 0.3117\n","Epoch 5/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2516 - val_loss: 0.3145\n","Epoch 6/20\n","500/500 [==============================] - 19s 39ms/step - loss: 0.2446 - val_loss: 0.3431\n","Epoch 7/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2386 - val_loss: 0.3352\n","Epoch 8/20\n","500/500 [==============================] - 20s 41ms/step - loss: 0.2345 - val_loss: 0.3560\n","Epoch 9/20\n","500/500 [==============================] - 14s 27ms/step - loss: 0.2304 - val_loss: 0.3258\n","Epoch 10/20\n","500/500 [==============================] - 20s 40ms/step - loss: 0.2271 - val_loss: 0.3237\n","Epoch 11/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2232 - val_loss: 0.3307\n","Epoch 12/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2221 - val_loss: 0.3278\n","Epoch 13/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2186 - val_loss: 0.3379\n","Epoch 14/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2156 - val_loss: 0.3850\n","Epoch 15/20\n","500/500 [==============================] - 12s 25ms/step - loss: 0.2126 - val_loss: 0.3218\n","Epoch 16/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2095 - val_loss: 0.3304\n","Epoch 17/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2075 - val_loss: 0.3527\n","Epoch 18/20\n","500/500 [==============================] - 18s 36ms/step - loss: 0.2062 - val_loss: 0.3374\n","Epoch 19/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2052 - val_loss: 0.3252\n","Epoch 20/20\n","500/500 [==============================] - 17s 34ms/step - loss: 0.2016 - val_loss: 0.3500\n"]}],"source":["from keras.models import Sequential\n","from keras import layers\n","from tensorflow.keras.optimizers import RMSprop\n","\n","model = Sequential()\n","model.add(layers.Flatten(input_shape = (lookback // step , float_data.shape[-1])))\n","model.add(layers.Dense(32 , activation='relu'))\n","model.add(layers.Dense(1))\n","model.compile(optimizer = RMSprop() , loss = 'mae')\n","history = model.fit_generator(train_gen,\n","                              steps_per_epoch=500,\n","                              epochs=20,\n","                              validation_data = val_gen,\n","                              validation_steps = val_steps)"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1647773214832,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"66jC8pKq6dYa","outputId":"45267995-72b9-47b2-bc30-cb667486dd0b"},"outputs":[{"data":{"text/plain":["\u003cFigure size 432x288 with 0 Axes\u003e"]},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"text/plain":["\u003cFigure size 432x288 with 0 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plot\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1 , len(loss) + 1)\n","\n","plt.figure()\n","plt.plot(epochs , loss , 'bo' , label = 'Training loss')\n","plt.plot(epochs , val_loss , 'b' , label = 'Validation loss')\n","plt.title('Training and Validation loss')\n","plt.legend()\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"V8eML7o3_GpX"},"source":["### 6-3-5 첫 번째 순환 신경망"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2013599,"status":"ok","timestamp":1647776387314,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"},"user_tz":-540},"id":"qqcVox416tfa","outputId":"6f43f996-b91c-4f51-ef0a-0b340164413d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \n"]},{"name":"stdout","output_type":"stream","text":["500/500 [==============================] - 90s 175ms/step - loss: 0.3019 - val_loss: 0.2689\n","Epoch 2/20\n","500/500 [==============================] - 88s 176ms/step - loss: 0.2831 - val_loss: 0.2701\n","Epoch 3/20\n","500/500 [==============================] - 90s 181ms/step - loss: 0.2758 - val_loss: 0.2654\n","Epoch 4/20\n","500/500 [==============================] - 90s 181ms/step - loss: 0.2717 - val_loss: 0.2644\n","Epoch 5/20\n","500/500 [==============================] - 88s 175ms/step - loss: 0.2673 - val_loss: 0.2705\n","Epoch 6/20\n","500/500 [==============================] - 89s 177ms/step - loss: 0.2613 - val_loss: 0.2669\n","Epoch 7/20\n","500/500 [==============================] - 91s 181ms/step - loss: 0.2588 - val_loss: 0.2645\n","Epoch 8/20\n","500/500 [==============================] - 91s 181ms/step - loss: 0.2532 - val_loss: 0.2734\n","Epoch 9/20\n","500/500 [==============================] - 90s 179ms/step - loss: 0.2482 - val_loss: 0.2700\n","Epoch 10/20\n","500/500 [==============================] - 88s 176ms/step - loss: 0.2443 - val_loss: 0.2697\n","Epoch 11/20\n","500/500 [==============================] - 96s 193ms/step - loss: 0.2399 - val_loss: 0.2760\n","Epoch 12/20\n","500/500 [==============================] - 128s 257ms/step - loss: 0.2379 - val_loss: 0.2758\n","Epoch 13/20\n","500/500 [==============================] - 139s 278ms/step - loss: 0.2330 - val_loss: 0.2839\n","Epoch 14/20\n","500/500 [==============================] - 89s 179ms/step - loss: 0.2287 - val_loss: 0.2812\n","Epoch 15/20\n","500/500 [==============================] - 91s 183ms/step - loss: 0.2240 - val_loss: 0.2827\n","Epoch 16/20\n","500/500 [==============================] - 127s 253ms/step - loss: 0.2207 - val_loss: 0.2910\n","Epoch 17/20\n","500/500 [==============================] - 144s 287ms/step - loss: 0.2147 - val_loss: 0.2940\n","Epoch 18/20\n","500/500 [==============================] - 123s 247ms/step - loss: 0.2130 - val_loss: 0.2951\n","Epoch 19/20\n","500/500 [==============================] - 92s 184ms/step - loss: 0.2090 - val_loss: 0.2905\n","Epoch 20/20\n","500/500 [==============================] - 90s 180ms/step - loss: 0.2051 - val_loss: 0.3010\n"]}],"source":["from keras.models import Sequential\n","from keras import layers\n","from keras.optimizers import rmsprop_v2\n","\n","model = Sequential()\n","model.add(layers.GRU(32 , input_shape = (None , float_data.shape[-1])))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer=RMSprop() , loss = 'mae')\n","history = model.fit_generator(train_gen,\n","                             steps_per_epoch=500,\n","                             epochs = 20,\n","                             validation_data = val_gen,\n","                             validation_steps = val_steps)"]},{"cell_type":"markdown","metadata":{"id":"BD258Mx5DyOb"},"source":["### 6-3-7 스태킹 순환 층"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"QBb5G85ZAGCn"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/40\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n"]},{"name":"stdout","output_type":"stream","text":["500/500 [==============================] - 486s 961ms/step - loss: 0.3197 - val_loss: 0.2816\n","Epoch 2/40\n","500/500 [==============================] - 513s 1s/step - loss: 0.3008 - val_loss: 0.2781\n","Epoch 3/40\n","500/500 [==============================] - 418s 836ms/step - loss: 0.2940 - val_loss: 0.2737\n","Epoch 4/40\n","500/500 [==============================] - 416s 833ms/step - loss: 0.2883 - val_loss: 0.2672\n","Epoch 5/40\n","500/500 [==============================] - 418s 837ms/step - loss: 0.2803 - val_loss: 0.2700\n","Epoch 6/40\n","500/500 [==============================] - 434s 868ms/step - loss: 0.2754 - val_loss: 0.2702\n","Epoch 7/40\n","500/500 [==============================] - 568s 1s/step - loss: 0.2715 - val_loss: 0.2700\n","Epoch 8/40\n","500/500 [==============================] - 529s 1s/step - loss: 0.2653 - val_loss: 0.2736\n","Epoch 9/40\n","500/500 [==============================] - 540s 1s/step - loss: 0.2587 - val_loss: 0.2801\n","Epoch 10/40\n","500/500 [==============================] - 455s 910ms/step - loss: 0.2549 - val_loss: 0.2872\n","Epoch 11/40\n","500/500 [==============================] - 411s 822ms/step - loss: 0.2521 - val_loss: 0.2784\n","Epoch 12/40\n","500/500 [==============================] - 408s 816ms/step - loss: 0.2465 - val_loss: 0.2894\n","Epoch 13/40\n","500/500 [==============================] - 417s 835ms/step - loss: 0.2412 - val_loss: 0.2915\n","Epoch 14/40\n","500/500 [==============================] - 417s 834ms/step - loss: 0.2370 - val_loss: 0.2895\n","Epoch 15/40\n","500/500 [==============================] - 415s 830ms/step - loss: 0.2336 - val_loss: 0.3069\n","Epoch 16/40\n","500/500 [==============================] - 414s 829ms/step - loss: 0.2296 - val_loss: 0.2998\n","Epoch 17/40\n","500/500 [==============================] - 415s 830ms/step - loss: 0.2282 - val_loss: 0.3093\n","Epoch 18/40\n","500/500 [==============================] - 415s 830ms/step - loss: 0.2250 - val_loss: 0.3141\n","Epoch 19/40\n","500/500 [==============================] - 418s 836ms/step - loss: 0.2204 - val_loss: 0.3110\n","Epoch 20/40\n","500/500 [==============================] - 417s 834ms/step - loss: 0.2185 - val_loss: 0.3221\n","Epoch 21/40\n","500/500 [==============================] - 414s 829ms/step - loss: 0.2170 - val_loss: 0.3239\n","Epoch 22/40\n","500/500 [==============================] - 413s 826ms/step - loss: 0.2142 - val_loss: 0.3229\n","Epoch 23/40\n","500/500 [==============================] - 416s 833ms/step - loss: 0.2116 - val_loss: 0.3226\n","Epoch 24/40\n","500/500 [==============================] - 417s 834ms/step - loss: 0.2099 - val_loss: 0.3225\n","Epoch 25/40\n","500/500 [==============================] - 416s 833ms/step - loss: 0.2077 - val_loss: 0.3341\n","Epoch 26/40\n","500/500 [==============================] - 418s 836ms/step - loss: 0.2058 - val_loss: 0.3301\n","Epoch 27/40\n","500/500 [==============================] - 414s 828ms/step - loss: 0.2041 - val_loss: 0.3330\n","Epoch 28/40\n","500/500 [==============================] - 411s 823ms/step - loss: 0.2026 - val_loss: 0.3342\n","Epoch 29/40\n","500/500 [==============================] - 409s 818ms/step - loss: 0.1997 - val_loss: 0.3439\n","Epoch 30/40\n","500/500 [==============================] - 405s 809ms/step - loss: 0.1988 - val_loss: 0.3399\n","Epoch 31/40\n","500/500 [==============================] - 401s 802ms/step - loss: 0.1966 - val_loss: 0.3348\n","Epoch 32/40\n","500/500 [==============================] - 402s 805ms/step - loss: 0.1960 - val_loss: 0.3423\n","Epoch 33/40\n","500/500 [==============================] - 409s 818ms/step - loss: 0.1942 - val_loss: 0.3427\n","Epoch 34/40\n","500/500 [==============================] - 407s 813ms/step - loss: 0.1926 - val_loss: 0.3416\n","Epoch 35/40\n","500/500 [==============================] - 410s 820ms/step - loss: 0.1909 - val_loss: 0.3470\n","Epoch 36/40\n","500/500 [==============================] - 410s 821ms/step - loss: 0.1906 - val_loss: 0.3495\n","Epoch 37/40\n","500/500 [==============================] - 415s 829ms/step - loss: 0.1888 - val_loss: 0.3416\n","Epoch 38/40\n","434/500 [=========================\u003e....] - ETA: 44s - loss: 0.1883"]}],"source":["from keras.models import Sequential\n","from keras import layers\n","from tensorflow.keras.optimizers import RMSprop\n","\n","model = Sequential()\n","model.add(layers.GRU(32,\n","                     dropout=0.1,\n","                     recurrent_dropout=0.5,\n","                     return_sequences = True,\n","                     input_shape = (None , float_data.shape[-1])))\n","model.add(layers.GRU(64 , activation='relu',\n","                     dropout = 0.1  ,recurrent_dropout = 0.5))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer = RMSprop() , loss = 'mae')\n","history = model.fit_generator(train_gen,\n","                              steps_per_epoch=500,\n","                              epochs=40,\n","                              validation_data = val_gen,\n","                              validation_steps = val_steps)"]},{"cell_type":"markdown","metadata":{"id":"ECp1dbN0FVjr"},"source":["### 6-3-8 양방향 RNN 사용하기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DwZn6Fx6FBQj"},"outputs":[],"source":["from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","from keras import layers\n","from keras.models import sequential\n","\n","max_features = 10000\n","maxlen = 500\n","\n","(x_train , y_train),(x_test , y_test) = imdb.load_data(num_words = max_features)\n","\n","x_train = [x[::-1] for x in x_train]\n","x_test = [x[::-1] for x in x_test]\n","\n","x_train = sequence.pad_sequences(x_train , maxlen=maxlen)\n","x_test = sequence.pad_sequences(x_test , maxlen=maxlen)\n","\n","model = Sequential()\n","model.add(layers.Embedding(max_features , 128))\n","model.add(layers.LSTM(32))\n","model.add(layers.Dense(1 , activation='sigmoid'))\n","\n","model.compile(optimizer='rmsprop',\n","              loss = 'binary_crossentropy',\n","              metrics = ['acc'])\n","\n","history = model.fit(x_train , y_train,\n","                    epochs=10,\n","                    batch_size = 128,\n","                    validation_split = 0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Stt-upkMHHjQ"},"outputs":[],"source":["model = Sequential()\n","model.add(layers.Embedding(max_features,32))\n","model.add(layers.Bidirectional(layers.LSTM(32)))\n","model.add(layers.Dense(1 , activation='sigmoid'))\n","\n","model.compile(optimizer='rmsprop' , loss = 'binary_crossentropy' , metrics=['acc'])\n","history = model.fit(x_train , y_train ,\n","                    epochs = 10 , batch_size = 128,\n","                    validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ldK4UpDNKF4s"},"outputs":[],"source":["# 규제를 더 추가해 보자~\n","from keras.models import Sequential\n","from keras import layers\n","from keras.optimizers import PMSprop\n","\n","model = Sequential()\n","model.add(layers.Bidirectional(\n","    layers.GRU(32), input_shape=(None , float_data.shape[-1])))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer=RMSprop() , loss = 'mae')\n","history = model.fit_generator(train_gen,\n","                              steps_per_epoch = 500,\n","                              epochs=40,\n","                              validation_data = val_gen,\n","                              validation_steps = val_steps\n","                              )"]},{"cell_type":"markdown","metadata":{"id":"tNaf29ucNfz2"},"source":["### 6-3-9 더 나아가서"]},{"cell_type":"markdown","metadata":{"id":"dpJQ-3tSOSdk"},"source":["### 6-3-10 정리"]},{"cell_type":"markdown","metadata":{"id":"UDvxfsj5PlSO"},"source":["## 6-4 컨브넷을 사용한 시퀀스 처리"]},{"cell_type":"markdown","metadata":{"id":"s9IXy7n3QHvF"},"source":["### 6-4-1 시퀀스 데이터를 위한 1D 합성곱 이해하기"]},{"cell_type":"markdown","metadata":{"id":"_gmLtT7DSn8h"},"source":["### 6-4-2 시퀀스 데이터를 위한 1D 풀링"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hU-xtKr9LNef"},"outputs":[],"source":["# IMDB 데이터 전처리하기\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","\n","max_features = 10000\n","max_len = 500\n","\n","print('데이터 로드...')\n","(x_train , y_train), (x_test , y_test) = imdb.load_data(num_words=max_features)\n","print(len(x_train) , '훈련 시퀀스')\n","print(len(x_test) , '테스트 시퀀스')\n","\n","print('시퀀스 패딩 (samples x time)')\n","x_train , sequence.pad_sequences(x_train , maxlen=max_len)\n","x_test = sequence.pad_sepuences(x_test , maxlen=max_len)\n","print('x_train 크기:' , x_train.shape)\n","print('x_test 크기:' , x_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3ykE9NcuTnGV"},"outputs":[],"source":["from keras.models import sequential\n","from keras import layers\n","from keras.optimizers import RMSprop\n","\n","model = Sequential()\n","model.add(layers.Embbeding(max_features, 128 , input_length=max_len))\n","model.add(layers.Conv1D(32 , 7 , activation='relu'))\n","model.add(layers.MaxPooling1D(5))\n","model.add(layers.Conv1D(32 , 7  ,activation='relu'))\n","model.add(layers.GlobalMaxPooling1D())\n","model.add(layers.Dense(1))\n","\n","model.summary()\n","\n","model.compile(optimizer=RMSprop(lr=1e-4),\n","              loss = 'binary_crossentropy',\n","              metrics=['acc'])\n","\n","history = model.fit(x_train , y_train , epochs=10 , batch_size = 128, validation_split=0.2)"]},{"cell_type":"markdown","metadata":{"id":"HuTUCo2jVo7t"},"source":["### 6-4-4 CNN과 RNN을 연결하여 긴 시퀀스를 처리하기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"evtqkzGMU5Wa"},"outputs":[],"source":["from keras.models import Sequential\n","from keras import layers\n","from keras.optimizers import RMSprop\n","\n","model = Sequential()\n","model.add(layers.Conv1D(32 , 5 , activation = 'relu' , input_shape=(None , float_data.shape[-1])))\n","model.add(layers.MaxPooling1D(3))\n","model.add(layers.Conv1D(32 ,5 , activation = 'relu'))\n","model.add(layers.MaxPooling1D(3))\n","model.add(layers.GlobalMaxPooling1D())\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer=RMSprop() , loss = 'mae')\n","history = model.fit_generator(train_gen , \n","                              steps_per_epoch = 500,\n","                              validation_data = val_gen,\n","                              validation_steps=val_steps)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HfzqYlbUW_0z"},"outputs":[],"source":["step = 3\n","lookback = 1440\n","delay = 144\n","\n","train_gen = generator(float_data,\n","                      lookback = lookback,\n","                      delay = delay, \n","                      min_index = 0,\n","                      max_index = 200000,\n","                      shuffle=True,\n","                      step = step)\n","val_gen = generator(float_data,\n","                      lookback = lookback,\n","                      delay = delay, \n","                      min_index = 200001,\n","                      max_index = 300000,\n","                      shuffle=True,\n","                      step = step)\n","test_gen = generator(float_data,\n","                      lookback = lookback,\n","                      delay = delay, \n","                      min_index = 300001,\n","                      max_index = None,\n","                      shuffle=True,\n","                      step = step)\n","val_steps = (300000 - 200001 - lookback) // 128\n","test_steps = (len(float_data) - 300001 - lookback) // 128"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kFnA54XoYVFQ"},"outputs":[],"source":["from keras.models import Sequential\n","from keras import layers\n","from keras.optimizers import RMSprop\n","\n","model = Sequential()\n","model.add(layers.Conv1D(32 , 5 , activation='relu' , input_shape = (None , float_data.shape[-1])))\n","model.add(layers.MaxPooling1D(3))\n","model.add(layers.GRU(32 , dropout=0.1 , recurrent_dropout=0.5))\n","model.add(layers.Dense(1))\n","\n","model.summary()\n","\n","model.compile(optimizer = RMSprop() , loss = 'mae')\n","history = model.fit_generator(train_gen,\n","                              steps_per_epoch=500,\n","                              epochs = 20,\n","                              validation_data = val_gen,\n","                              validation_steps = val_steps\n","                              )"]},{"cell_type":"markdown","metadata":{"id":"3KLOxqQkZvLa"},"source":["### 6-4-5 정리"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aeng_TM8Zn7G"},"outputs":[],"source":[""]}],"metadata":{"colab":{"authorship_tag":"ABX9TyMzgTbVds3bjjdY0H0xAjyl","mount_file_id":"1kACxwEKLyKYXiAqnjZFE0CnEbGX6XLMd","name":"케라스 창시자 6단원 ","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}