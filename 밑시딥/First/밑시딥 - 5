{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"밑시딥 - 5","provenance":[],"collapsed_sections":[],"mount_file_id":"1_VhNGvfqgClwi1giLpgNM_XkKX6_6eYD","authorship_tag":"ABX9TyMfuPHufmgniSQCDTjjada5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"lBqk5aNz5vXy"},"source":["5.4 단순한 계층 구현하기"]},{"cell_type":"markdown","metadata":{"id":"td3InBhs5yar"},"source":["5.4.1 곱셈 계층"]},{"cell_type":"code","metadata":{"id":"xdrGEDRZ5G3g"},"source":["class MulLayer:\n","    def __init__(self):\n","        self.x = None\n","        self.y = None\n","\n","    def forward(self, x, y):\n","        self.x = x\n","        self.y = y\n","        out = x * y\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout * self.y  #x와 y를 바꾼다.\n","        dy = dout * self.x\n","\n","        return dx , dy\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"85mKJS2f6Yim","executionInfo":{"status":"ok","timestamp":1636985295193,"user_tz":-540,"elapsed":410,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"479901e2-4c53-4eff-894f-b93bb2444972"},"source":["apple = 100\n","apple_num = 2\n","tax = 1.1\n","\n","#계층들\n","mul_apple_layer = MulLayer()\n","mul_tax_layer= MulLayer()\n","\n","#순전파\n","apple_price = mul_apple_layer.forward(apple, apple_num)\n","price = mul_tax_layer.forward(apple_price , tax)\n","\n","print(price)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["220.00000000000003\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4RT47CtG69PN","executionInfo":{"status":"ok","timestamp":1636985430150,"user_tz":-540,"elapsed":414,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"c58a6c90-2365-4ebf-ebad-e97847d66421"},"source":["#역전파\n","dprice = 1\n","dapple_price, dtax = mul_tax_layer.backward(dprice)\n","dapple , dapple_num = mul_apple_layer.backward(dapple_price)\n","\n","print(dapple,dapple_num,dtax)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.2 110.00000000000001 200\n"]}]},{"cell_type":"markdown","metadata":{"id":"KQWMND8_75BQ"},"source":["5.4.2 덧셈 계층"]},{"cell_type":"code","metadata":{"id":"y3C2PRaY7voL"},"source":["class AddLayer:\n","    def __init__(self):\n","        pass\n","\n","    def forward(self, x, y):\n","        out = x + y\n","        \n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout * 1\n","        dy = dout * 1\n","\n","        return dx, dy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v9YYXAbN8UWx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637021631196,"user_tz":-540,"elapsed":558,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"7623a8e1-1072-4c83-b350-5a74ad900f0f"},"source":["apple = 100\n","apple_num = 2\n","orange = 150\n","orange_num = 3\n","tax = 1.1\n","\n","#계층들\n","mul_apple_layer = MulLayer()\n","mul_orange_layer = MulLayer()\n","add_apple_orange_layer = AddLayer()\n","mul_tax_layer = MulLayer()\n","\n","#순전파\n","apple_price = mul_apple_layer.forward(apple , apple_num) #(1)\n","orange_price = mul_orange_layer.forward(orange, orange_num) #(2)\n","all_price = add_apple_orange_layer.forward(apple_price , orange_price) #(3)\n","price = mul_tax_layer.forward(all_price , tax) #(4)\n","\n","#역전파\n","dprice = 1\n","dall_price , dtax = mul_tax_layer.backward(dprice) #(4)\n","dapple_price, dorange_price = add_apple_orange_layer.backward(dall_price) #(3)\n","dorange, dorange_num = mul_orange_layer.backward(dorange_price) #(2)\n","dapple, dapple_num = mul_apple_layer.backward(dapple_price) #(1)\n","\n","print(price)\n","print(dapple_num , dapple , dorange_num , dorange , dtax)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["715.0000000000001\n","110.00000000000001 2.2 165.0 3.3000000000000003 650\n"]}]},{"cell_type":"markdown","metadata":{"id":"90ZHh0lgGB7X"},"source":["5.5 활성화 함수 계층 구현하기"]},{"cell_type":"markdown","metadata":{"id":"Lh1uWn5mGFSh"},"source":["5.5.1 ReLU 계층"]},{"cell_type":"code","metadata":{"id":"nSewdEdjENx5"},"source":["class Relu:\n","    def __init__(self):\n","        self.mask = None\n","    \n","    def forward(self , x):\n","        self.mask = ( x <= 0 )\n","        out = x.copy()\n","        out[self.mask] = 0      #이렇게도 쓰는 구나.\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dout[self.mask] = 0\n","        dx = dout\n","        \n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C8vaOiRoHSNd","executionInfo":{"status":"ok","timestamp":1637022110050,"user_tz":-540,"elapsed":518,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"a97a79e5-0a2b-4c3a-cee1-0bdd26d4c1e4"},"source":["import numpy as np\n","\n","x = np.array( [ [ 1.0 , -0.5] , [-2.0 , 3.0] ] )\n","print(x)\n","print()\n","\n","mask = (x <= 0)\n","print(mask)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1.  -0.5]\n"," [-2.   3. ]]\n","\n","[[False  True]\n"," [ True False]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"aTxzy7mTILa1"},"source":["5.5.2 Sigmoid 계층"]},{"cell_type":"code","metadata":{"id":"WXXCZD9DHpD5"},"source":["class Sigmoid:\n","    def __init__ (self):\n","        self.out = None\n","\n","    def forward(self, x):\n","        out = 1 / (1 + np.exp(-x) )\n","        self.out = out          #self.out = y!\n","\n","        return out\n","\n","    def backward(self , dout):\n","        dx = dout * (1.0 - self.out) * self.out #self.out = y!\n","\n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZno4uObKNiW"},"source":["5.6 Affine/Softmax 계층 구현하기"]},{"cell_type":"markdown","metadata":{"id":"vOu-wA1qKr2K"},"source":["5.6.1 Affine 계층"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xk3Rj_U9KrEP","executionInfo":{"status":"ok","timestamp":1637023074209,"user_tz":-540,"elapsed":854,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"9231a20a-4e27-4b83-b537-ed6dcb6755e7"},"source":["X = np.random.rand(2)   #입력\n","W = np.random.rand(2,3) #가중치\n","B = np.random.rand(3)   #편향\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)\n","\n","Y = np.dot(X, W) + B"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2,)\n","(2, 3)\n","(3,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"Yo4sV_iPPzef"},"source":["5.6.2 배치용 Affine 계층"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dKT0Ws1RLcHf","executionInfo":{"status":"ok","timestamp":1637024921221,"user_tz":-540,"elapsed":1007,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"ae8f1ee1-ab29-4c42-b2cc-4e37407e0299"},"source":["X_dot_W = np.array( [ [0,0,0] , [10,10,10]])\n","B = np.array([1,2,3])\n","\n","print(X_dot_W)\n","print()\n","print(X_dot_W + B)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0  0  0]\n"," [10 10 10]]\n","\n","[[ 1  2  3]\n"," [11 12 13]]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zimqc4ubScnX","executionInfo":{"status":"ok","timestamp":1637025110552,"user_tz":-540,"elapsed":460,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"3f894523-211b-4401-9be0-1fec3b7a1dc4"},"source":["dY = np.array( [[1,2,3] , [4,5,6]])\n","print(dY)\n","print()\n","\n","dB = np.sum(dY, axis = 0)\n","print(dB)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [4 5 6]]\n","\n","[5 7 9]\n"]}]},{"cell_type":"code","metadata":{"id":"h4DQxuQRSl-Q","executionInfo":{"status":"ok","timestamp":1637036399223,"user_tz":-540,"elapsed":5,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"source":["class Affine:\n","    \n","    def __init__(self , w, b):\n","        self.W = W\n","        self.b = b\n","        self.x = None\n","        self.dw = None\n","        self.db = None\n","\n","    def forward(self , x):\n","        self.x = x\n","        out = np.dot(x, self.W) + self.b\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dx = np.dot(dout, self.W.T) #.T 는 전치행렬?\n","        self.dW = np.dot(self.x.T , dout)\n","        self.db = np.sum(dout, axis=0)\n","\n","        return dx"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s5gI28ap_kUr"},"source":["5.6.3 Softmax_with_Loss 계층"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iOk4BkuiD7A_","executionInfo":{"status":"ok","timestamp":1637037924254,"user_tz":-540,"elapsed":1034,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"76d78fac-0b87-4123-ea62-2c379e6a9594"},"source":["%cd /content/drive/MyDrive/밑시딥 독학/모듈/"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/밑시딥 독학/모듈\n"]}]},{"cell_type":"code","metadata":{"id":"REGEuA1qT3NX","executionInfo":{"status":"ok","timestamp":1637038026807,"user_tz":-540,"elapsed":629,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"source":["from functions import *\n","\n","class SoftmaxWithLoss:\n","    def __init__(self):\n","        self.loss = None #손실\n","        self.y = None # softmax의 출력\n","        self.t = None #정답 레이블 (원-핫 벡터)\n","\n","    def forward(self , x , t):\n","        self.t = t\n","        self.y = softmax(x)\n","        self.loss = cross_entroppy_error(self.y , self.t)\n","\n","        return self.loss\n","\n","    def backward(self, dout = 1):\n","        batch_size = self.t.shape[0]\n","        dx = (self.y - self.t) / batch_size\n","\n","        return dx"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pm1cOaWQFy6Z"},"source":["5.7 오차역전파법 구현하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3j_zCJHhEeSX","executionInfo":{"status":"ok","timestamp":1637041568914,"user_tz":-540,"elapsed":346,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"48e8c13a-02c9-409f-f339-53c5e3ea893a"},"source":["%cd /content/drive/MyDrive/밑시딥 독학/모듈/"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/밑시딥 독학/모듈\n"]}]},{"cell_type":"code","metadata":{"id":"mznIeWzwSKVq","executionInfo":{"status":"ok","timestamp":1637041615782,"user_tz":-540,"elapsed":851,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"source":["class Relu:\n","    def __init__(self):\n","        self.mask = None\n","\n","    def forward(self, x):\n","        self.mask = (x <= 0)\n","        out = x.copy()\n","        out[self.mask] = 0\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dout[self.mask] = 0\n","        dx = dout\n","\n","        return dx\n","\n","\n","class Sigmoid:\n","    def __init__(self):\n","        self.out = None\n","\n","    def forward(self, x):\n","        out = sigmoid(x)\n","        self.out = out\n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout * (1.0 - self.out) * self.out\n","\n","        return dx\n","\n","\n","class Affine:\n","    def __init__(self, W, b):\n","        self.W = W\n","        self.b = b\n","        \n","        self.x = None\n","        self.original_x_shape = None\n","        # 가중치와 편향 매개변수의 미분\n","        self.dW = None\n","        self.db = None\n","\n","    def forward(self, x):\n","        # 텐서 대응\n","        self.original_x_shape = x.shape\n","        x = x.reshape(x.shape[0], -1)\n","        self.x = x\n","\n","        out = np.dot(self.x, self.W) + self.b\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dx = np.dot(dout, self.W.T)\n","        self.dW = np.dot(self.x.T, dout)\n","        self.db = np.sum(dout, axis=0)\n","        \n","        dx = dx.reshape(*self.original_x_shape)  # 입력 데이터 모양 변경(텐서 대응)\n","        return dx\n","\n","\n","class SoftmaxWithLoss:\n","    def __init__(self):\n","        self.loss = None # 손실함수\n","        self.y = None    # softmax의 출력\n","        self.t = None    # 정답 레이블(원-핫 인코딩 형태)\n","        \n","    def forward(self, x, t):\n","        self.t = t\n","        self.y = softmax(x)\n","        self.loss = cross_entropy_error(self.y, self.t)\n","        \n","        return self.loss\n","\n","    def backward(self, dout=1):\n","        batch_size = self.t.shape[0]\n","        if self.t.size == self.y.size: # 정답 레이블이 원-핫 인코딩 형태일 때\n","            dx = (self.y - self.t) / batch_size\n","        else:\n","            dx = self.y.copy()\n","            dx[np.arange(batch_size), self.t] -= 1\n","            dx = dx / batch_size\n","        \n","        return dx\n","\n","\n","class Dropout:\n","    \"\"\"\n","    http://arxiv.org/abs/1207.0580\n","    \"\"\"\n","    def __init__(self, dropout_ratio=0.5):\n","        self.dropout_ratio = dropout_ratio\n","        self.mask = None\n","\n","    def forward(self, x, train_flg=True):\n","        if train_flg:\n","            self.mask = np.random.rand(*x.shape) > self.dropout_ratio\n","            return x * self.mask\n","        else:\n","            return x * (1.0 - self.dropout_ratio)\n","\n","    def backward(self, dout):\n","        return dout * self.mask\n","\n","\n","class BatchNormalization:\n","    \"\"\"\n","    http://arxiv.org/abs/1502.03167\n","    \"\"\"\n","    def __init__(self, gamma, beta, momentum=0.9, running_mean=None, running_var=None):\n","        self.gamma = gamma\n","        self.beta = beta\n","        self.momentum = momentum\n","        self.input_shape = None # 합성곱 계층은 4차원, 완전연결 계층은 2차원  \n","\n","        # 시험할 때 사용할 평균과 분산\n","        self.running_mean = running_mean\n","        self.running_var = running_var  \n","        \n","        # backward 시에 사용할 중간 데이터\n","        self.batch_size = None\n","        self.xc = None\n","        self.std = None\n","        self.dgamma = None\n","        self.dbeta = None\n","\n","    def forward(self, x, train_flg=True):\n","        self.input_shape = x.shape\n","        if x.ndim != 2:\n","            N, C, H, W = x.shape\n","            x = x.reshape(N, -1)\n","\n","        out = self.__forward(x, train_flg)\n","        \n","        return out.reshape(*self.input_shape)\n","            \n","    def __forward(self, x, train_flg):\n","        if self.running_mean is None:\n","            N, D = x.shape\n","            self.running_mean = np.zeros(D)\n","            self.running_var = np.zeros(D)\n","                        \n","        if train_flg:\n","            mu = x.mean(axis=0)\n","            xc = x - mu\n","            var = np.mean(xc**2, axis=0)\n","            std = np.sqrt(var + 10e-7)\n","            xn = xc / std\n","            \n","            self.batch_size = x.shape[0]\n","            self.xc = xc\n","            self.xn = xn\n","            self.std = std\n","            self.running_mean = self.momentum * self.running_mean + (1-self.momentum) * mu\n","            self.running_var = self.momentum * self.running_var + (1-self.momentum) * var            \n","        else:\n","            xc = x - self.running_mean\n","            xn = xc / ((np.sqrt(self.running_var + 10e-7)))\n","            \n","        out = self.gamma * xn + self.beta \n","        return out\n","\n","    def backward(self, dout):\n","        if dout.ndim != 2:\n","            N, C, H, W = dout.shape\n","            dout = dout.reshape(N, -1)\n","\n","        dx = self.__backward(dout)\n","\n","        dx = dx.reshape(*self.input_shape)\n","        return dx\n","\n","    def __backward(self, dout):\n","        dbeta = dout.sum(axis=0)\n","        dgamma = np.sum(self.xn * dout, axis=0)\n","        dxn = self.gamma * dout\n","        dxc = dxn / self.std\n","        dstd = -np.sum((dxn * self.xc) / (self.std * self.std), axis=0)\n","        dvar = 0.5 * dstd / self.std\n","        dxc += (2.0 / self.batch_size) * self.xc * dvar\n","        dmu = np.sum(dxc, axis=0)\n","        dx = dxc - dmu / self.batch_size\n","        \n","        self.dgamma = dgamma\n","        self.dbeta = dbeta\n","        \n","        return dx\n","\n","\n","class Convolution:\n","    def __init__(self, W, b, stride=1, pad=0):\n","        self.W = W\n","        self.b = b\n","        self.stride = stride\n","        self.pad = pad\n","        \n","        # 중간 데이터（backward 시 사용）\n","        self.x = None   \n","        self.col = None\n","        self.col_W = None\n","        \n","        # 가중치와 편향 매개변수의 기울기\n","        self.dW = None\n","        self.db = None\n","\n","    def forward(self, x):\n","        FN, C, FH, FW = self.W.shape\n","        N, C, H, W = x.shape\n","        out_h = 1 + int((H + 2*self.pad - FH) / self.stride)\n","        out_w = 1 + int((W + 2*self.pad - FW) / self.stride)\n","\n","        col = im2col(x, FH, FW, self.stride, self.pad)\n","        col_W = self.W.reshape(FN, -1).T\n","\n","        out = np.dot(col, col_W) + self.b\n","        out = out.reshape(N, out_h, out_w, -1).transpose(0, 3, 1, 2)\n","\n","        self.x = x\n","        self.col = col\n","        self.col_W = col_W\n","\n","        return out\n","\n","    def backward(self, dout):\n","        FN, C, FH, FW = self.W.shape\n","        dout = dout.transpose(0,2,3,1).reshape(-1, FN)\n","\n","        self.db = np.sum(dout, axis=0)\n","        self.dW = np.dot(self.col.T, dout)\n","        self.dW = self.dW.transpose(1, 0).reshape(FN, C, FH, FW)\n","\n","        dcol = np.dot(dout, self.col_W.T)\n","        dx = col2im(dcol, self.x.shape, FH, FW, self.stride, self.pad)\n","\n","        return dx\n","\n","\n","class Pooling:\n","    def __init__(self, pool_h, pool_w, stride=1, pad=0):\n","        self.pool_h = pool_h\n","        self.pool_w = pool_w\n","        self.stride = stride\n","        self.pad = pad\n","        \n","        self.x = None\n","        self.arg_max = None\n","\n","    def forward(self, x):\n","        N, C, H, W = x.shape\n","        out_h = int(1 + (H - self.pool_h) / self.stride)\n","        out_w = int(1 + (W - self.pool_w) / self.stride)\n","\n","        col = im2col(x, self.pool_h, self.pool_w, self.stride, self.pad)\n","        col = col.reshape(-1, self.pool_h*self.pool_w)\n","\n","        arg_max = np.argmax(col, axis=1)\n","        out = np.max(col, axis=1)\n","        out = out.reshape(N, out_h, out_w, C).transpose(0, 3, 1, 2)\n","\n","        self.x = x\n","        self.arg_max = arg_max\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dout = dout.transpose(0, 2, 3, 1)\n","        \n","        pool_size = self.pool_h * self.pool_w\n","        dmax = np.zeros((dout.size, pool_size))\n","        dmax[np.arange(self.arg_max.size), self.arg_max.flatten()] = dout.flatten()\n","        dmax = dmax.reshape(dout.shape + (pool_size,)) \n","        \n","        dcol = dmax.reshape(dmax.shape[0] * dmax.shape[1] * dmax.shape[2], -1)\n","        dx = col2im(dcol, self.x.shape, self.pool_h, self.pool_w, self.stride, self.pad)\n","        \n","        return dx"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"c0yaD4gvGZLZ","executionInfo":{"status":"ok","timestamp":1637041754949,"user_tz":-540,"elapsed":434,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}}},"source":["import numpy as np\n","\n","from gradient import numerical_gradient\n","from collections import OrderedDict\n","\n","class TwoLayerNet:\n","    \n","    def __init__(self , input_size, hidden_size, output_size, weight_init_std = 0.01):\n","        #가중치 초기화\n","        self.params = {}\n","        self.params['W1'] = weight_init_std * \\\n","                            np.random.randn(input_size, hidden_size)\n","        self.params['b1'] =np.zeros(hidden_size)\n","        self.params['W2'] = weight_init_std * \\\n","                            np.random.randn(hidden_size, output_size)\n","        self.params['b2'] = np.zeros(output_size)\n","\n","    #계층 생성\n","        self.layers = OrderedDict()\n","        self.layers['Affine1'] = \\\n","        Affine(self.params['W1'], self.params['b1'])\n","        self.layers['Relu1'] = Relu()\n","        self.layers['Affine2'] = \\\n","        Affine(self.params['W2'] , self.params['b2'])\n","\n","        self.lastLayer = SoftmaxWithLoss()\n","\n","    def predict(self, x):\n","        for layer in self.layers.values():\n","            x = layer.forward(x)\n","\n","        return x\n","\n","    #x : 입력 데이터 , t : 정답 레이블\n","    def loss(self, x, t):\n","        y = self.predict(x)\n","        return self.lastLayer.forward(y,t)\n","\n","    def accuracy(self, x, t):\n","        y = self.predict(x)\n","        y = np.argmax(y, axis = 1)\n","        if t.ndim != 1: t= np.argmax(t, axis = 1)\n","\n","        accuracy = np.sum(y == t) / float(x.shape[0])\n","\n","        return accuracy\n","\n","    # x : 입력 데이터, t : 정답 레이블\n","    def numerical_gradient(self, x, t):\n","        \n","        loss_W = lambda W: self.loss(x,t)\n","\n","        grads = {}\n","        grads['W1'] = numerical_gradient(loss_W, self.params['W1'])\n","        grads['b1'] = numerical_gradient(loss_W, self.params['b1'])\n","        grads['W2'] = numerical_gradient(loss_W, self.params['W2'])\n","        grads['b2'] = numerical_gradient(loss_W, self.params['b2'])\n","        return grads\n","\n","    def gradient(self, x, t):\n","        #순전파\n","        self.loss(x,t)\n","\n","        #역전파\n","        dout = 1\n","        dout = self.lastLayer.backward(dout)\n","\n","        layers = list(self.layers.values())\n","        layers.reverse()\n","        for layer in layers:\n","            dout = layer.backward(dout)\n","\n","        #결과 저장\n","        grads = {}\n","        grads['W1'] = self.layers['Affine1'].dW\n","        grads['b1'] = self.layers['Affine1'].db\n","        grads['W2'] = self.layers['Affine2'].dW\n","        grads['b2'] = self.layers['Affine2'].db\n","\n","        return grads"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0lbj12kBQEGK"},"source":["5.7.3 오차역전파법으로 구한 기울기 검증하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2OZMS-K7QI-Q","executionInfo":{"status":"ok","timestamp":1637041768558,"user_tz":-540,"elapsed":10765,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"008997da-cf5e-479f-c1e4-e9de1889b32b"},"source":["import numpy as np\n","from mnist import load_mnist\n","\n","#데이터 읽기\n","(x_train, t_train), (x_test, t_test) = \\\n","    load_mnist(normalize = True, one_hot_label=True)\n","\n","network = TwoLayerNet(input_size=784, hidden_size=50 , output_size=10)\n","\n","x_batch = x_train[:3]\n","t_batch = t_train[:3]\n","\n","grad_numerical = network.numerical_gradient(x_batch, t_batch)\n","grad_backprop = network.gradient(x_batch, t_batch)\n","\n","#각 가중치의 차이의 절댓값을 구한 후, 그 절댓값들의 평균을 낸다.\n","for key in grad_numerical.keys():\n","    diff = np.average( np.abs(grad_backprop[key] - grad_numerical[key] ))\n","    print(key + \":\" + str(diff))"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["W1:4.4724484288189793e-10\n","b1:2.652459223139239e-09\n","W2:6.255423422160222e-09\n","b2:1.4030960411720584e-07\n"]}]},{"cell_type":"markdown","metadata":{"id":"lnH3Xzz6S483"},"source":["5.7.4 오차역전파법을 사용한 학습 구현하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":644},"id":"pJqwJGbJRf3l","executionInfo":{"status":"error","timestamp":1637042476806,"user_tz":-540,"elapsed":38853,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"9f3541d9-8090-4501-ff9d-d9fd90a294e2"},"source":["import numpy as np\n","from mnist import load_mnist\n","\n","#데이터 읽기\n","(x_train, t_train), (x_test, t_test) = \\\n","    load_mnist(normalize=True, one_hot_label= True)\n","network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n","\n","iters_num = 10000\n","train_size = x_train.shape[0]\n","batch_size = 100\n","learning_rate = 0.1\n","\n","train_loss_list = []\n","train_acc_list = []\n","test_acc_list = []\n","\n","iter_per_epoch = max(train_size / batch_size , 1)\n","\n","for i in range(iters_num):\n","    batch_mask = np.random.choice(train_size, batch_size)\n","    x_batch = x_train[batch_mask]\n","    t_batch = t_train[batch_mask]\n","\n","    #오차역전파법으로 기울기를 구한다.\n","    grad = network.gradient(x_batch , t_batch)\n","\n","    #갱신\n","    for key in ('W1' , 'b1' , 'W2' , 'b2'):\n","        network.params[key] -= learning_rate * grad[key]\n","\n","    loss = network.loss(x_batch, t_batch)\n","    train_loss_list.append(loss)\n","\n","    if i % iter_per_epoch == 0:\n","        train_acc = network.accuracy(x_train, t_train)\n","        test_acc = network.accuracy(x_test, t_test)\n","        train_acc_list.append(train_acc)\n","        test_acc_list.append(test_acc)\n","        print(train_acc, test_acc)"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["0.09038333333333333 0.0949\n","0.9039666666666667 0.9068\n","0.9183 0.9227\n","0.934 0.9327\n","0.94355 0.9424\n","0.9500833333333333 0.9489\n","0.9554166666666667 0.9519\n","0.9597666666666667 0.9567\n","0.9637833333333333 0.9599\n","0.96785 0.9612\n","0.9698166666666667 0.9638\n","0.9717 0.9658\n","0.97355 0.9657\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-b128f243f40e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0miter_per_epoch\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m         \u001b[0mtrain_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m         \u001b[0mtest_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0mtrain_acc_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_acc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-19-c6356b9ce4ea>\u001b[0m in \u001b[0;36maccuracy\u001b[0;34m(self, x, t)\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-19-c6356b9ce4ea>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m             \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-13-2d6fcae308aa>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0mout\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"-8UMLYtEVTsH"},"source":[""],"execution_count":null,"outputs":[]}]}