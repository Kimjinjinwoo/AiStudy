{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Chapter 5.ipybn","provenance":[],"collapsed_sections":[],"mount_file_id":"1oTbabmpb3UHPnQLGwkLtvtMvpFrN7Lg2","authorship_tag":"ABX9TyN3BKvsA2Os0QxsjWHsBTYM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# CHAPTER 5 순환 신경망(RNN)"],"metadata":{"id":"8Iq2CPODF85S"}},{"cell_type":"markdown","source":["## 5-1 확률과 언어 모델"],"metadata":{"id":"gc9eo0ECGCva"}},{"cell_type":"markdown","source":["### 5-1-1 word2vec을 확률 관점에서 바라보다"],"metadata":{"id":"Yu1XQDDKGLbk"}},{"cell_type":"markdown","source":["### 5-1-2 언어 모델"],"metadata":{"id":"XnoaL56SKziM"}},{"cell_type":"markdown","source":["### 5-1-3 CBOW 모델을 언어 모델로?"],"metadata":{"id":"IEa_0Hy3Loeb"}},{"cell_type":"markdown","source":["## 5-2 RNN이란"],"metadata":{"id":"V4NukLATMcL5"}},{"cell_type":"markdown","source":["### 5-2-1 순환하는 신경망"],"metadata":{"id":"hcr4XNKWNwnV"}},{"cell_type":"markdown","source":["### 5-2-2 순환 구조 펼치기"],"metadata":{"id":"4x6r45J8Ojck"}},{"cell_type":"markdown","source":["### 5-2-3 BPTT"],"metadata":{"id":"WIc3idTyQn5g"}},{"cell_type":"markdown","source":["### 5-2-4 Truncated BPTT"],"metadata":{"id":"RuVBlkvtQxAC"}},{"cell_type":"markdown","source":["### 5-2-5 Truncated BPTT의 미니배치 학습"],"metadata":{"id":"_OPLnRRcTfgu"}},{"cell_type":"markdown","source":["### 5-3 RNN 구현"],"metadata":{"id":"ivs6pXKcU93c"}},{"cell_type":"markdown","source":["### 5-3-1 RNN 계층 구현"],"metadata":{"id":"1VAl6pMcVzyT"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"J9m3JoAtF6bL"},"outputs":[],"source":["import numpy as np\n","\n","class RNN:\n","    def __init__(self ,Wx , Wh , b):\n","        self.params = [Wx , Wh , b]\n","        self.grads = [np.zeros_like(Wx) , np.zeros_like(Wh) , np.zeros_like(b)]\n","        self.cache = None\n","\n","    def forward(self , x , h_prev):\n","        Wx , Wh, b = self.params\n","        t = np.matmul(h_prev , Wh) + np.matmul(x, Wx) + b\n","        h_next = np.tanh(t)\n","\n","        self.cache = (x , h_prev , h_next)\n","        return h_next\n","\n","    def backward(self, dh_next):\n","        Wx , Wh , b = self.params\n","        x , h_prev , h_next = self.cache\n","\n","        dt = dh_next * (1 - h_next ** 2)\n","        db = np.sum(dt , axis = 0)\n","        dWh = np.matmul(h_prev.T , dt)\n","        dh_prev = np.matmul(dt , Wh.T)\n","        dWx = np.matmul(x.T  , dt)\n","        dx = np.matMul(dt , Wx.T)\n","\n","        self.grads[0][...] = dWx\n","        self.grads[1][...] = dWh\n","        self.grads[2][...] = db\n","\n","        return dx, dh_prev"]},{"cell_type":"code","source":["class TimeRNN:\n","    def __init__(self , Wx , Wh , b , stateful = False):\n","        self.params = [Wx , Wh , b]\n","        self.grads = [np.zeros_like(Wx) , np.zeros_like(Wh) , np.zeros_like(b)]\n","        self.layers = None\n","\n","        self.h , self.dh = None, None\n","        self.stateful = stateful\n","\n","    def set_state (self , h):\n","        self.h = h\n","\n","    def reset_state(self):\n","        self.h = None\n","\n","    def forward(self , xs):\n","        Wx , Wh  ,b = self.params\n","        N , T , D = xs.shape\n","        D , H = Wx.shape\n","\n","        self.layers = []\n","        hs = np.empty((N ,T , H) , dtype = 'f')\n","\n","        if not self.stateful or self.h is None:\n","            self.h = np.zeros((N ,H) , dtype='f')\n","        \n","        for t in range(T):\n","            layer = RNN(*self.params)\n","            self.h = layer.forward(xs[: , t , : ] , self.h)\n","            hs[: , t , :] = self.h\n","            self.layers.append(layer)\n","\n","        return hs\n","\n","    def backward(self, dhs):\n","        Wx , Wh , b = self.params\n","        N , T , T = dhs.shape\n","        D ,H = Wx.shape\n","\n","        dxs = np.empty((N , T  ,D) , dtype = 'f')\n","        dh = 0\n","        grads = [0 , 0, 0]\n","        for t in  reversed(range(T)):\n","            layer = self.layers[t]\n","            dx , dh = layer.backward(dhs[: , t , :] + dh) # 합산된 기울기\n","            dxs[: , t , :] = dx\n","\n","        for i, grad in enumerate(grads):\n","            self.grads[i][...] = grad\n","        self.dh = dh\n","\n","        return dxs\n","        "],"metadata":{"id":"rm0ACUbMclHj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 5-4 시계열 데이터 처리 계층 구현"],"metadata":{"id":"zmVVkN7238dx"}},{"cell_type":"markdown","source":["### 5-4-1 RNNLM의 전체 그림"],"metadata":{"id":"fPLbTeN94D8v"}},{"cell_type":"markdown","source":["### 5-4-2 Time 계층 구현"],"metadata":{"id":"aKTLHfaU4lAo"}},{"cell_type":"markdown","source":["## 5-5 RNNLM 학습과 평가"],"metadata":{"id":"g1jAUs416jKd"}},{"cell_type":"markdown","source":["### 5-5-1 RNNLM 구현"],"metadata":{"id":"0wSWDa6b7BH6"}},{"cell_type":"code","source":["add = '/content/drive/MyDrive/AI/독학/밑시딥 2'"],"metadata":{"id":"xtsAoyd27LB1","executionInfo":{"status":"ok","timestamp":1658830140189,"user_tz":-540,"elapsed":353,"user":{"displayName":"김진우","userId":"12971138652345879224"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import sys\n","sys.path.append(add)\n","import numpy as np\n","from common.time_layers import *\n","\n","class SimpleRnnlm:\n","    def __init__(self , vocab_size , wordvec_size , hidden_size):\n","        V  ,D  ,H = vocab_size , wordvec_size  ,hidden_size\n","        rn = np.random.randn\n","        \n","        # 가중치 초기화\n","        embed_W = (rn(V,D) / 100).astype('f')\n","        rnn_Wx = (rn(D,H) / np.sqrt(D)).astype('f')\n","        rnn_Wh = (rn(H, H) / np.sqrt(H)).astype('f')\n","        rnn_b = np.zeros(H).astype('f')\n","        affine_W = (rn(H , V) / np.sqrt(H)).astype('f')\n","        affine_b = np.zeros(V).astype('f')\n","\n","        # 계층 생성\n","        self.layers = [\n","                       TimeEmbedding(embed_W),\n","                       TimeRNN(rnn_Wx , rnn_Wh , rnn_b , stateful = True),\n","                       TimeAffine(affine_W , affine_b)\n","        ]\n","        self.loss_layer = TimeSoftmaxWithLoss()\n","        self.rnn_layer = self.layers[1]\n","\n","        # 모든 가중치와 기울기를 리스트에 모은다.\n","        self.params , self.grads = [] , []\n","        for layer in self.layers:\n","            self.params += layer.params\n","            self.grads += layer.grads\n","\n","    def forward(self , xs , ts):\n","        for layer in self.layers:\n","            xs = layer.forward(xs)\n","        loss = self.loss_layer.forward(xs , ts)\n","        return loss\n","    \n","    def backward(self , dout = 1):\n","        dout = self.loss_layer.backward(dout)\n","        for layer in reversed(self.layers):\n","            dout = layer.backward(dout)\n","        return dout\n","    \n","    def reset_state(self):\n","        self.rnn_layer.reset_state()"],"metadata":{"id":"6UCl3z9k3-7f","executionInfo":{"status":"ok","timestamp":1658832136717,"user_tz":-540,"elapsed":5,"user":{"displayName":"김진우","userId":"12971138652345879224"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["### 5-5-2 언어 모델의 평가"],"metadata":{"id":"T_pYq9GVB5Fq"}},{"cell_type":"markdown","source":["### 5-5-3 RNNLM의 학습 코드"],"metadata":{"id":"eDXviHrPCf2P"}},{"cell_type":"code","source":["import sys\n","sys.path.append(add)\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from common.optimizer import SGD\n","from dataset import ptb\n","\n","# 하이퍼파라미터 설정\n","batch_size = 10\n","wordvec_size = 100\n","hidden_size = 100   # RNN의 은닉 상태 벡터의 원소 수\n","time_size = 5   # Truncated BPTT가 한 번에 펼치는 시간 크기\n","lr = 0.1\n","max_epoch = 100\n","\n","# 학습 데이터 읽기 (전체 중 1000개만)\n","corpus , word_to_id , id_to_word = ptb.load_data('train')\n","corpus_size = 1000\n","corpus = corpus[:corpus_size]\n","vocab_size = int(max(corpus) + 1)\n","\n","xs = corpus[:-1]\n","ts = corpus[1:]\n","data_size = len(xs)\n","print('말뭉치 크기: %d, 어휘 수: %d'  %(corpus_size , vocab_size))\n","\n","# 학습 시 사용하는 변수\n","max_iters = data_size // (batch_size * time_size)\n","time_idx = 0\n","total_loss = 0\n","loss_count = 0\n","ppl_list = []\n","\n","#모델 생성\n","model = SimpleRnnlm(vocab_size  , wordvec_size , hidden_size)\n","optimizer = SGD(lr)\n","\n","# (1) 각 미니배치에서 샘플을 읽기 시작 위치를 계산\n","jump = (corpus_size - 1) // batch_size\n","offsets = [i * jump for i in range(batch_size)]\n","\n","for epoch in range(max_epoch):\n","    for iter in range(max_iters):\n","        # (2) 미니배치 획득\n","        batch_x = np.empty((batch_size , time_size) , dtype='i')\n","        batch_t = np.empty((batch_size , time_size) , dtype='i')\n","        for t in range(time_size):\n","            for i, offset in enumerate(offsets):\n","                batch_x[i , t] = xs[ (offset + time_idx) % data_size ]\n","                batch_t[i , t] = ts[ (offset + time_idx) % data_size ]\n","\n","        # 기울기를 구하여 매개변수 갱긴\n","        loss = model.forward(batch_x , batch_t)\n","        model.backward()\n","        optimizer.update(model.params , model.grads)\n","        total_loss += loss\n","        loss_count += 1\n","    # (3) 에폭마다 처플렉서티 평가\n","    ppl = np.exp(total_loss / loss_count)\n","    print('| 에폭 %d | 퍼플렉서티 %.2f' % (epoch+1 , ppl))\n","    ppl_list.append(float(ppl))\n","    total_loss , loss_count = 0,0\n","\n","    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kz2kNRBN-xQJ","executionInfo":{"status":"ok","timestamp":1658832147648,"user_tz":-540,"elapsed":8627,"user":{"displayName":"김진우","userId":"12971138652345879224"}},"outputId":"66cfcfaa-ff53-439a-8b0f-c623a01fc98d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["말뭉치 크기: 1000, 어휘 수: 418\n","| 에폭 1 | 퍼플렉서티 41.99\n","| 에폭 2 | 퍼플렉서티 4.82\n","| 에폭 3 | 퍼플렉서티 2.71\n","| 에폭 4 | 퍼플렉서티 1.78\n","| 에폭 5 | 퍼플렉서티 1.49\n","| 에폭 6 | 퍼플렉서티 1.40\n","| 에폭 7 | 퍼플렉서티 1.37\n","| 에폭 8 | 퍼플렉서티 1.36\n","| 에폭 9 | 퍼플렉서티 1.35\n","| 에폭 10 | 퍼플렉서티 1.34\n","| 에폭 11 | 퍼플렉서티 1.34\n","| 에폭 12 | 퍼플렉서티 1.34\n","| 에폭 13 | 퍼플렉서티 1.34\n","| 에폭 14 | 퍼플렉서티 1.33\n","| 에폭 15 | 퍼플렉서티 1.33\n","| 에폭 16 | 퍼플렉서티 1.33\n","| 에폭 17 | 퍼플렉서티 1.33\n","| 에폭 18 | 퍼플렉서티 1.33\n","| 에폭 19 | 퍼플렉서티 1.33\n","| 에폭 20 | 퍼플렉서티 1.33\n","| 에폭 21 | 퍼플렉서티 1.33\n","| 에폭 22 | 퍼플렉서티 1.33\n","| 에폭 23 | 퍼플렉서티 1.33\n","| 에폭 24 | 퍼플렉서티 1.33\n","| 에폭 25 | 퍼플렉서티 1.33\n","| 에폭 26 | 퍼플렉서티 1.33\n","| 에폭 27 | 퍼플렉서티 1.33\n","| 에폭 28 | 퍼플렉서티 1.32\n","| 에폭 29 | 퍼플렉서티 1.32\n","| 에폭 30 | 퍼플렉서티 1.32\n","| 에폭 31 | 퍼플렉서티 1.32\n","| 에폭 32 | 퍼플렉서티 1.32\n","| 에폭 33 | 퍼플렉서티 1.32\n","| 에폭 34 | 퍼플렉서티 1.32\n","| 에폭 35 | 퍼플렉서티 1.32\n","| 에폭 36 | 퍼플렉서티 1.32\n","| 에폭 37 | 퍼플렉서티 1.32\n","| 에폭 38 | 퍼플렉서티 1.32\n","| 에폭 39 | 퍼플렉서티 1.32\n","| 에폭 40 | 퍼플렉서티 1.32\n","| 에폭 41 | 퍼플렉서티 1.32\n","| 에폭 42 | 퍼플렉서티 1.32\n","| 에폭 43 | 퍼플렉서티 1.32\n","| 에폭 44 | 퍼플렉서티 1.32\n","| 에폭 45 | 퍼플렉서티 1.32\n","| 에폭 46 | 퍼플렉서티 1.32\n","| 에폭 47 | 퍼플렉서티 1.32\n","| 에폭 48 | 퍼플렉서티 1.32\n","| 에폭 49 | 퍼플렉서티 1.32\n","| 에폭 50 | 퍼플렉서티 1.32\n","| 에폭 51 | 퍼플렉서티 1.32\n","| 에폭 52 | 퍼플렉서티 1.32\n","| 에폭 53 | 퍼플렉서티 1.32\n","| 에폭 54 | 퍼플렉서티 1.32\n","| 에폭 55 | 퍼플렉서티 1.32\n","| 에폭 56 | 퍼플렉서티 1.32\n","| 에폭 57 | 퍼플렉서티 1.32\n","| 에폭 58 | 퍼플렉서티 1.32\n","| 에폭 59 | 퍼플렉서티 1.32\n","| 에폭 60 | 퍼플렉서티 1.32\n","| 에폭 61 | 퍼플렉서티 1.32\n","| 에폭 62 | 퍼플렉서티 1.32\n","| 에폭 63 | 퍼플렉서티 1.32\n","| 에폭 64 | 퍼플렉서티 1.32\n","| 에폭 65 | 퍼플렉서티 1.32\n","| 에폭 66 | 퍼플렉서티 1.32\n","| 에폭 67 | 퍼플렉서티 1.32\n","| 에폭 68 | 퍼플렉서티 1.32\n","| 에폭 69 | 퍼플렉서티 1.32\n","| 에폭 70 | 퍼플렉서티 1.32\n","| 에폭 71 | 퍼플렉서티 1.32\n","| 에폭 72 | 퍼플렉서티 1.32\n","| 에폭 73 | 퍼플렉서티 1.32\n","| 에폭 74 | 퍼플렉서티 1.32\n","| 에폭 75 | 퍼플렉서티 1.32\n","| 에폭 76 | 퍼플렉서티 1.32\n","| 에폭 77 | 퍼플렉서티 1.32\n","| 에폭 78 | 퍼플렉서티 1.32\n","| 에폭 79 | 퍼플렉서티 1.32\n","| 에폭 80 | 퍼플렉서티 1.32\n","| 에폭 81 | 퍼플렉서티 1.32\n","| 에폭 82 | 퍼플렉서티 1.32\n","| 에폭 83 | 퍼플렉서티 1.32\n","| 에폭 84 | 퍼플렉서티 1.32\n","| 에폭 85 | 퍼플렉서티 1.32\n","| 에폭 86 | 퍼플렉서티 1.32\n","| 에폭 87 | 퍼플렉서티 1.32\n","| 에폭 88 | 퍼플렉서티 1.32\n","| 에폭 89 | 퍼플렉서티 1.32\n","| 에폭 90 | 퍼플렉서티 1.32\n","| 에폭 91 | 퍼플렉서티 1.32\n","| 에폭 92 | 퍼플렉서티 1.32\n","| 에폭 93 | 퍼플렉서티 1.32\n","| 에폭 94 | 퍼플렉서티 1.32\n","| 에폭 95 | 퍼플렉서티 1.32\n","| 에폭 96 | 퍼플렉서티 1.32\n","| 에폭 97 | 퍼플렉서티 1.32\n","| 에폭 98 | 퍼플렉서티 1.32\n","| 에폭 99 | 퍼플렉서티 1.32\n","| 에폭 100 | 퍼플렉서티 1.32\n"]}]},{"cell_type":"markdown","source":["### 5-5-4 RNNLM의 Trainer 클래스"],"metadata":{"id":"kO3FfN-cHYNQ"}},{"cell_type":"markdown","source":["## 5-6 정리"],"metadata":{"id":"mVPhzLudHsPX"}},{"cell_type":"code","source":[""],"metadata":{"id":"IuyY2GSzGRwW"},"execution_count":null,"outputs":[]}]}