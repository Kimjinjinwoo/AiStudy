{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"3단원","provenance":[],"collapsed_sections":["hcxVWjoo8hpD","wiY65Gia8kgx","KCrCkWA0V5AV"],"mount_file_id":"1QPJAd6j2ND03vWc3v7N82rWjula8Iqfx","authorship_tag":"ABX9TyPSkQNs7sG5wwrJybx2VqQr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 3 평가"],"metadata":{"id":"fuk13nCAC0tW"}},{"cell_type":"markdown","source":["## 3-1 정확도(Accuracy)"],"metadata":{"id":"3gahoIRfDh37"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"O1kjVEeBB0Hi"},"outputs":[],"source":["from sklearn.base import BaseEstimator\n","\n","class MyDummyClassifier( BaseEstimator ):\n","    # fit( ) 메서드는 아무것도 학습하지 않음.\n","    def fit(self, X , y=None):\n","        pass\n","    # predict( ) 메서드는 단순히 Sex 피처가 1이면 0, 그렇지 않으면 1로 예측함.\n","    def predict(self, X):\n","        pred = np.zeros( ( X.shape[0] , 1 ) )\n","        for i in range( X.shape[0] ) :\n","            if X['Sex'].iloc[i] == 1:\n","                pred[i] = 0\n","            else :\n","                pred[i] = 1\n","\n","        return pred"]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/AI/파이썬 머신러닝 완벽가이드/titanic"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D1v5-nqGaQPj","executionInfo":{"status":"ok","timestamp":1641923866277,"user_tz":-540,"elapsed":9,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"bb904fa5-fb92-453b-eed7-3a75523824a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AI/파이썬 머신러닝 완벽가이드/titanic\n"]}]},{"cell_type":"code","source":["from sklearn import preprocessing\n","#Null 처리 함수\n","def fillna(df):\n","    df['Age'].fillna(df['Age'].mean( ) , inplace = True)\n","    df['Cabin'].fillna('N', inplace = True)\n","    df['Embarked'].fillna('N' , inplace = True)\n","    df['Fare'].fillna(0, inplace = True)\n","    return df\n","\n","# 머신러닝 알고리즘에 불필요한 속성 제거\n","def drop_features(df):\n","    df.drop(['PassengerId' , 'Name' , 'Ticket'], axis = 1 , inplace=True)\n","    return df\n","\n","#레이블 인코딩 수행\n","def format_features(df):\n","    df['Cabin'] = df['Cabin'].str[:1]\n","    features = ['Cabin' , 'Sex' , 'Embarked']\n","    for feature in features:\n","        le = preprocessing.LabelEncoder()\n","        le = le.fit(df[feature])\n","        df[feature] = le.transform(df[feature])\n","    return df\n","\n","#앞에서 설정한 데이터 전처리 함수 호출\n","def transform_features(df):\n","    df = fillna(df)\n","    df = drop_features(df)\n","    df = format_features(df)\n","    return df"],"metadata":{"id":"PxoMuidFeVof"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","\n","# 원본 데이터를 재로딩, 데이터 가공, 학습 데이터/테스트 데이터 분할.\n","titanic_df = pd.read_csv('titanic_train.csv')\n","y_titanic_df = titanic_df['Survived']\n","X_titanic_df = titanic_df.drop('Survived' , axis = 1)\n","X_titanic_df = transform_features(X_titanic_df)\n","X_train, X_test , y_train , y_test = train_test_split(X_titanic_df , y_titanic_df , test_size=0.2 , random_state=0)\n","\n","# 위에서 생성한 Dummy Classifier를 이용해 학습/예측/평가 수행.\n","myclf = MyDummyClassifier()\n","myclf.fit(X_train, y_train)\n","\n","mypredictions = myclf.predict( X_test )\n","print('Dummy Classifier의 정확도는: {0:.4f}'.format(accuracy_score(y_test, mypredictions)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EGXNcyMxbJpI","executionInfo":{"status":"ok","timestamp":1641923866279,"user_tz":-540,"elapsed":7,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"7ca8f9f1-23d6-468e-f432-9e9d79c3f6a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dummy Classifier의 정확도는: 0.7877\n"]}]},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","from sklearn.model_selection import train_test_split\n","from sklearn.base import BaseEstimator\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","import pandas as pd\n","\n","class MyFakeClassifier(BaseEstimator):\n","    def fit(self, X, y):\n","        pass\n","\n","    #입력값으로 들어오는 X 데이터 세트의 크기만큼 모두 0값으로 만들어서 반환\n","    def predict(self, X):\n","        return np.zeros( (len(X), 1), dtype=bool )\n","\n","#사이킷런의 내장 데이터 세트인 load_digits( )를 이용해 MNIST 데이터 로딩\n","digits = load_digits( )\n","\n","#digits 번호가 7번이면 True이고 이를 astype(int)로 1로 변환, 7번이 아니면 Dalse 이고 0으로 변환.\n","y = (digits.target == 7).astype(int)\n","X_train, X_test, y_train, y_test = train_test_split( digits.data, y ,random_state=11)"],"metadata":{"id":"GFLXSwUQdLHJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 불균형한 레이블 데이터 분포도 확인.\n","print('레이블 테스트 세트 크기 :', y_test.shape )\n","print('테스트 세트 레이블 0 과 1의 분포도')\n","print( pd.Series(y_test).value_counts( ) )\n","\n","#Dummy Classifier로 학습/예측/정확도 평가\n","fakeclf = MyFakeClassifier( )\n","fakeclf.fit(X_train, y_train)\n","fakepred = fakeclf.predict(X_test)\n","print('모든 예측을 0으로 하여도 정확도는:{:.3f}'.format ( accuracy_score ( y_test , fakepred ) ) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nSSFEHuGf15c","executionInfo":{"status":"ok","timestamp":1641923866763,"user_tz":-540,"elapsed":489,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"b8d76dc1-a765-4d50-c95c-51997f6c1c17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["레이블 테스트 세트 크기 : (450,)\n","테스트 세트 레이블 0 과 1의 분포도\n","0    405\n","1     45\n","dtype: int64\n","모든 예측을 0으로 하여도 정확도는:0.900\n"]}]},{"cell_type":"markdown","source":["## 3-2 오차행렬"],"metadata":{"id":"4i2iiJsikiVR"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","\n","confusion_matrix(y_test , fakepred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tFP4Tbt2g9hw","executionInfo":{"status":"ok","timestamp":1641923866764,"user_tz":-540,"elapsed":22,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"24bdf146-1bf0-4c98-9102-5a27d3fcb53e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[405,   0],\n","       [ 45,   0]])"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","source":["## 3-3 정밀도와 재현율"],"metadata":{"id":"CYoyEQ00p1CE"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score , confusion_matrix\n","\n","def get_clf_eval(y_test, pred):\n","    confusion = confusion_matrix(y_test, pred)\n","    accuracy = accuracy_score(y_test , pred)\n","    precision = precision_score(y_test , pred)\n","    recall = recall_score(y_test , pred)\n","    print('오차 행렬')\n","    print(confusion)\n","    print('정확도: {0:.4f}, 정밀도: {1:.4f}, 재현율: {2:.4f}'.format(accuracy, precision, recall))"],"metadata":{"id":"SaxwZahWpFra"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","\n","#원본 데이터를 재로딩, 데이터 가공, 학습 데이터/테스트 데이터 분할.\n","titanic_df = pd.read_csv(\"titanic_train.csv\")\n","y_titanic_df = titanic_df[\"Survived\"]\n","X_titanic_df = titanic_df.drop('Survived' , axis = 1)\n","X_titanic_df = transform_features(X_titanic_df)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df , test_size=0.20 , random_state=11)\n","\n","lr_clf = LogisticRegression( )\n","\n","lr_clf.fit(X_train, y_train)\n","pred = lr_clf.predict(X_test)\n","get_clf_eval(y_test, pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XikRrLkTtRYD","executionInfo":{"status":"ok","timestamp":1641923866765,"user_tz":-540,"elapsed":20,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d030e5ac-8d1e-4d5f-81f2-046db212df6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬\n","[[104  14]\n"," [ 13  48]]\n","정확도: 0.8492, 정밀도: 0.7742, 재현율: 0.7869\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"code","source":["48 / ( 14 + 48 )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h_cK2tVLudW4","executionInfo":{"status":"ok","timestamp":1641923866765,"user_tz":-540,"elapsed":17,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"18ab592e-53f8-4d74-917d-7f7cb5d353ad"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7741935483870968"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["48 / ( 13 + 48 )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iL2Aj5vmupte","executionInfo":{"status":"ok","timestamp":1641923866765,"user_tz":-540,"elapsed":14,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"4020d5ab-4bf7-4f22-9ec3-9d3ad3450991"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7868852459016393"]},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","source":["### 정밀도/재현율 트레이드오프"],"metadata":{"id":"StyjjW3zvayC"}},{"cell_type":"code","source":["pred_proba = lr_clf.predict_proba(X_test)\n","pred = lr_clf.predict(X_test)\n","print('pred_proba()결과 shape : {0}'.format(pred_proba.shape))\n","print('pred_proba array 에서 앞 3개만 샘플로 추출 \\n:', pred_proba[:3])\n","\n","# 예측 확률 array와 예측 결과값 array를 병합(concatenate)해 예측 확률과 결괏값을 한눈에 확인\n","pred_proba_result = np.concatenate([pred_proba , pred.reshape(-1, 1)] , axis = 1)\n","print('두 개의 class 중에서 더 큰 확률을 클래스 값으로 예측 \\n',pred_proba_result[:3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"exg6rW8evGfV","executionInfo":{"status":"ok","timestamp":1641923866766,"user_tz":-540,"elapsed":13,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"1ed499df-036b-4f77-de91-f83a9fa3796e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["pred_proba()결과 shape : (179, 2)\n","pred_proba array 에서 앞 3개만 샘플로 추출 \n",": [[0.46191519 0.53808481]\n"," [0.878675   0.121325  ]\n"," [0.87716185 0.12283815]]\n","두 개의 class 중에서 더 큰 확률을 클래스 값으로 예측 \n"," [[0.46191519 0.53808481 1.        ]\n"," [0.878675   0.121325   0.        ]\n"," [0.87716185 0.12283815 0.        ]]\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import Binarizer\n","\n","X = [[1, -1 , 2],\n","     [2, 0 , 0],\n","     [0, 1.1, 1.2]]\n","\n","#X의 개별 원소들이 threshold값보다 같거나 작으면 0을, 크면 1을 반환\n","binarizer = Binarizer(threshold=1.1)\n","print(binarizer.fit_transform(X))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v95tai8qyK7_","executionInfo":{"status":"ok","timestamp":1641923866766,"user_tz":-540,"elapsed":11,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"4bf3019c-d008-4aac-c1c1-14407449e703"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 1.]\n"," [1. 0. 0.]\n"," [0. 0. 1.]]\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import Binarizer\n","\n","# Binarizer의 threhold 설정값. 분륜 결정 임곗값임.\n","custom_threshold = 0.5\n","\n","# predict_proba( ) 반환값의 두 번째 칼럼, 즉 Positive 클래스 칼럼 하나만 추출해 Binarizer를 적용\n","pred_proba_1 = pred_proba[:,1].reshape(-1, 1)\n","\n","binarizer = Binarizer(threshold=custom_threshold).fit(pred_proba_1)\n","custom_predict = binarizer.transform(pred_proba_1)\n","\n","get_clf_eval(y_test , custom_predict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ysGnUcyfzOCp","executionInfo":{"status":"ok","timestamp":1641923866766,"user_tz":-540,"elapsed":9,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"46128203-d7a7-406c-e5d1-61588841438e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬\n","[[104  14]\n"," [ 13  48]]\n","정확도: 0.8492, 정밀도: 0.7742, 재현율: 0.7869\n"]}]},{"cell_type":"code","source":["#Binarizer의 threshold 설정값을 0.4로 설정. 즉 분류 결정 임곗값을 0.5에서 0.4로 낮춤\n","custom_threshold = 0.4\n","pred_proba_1 = pred_proba[: ,1].reshape(-1, 1)\n","binarizer = Binarizer(threshold = custom_threshold).fit(pred_proba_1)\n","custom_predict = binarizer.transform(pred_proba_1)\n","\n","get_clf_eval(y_test, custom_predict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qlYkOiBl0IOo","executionInfo":{"status":"ok","timestamp":1641923866766,"user_tz":-540,"elapsed":8,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"08a47627-0aa5-44ad-aa2e-156b13fd4c4b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬\n","[[98 20]\n"," [10 51]]\n","정확도: 0.8324, 정밀도: 0.7183, 재현율: 0.8361\n"]}]},{"cell_type":"code","source":["# 테스트를 수행할 모든 임곗값을 리스트 객체로 저장.\n","thresholds = [0.4 , 0.45, 0.5, 0.55 , 0.60]\n","\n","def get_eval_by_threshold(y_test, pred_proba_c1, thresholds):\n","    #thresholds list객체 내의 값을 차례로 iteration하면서 Evaluation 수행\n","    for custom_threshold in thresholds:\n","        binarizer = Binarizer(threshold = custom_threshold).fit(pred_proba_c1)\n","        custom_predict = binarizer.transform(pred_proba_c1)\n","        print('임곗값:', custom_threshold)\n","        get_clf_eval(y_test, custom_predict)\n","\n","get_eval_by_threshold(y_test, pred_proba[:, 1].reshape(-1, 1) , thresholds )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sxA7NVV4050x","executionInfo":{"status":"ok","timestamp":1641923867256,"user_tz":-540,"elapsed":496,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"c7bc6922-dad9-4a49-9cd2-6662680c9ee1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["임곗값: 0.4\n","오차 행렬\n","[[98 20]\n"," [10 51]]\n","정확도: 0.8324, 정밀도: 0.7183, 재현율: 0.8361\n","임곗값: 0.45\n","오차 행렬\n","[[103  15]\n"," [ 12  49]]\n","정확도: 0.8492, 정밀도: 0.7656, 재현율: 0.8033\n","임곗값: 0.5\n","오차 행렬\n","[[104  14]\n"," [ 13  48]]\n","정확도: 0.8492, 정밀도: 0.7742, 재현율: 0.7869\n","임곗값: 0.55\n","오차 행렬\n","[[109   9]\n"," [ 15  46]]\n","정확도: 0.8659, 정밀도: 0.8364, 재현율: 0.7541\n","임곗값: 0.6\n","오차 행렬\n","[[112   6]\n"," [ 16  45]]\n","정확도: 0.8771, 정밀도: 0.8824, 재현율: 0.7377\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_recall_curve\n","\n","# 레이블 값이 1일 때의 예측 확률을 추출\n","pred_proba_class1 = lr_clf.predict_proba(X_test)[: , 1]\n","\n","# 실제값 데이터 세트와 레이블 값이 1일 때의 예측 확률을 precision_recall_curve 인자로 입력\n","precisions, recalls , thresholds = precision_recall_curve(y_test, pred_proba_class1 )\n","print(\"반환된 분류 결정 임곗값 배열의 Shape:\", thresholds.shape)\n","\n","#반환된 임계값 배열 로우가 147건이므로 샘플로 10건만 추출하되, 임곅값을 15 step으로 추출.\n","thr_index = np.arange(0, thresholds.shape[0] , 15)\n","print(\"샘플 추출을 위한 임계값 배열의 index 10개:\", thr_index)\n","print(\"샘플용 10개의 임곗값: \", np.round(thresholds[thr_index], 2))\n","\n","#15 step 단위로 추출된 임계값에 따른 정밀도와 재현율 값\n","print(\"샘플 임계값 별 정밀도: \" , np.round(precisions[thr_index] , 3))\n","print(\"샘플 임계값 별 재현율: \" , np.round(recalls[thr_index], 3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lHCQUoub2CVl","executionInfo":{"status":"ok","timestamp":1641923867256,"user_tz":-540,"elapsed":23,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"0955c74a-6a80-46da-bc4d-cac528b049e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["반환된 분류 결정 임곗값 배열의 Shape: (143,)\n","샘플 추출을 위한 임계값 배열의 index 10개: [  0  15  30  45  60  75  90 105 120 135]\n","샘플용 10개의 임곗값:  [0.1  0.12 0.14 0.19 0.28 0.4  0.56 0.67 0.82 0.95]\n","샘플 임계값 별 정밀도:  [0.389 0.44  0.466 0.539 0.647 0.729 0.836 0.949 0.958 1.   ]\n","샘플 임계값 별 재현율:  [1.    0.967 0.902 0.902 0.902 0.836 0.754 0.607 0.377 0.148]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker\n","%matplotlib inline\n","\n","def precision_recall_curve_plot(y_test, pred_proba_c1):\n","    #threshold nadarray와 이 threshold에 따른 정밀도, 재현율 ndarray 추출.\n","    precisions, recalls, thresholds = precision_recall_curve( y_test , pred_proba_c1 )\n","\n","    #X축을 threshold값으로, Y축은 정밀도, 재현율 값으로 각각 Plot 수행. 정밀도는 점선으로 표시\n","    plt.figure( figsize=(8,6) )\n","    threshold_boundary = thresholds.shape[0]\n","    plt.plot(thresholds, precisions[0:threshold_boundary] , linestyle='--' , label='precision')\n","    plt.plot(thresholds, recalls[0:threshold_boundary], label ='recall')\n","\n","    #threshold 값 X 축의 Scale을 0.1 단위로 변경\n","    start, end = plt.xlim( )\n","    plt.xticks(np.round(np.arange(start, end , 0.1), 2))\n","\n","    #x축, y축 label과 legend, 그리고 grid 설정\n","    plt.xlabel('Threshold value'); plt.ylabel('Precision and Recall value')\n","    plt.legend();plt.grid()\n","    plt.show( )\n","\n","precision_recall_curve_plot( y_test, lr_clf.predict_proba(X_test)[: , 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"H9Fu6AuJ5Skv","executionInfo":{"status":"ok","timestamp":1641923867257,"user_tz":-540,"elapsed":21,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"929647c5-21c5-4e60-d44d-97ac787119fe"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["### 정밀도와 재현율의 맹점"],"metadata":{"id":"hcxVWjoo8hpD"}},{"cell_type":"markdown","source":["## 3-4 F1 스코어"],"metadata":{"id":"wiY65Gia8kgx"}},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","f1 = f1_score(y_test, pred)\n","print('F1 스코어: {0:.4f}'.format(f1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lIySmCmx5ds5","executionInfo":{"status":"ok","timestamp":1641923867257,"user_tz":-540,"elapsed":18,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d9844ec9-d541-4e37-ae29-af29642af92a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["F1 스코어: 0.7805\n"]}]},{"cell_type":"code","source":["def get_clf_eval(y_test, pred):\n","    confusion = confusion_matrix( y_test , pred )\n","    accuracy = accuracy_score( y_test , pred )\n","    precision = precision_score( y_test , pred )\n","    recall = recall_score(y_test , pred )\n","\n","    #F1 스코어 추가\n","    f1 = f1_score(y_test, pred)\n","    print('오차 행렬')\n","    print(confusion)\n","\n","    # f1 score print 추가\n","    print('정확도: {0:.4f}, 정밀도: {1:.4f}, 재현율: {2:.4f}, F1:{3:.4f}'.format(accuracy, precision, recall, f1))\n","\n","thresholds = [ 0.4 , 0.45 , 0.50 , 0.55 , 0.60 ]\n","pred_proba = lr_clf.predict_proba(X_test)\n","get_eval_by_threshold(y_test, pred_proba[:, 1].reshape(-1,1) , thresholds )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qZbblYeO9A3k","executionInfo":{"status":"ok","timestamp":1641923867258,"user_tz":-540,"elapsed":17,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"418810ac-3f2d-4e27-e79c-9dfdf3ab41db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["임곗값: 0.4\n","오차 행렬\n","[[98 20]\n"," [10 51]]\n","정확도: 0.8324, 정밀도: 0.7183, 재현율: 0.8361, F1:0.7727\n","임곗값: 0.45\n","오차 행렬\n","[[103  15]\n"," [ 12  49]]\n","정확도: 0.8492, 정밀도: 0.7656, 재현율: 0.8033, F1:0.7840\n","임곗값: 0.5\n","오차 행렬\n","[[104  14]\n"," [ 13  48]]\n","정확도: 0.8492, 정밀도: 0.7742, 재현율: 0.7869, F1:0.7805\n","임곗값: 0.55\n","오차 행렬\n","[[109   9]\n"," [ 15  46]]\n","정확도: 0.8659, 정밀도: 0.8364, 재현율: 0.7541, F1:0.7931\n","임곗값: 0.6\n","오차 행렬\n","[[112   6]\n"," [ 16  45]]\n","정확도: 0.8771, 정밀도: 0.8824, 재현율: 0.7377, F1:0.8036\n"]}]},{"cell_type":"markdown","source":["## 3-5 ROC 곡선과 AUC"],"metadata":{"id":"5vVDJn9AAlby"}},{"cell_type":"code","source":["from sklearn.metrics import roc_curve\n","\n","# 레이블 값이 1일때의 예측 확률을 추출\n","pred_proba_class1 = lr_clf.predict_proba(X_test)[:, 1]\n","\n","fprs , tprs , thresholds = roc_curve(y_test, pred_proba_class1)\n","#반환된 임곗값 배열에서 샘플로 데이터를 추출하되, 임곅값을 5 step으로 추출.\n","#thresholds[0]은 max(예측확률) + 1로 임의 설정됨. 이를 제외하기 위해 np.arange는 1부터 시작\n","thr_index = np.arange(1, thresholds.shape[0], 5)\n","print('샘플 추출을 위한 임곗값 배열의 index:', thr_index)\n","print('샘플 index로 추출한 임곗값: ', np.round(thresholds[thr_index] , 3))\n","\n","# 5 step 단위로 추출된 임계값에 따른 FPR, TPR 값\n","print('샘플 임곗값별 FPR: ', np.round(fprs[thr_index] , 3))\n","print('샘플 임곗값별 TPR: ', np.round(tprs[thr_index] , 3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":244},"id":"DP_SVaev--nk","executionInfo":{"status":"error","timestamp":1642424481735,"user_tz":-540,"elapsed":982,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"01f86fc2-4c94-4193-85dc-031e34898f50"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-27b6df881735>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# 레이블 값이 1일때의 예측 확률을 추출\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mpred_proba_class1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlr_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mfprs\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mtprs\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mthresholds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_curve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_proba_class1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'lr_clf' is not defined"]}]},{"cell_type":"code","source":["def roc_curve_plot(y_test , pred_proba_c1):\n","    # 임곗값에 따는 FPR, TPR 값을 반환 받음.\n","    fprs, tprs, thresholds = roc_curve(y_test, pred_proba_c1)\n","    #ROC 곡선을 그래프로 그림\n","    plt.plot(fprs, tprs, label='ROC')\n","    #가운데 대각선 직선을 그림.\n","    plt.plot([0,1] , [0,1], 'k--', label = 'Random')\n","\n","    #FPR X 축의 Scale을 0.1 단위로 변경, X, Y축 명 설정 등\n","    start, end = plt.xlim()\n","    plt.xticks( np.round(np.arange(start , end , 0.1) , 2 ))\n","    plt.xlabel('FPR( 1 - Sensitivity )'); plt.ylabel('TPR ( Recall )')\n","    plt.legend()\n","\n","roc_curve_plot(y_test , pred_proba[:, 1] )"],"metadata":{"id":"miRAU9AASdVU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","pred_proba = lr_clf.predict_proba(X_test)[: , 1]\n","roc_score = roc_auc_score(y_test , pred_proba)\n","print('ROC AUC 값: {0:.4f}'.format(roc_score))"],"metadata":{"id":"DOZzEYGAUOzn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_clf_eval(y_test , pred=None , pred_proba=None):\n","    confusion = confusion_matrix(y_test , pred)\n","    accuracy = accuracy_score(y_test , pred)\n","    precision = precision_score(y_test , pred)\n","    recall = recall_score(y_test , pred)\n","    f1 = f1_score(y_test,pred)\n","    #ROC-AUC 추가\n","    roc_auc = roc_auc_score(y_test , pred_proba)\n","    print('오차 행렬')\n","    print('confusion')\n","    #ROC-AUC print 추가\n","    print('정확도: {0:.4f}, 정밀도: {1:.4f}, 재현율: {2:.4f}, \\\n","    F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy , precision, recall , f1 , roc_auc))"],"metadata":{"id":"phRa4oLHUxb_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 3-6 피마 인디언 당뇨병 예측"],"metadata":{"id":"KCrCkWA0V5AV"}},{"cell_type":"code","source":["%cd /content/drive/MyDrive/AI/파이썬 머신러닝 완벽가이드/Pima Indian"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H0HGHB9HXT0E","executionInfo":{"status":"ok","timestamp":1641925136394,"user_tz":-540,"elapsed":285,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"7bb568dc-0bb7-425f-e474-6345c64d3b37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AI/파이썬 머신러닝 완벽가이드/Pima Indian\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\n","from sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","\n","diabetes_data = pd.read_csv('diabetes.csv')\n","print(diabetes_data['Outcome'].value_counts( ))\n","diabetes_data.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":198},"id":"MxMeN4-hV1UX","executionInfo":{"status":"ok","timestamp":1641925177061,"user_tz":-540,"elapsed":473,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"5a674549-3cf6-4d02-cf30-173b1839eca6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0    500\n","1    268\n","Name: Outcome, dtype: int64\n"]},{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-daaa274f-6f2b-478f-aca3-c035204ce5be\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-daaa274f-6f2b-478f-aca3-c035204ce5be')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-daaa274f-6f2b-478f-aca3-c035204ce5be button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-daaa274f-6f2b-478f-aca3-c035204ce5be');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   Pregnancies  Glucose  BloodPressure  ...  DiabetesPedigreeFunction  Age  Outcome\n","0            6      148             72  ...                     0.627   50        1\n","1            1       85             66  ...                     0.351   31        0\n","2            8      183             64  ...                     0.672   32        1\n","\n","[3 rows x 9 columns]"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["diabetes_data.info( )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xbXci_LgXerB","executionInfo":{"status":"ok","timestamp":1641925281603,"user_tz":-540,"elapsed":409,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"dec47b98-c7d4-4106-88ac-13d359b6f552"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 768 entries, 0 to 767\n","Data columns (total 9 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   Pregnancies               768 non-null    int64  \n"," 1   Glucose                   768 non-null    int64  \n"," 2   BloodPressure             768 non-null    int64  \n"," 3   SkinThickness             768 non-null    int64  \n"," 4   Insulin                   768 non-null    int64  \n"," 5   BMI                       768 non-null    float64\n"," 6   DiabetesPedigreeFunction  768 non-null    float64\n"," 7   Age                       768 non-null    int64  \n"," 8   Outcome                   768 non-null    int64  \n","dtypes: float64(2), int64(7)\n","memory usage: 54.1 KB\n"]}]},{"cell_type":"code","source":["#피처 데이터 세트 X, 레이블 데이터 세트 y를 추출.\n","#맨 끝이 Outcome 칼럼으로 레이블 값임. 칼럼 위치 -1을 이용해 추출\n","X = diabetes_data.iloc[:, :-1]\n","y = diabetes_data.iloc[:, -1]\n","\n","X_train, X_test , y_train, y_test = train_test_split(X,y, test_size = 0.3 , random_state = 156, stratify=y)\n","\n","#로지스틱 회귀로 학습, 예측 및 평가 수행.\n","lr_clf = LogisticRegression()\n","lr_clf.fit(X_train, y_train)\n","pred = lr_clf.predict(X_test)\n","pred_proba = lr_clf.predict_proba(X_test)[:, 1]\n","\n","get_clf_eval(y_test, pred, pred_proba)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cpxQHNgCX4Of","executionInfo":{"status":"ok","timestamp":1641925622587,"user_tz":-540,"elapsed":426,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"5f974ab1-6cce-4da3-d223-d6b02d8416cb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬\n","confusion\n","정확도: 0.8052, 정밀도: 0.7727, 재현율: 0.6296,     F1: 0.6939, AUC:0.8165\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"code","source":["pred_proba_c1 = lr_clf.predict_proba(X_test)[: , 1]\n","precision_recall_curve_plot(y_test , pred_proba_c1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"0P04w_hMZHWr","executionInfo":{"status":"ok","timestamp":1641925731045,"user_tz":-540,"elapsed":450,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"e4b9f0d4-8f64-49af-9de0-95bb4da49888"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["diabetes_data.describe( )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"id":"OSc6kknJZl7z","executionInfo":{"status":"ok","timestamp":1641925774741,"user_tz":-540,"elapsed":306,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"8bfb1f77-e9d0-429c-9fa7-d2a5cf5b6133"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-0ff44f40-fa09-4928-b866-d772df2e7650\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.845052</td>\n","      <td>120.894531</td>\n","      <td>69.105469</td>\n","      <td>20.536458</td>\n","      <td>79.799479</td>\n","      <td>31.992578</td>\n","      <td>0.471876</td>\n","      <td>33.240885</td>\n","      <td>0.348958</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3.369578</td>\n","      <td>31.972618</td>\n","      <td>19.355807</td>\n","      <td>15.952218</td>\n","      <td>115.244002</td>\n","      <td>7.884160</td>\n","      <td>0.331329</td>\n","      <td>11.760232</td>\n","      <td>0.476951</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.078000</td>\n","      <td>21.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>99.000000</td>\n","      <td>62.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>27.300000</td>\n","      <td>0.243750</td>\n","      <td>24.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.000000</td>\n","      <td>117.000000</td>\n","      <td>72.000000</td>\n","      <td>23.000000</td>\n","      <td>30.500000</td>\n","      <td>32.000000</td>\n","      <td>0.372500</td>\n","      <td>29.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.000000</td>\n","      <td>140.250000</td>\n","      <td>80.000000</td>\n","      <td>32.000000</td>\n","      <td>127.250000</td>\n","      <td>36.600000</td>\n","      <td>0.626250</td>\n","      <td>41.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>17.000000</td>\n","      <td>199.000000</td>\n","      <td>122.000000</td>\n","      <td>99.000000</td>\n","      <td>846.000000</td>\n","      <td>67.100000</td>\n","      <td>2.420000</td>\n","      <td>81.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ff44f40-fa09-4928-b866-d772df2e7650')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0ff44f40-fa09-4928-b866-d772df2e7650 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0ff44f40-fa09-4928-b866-d772df2e7650');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       Pregnancies     Glucose  ...         Age     Outcome\n","count   768.000000  768.000000  ...  768.000000  768.000000\n","mean      3.845052  120.894531  ...   33.240885    0.348958\n","std       3.369578   31.972618  ...   11.760232    0.476951\n","min       0.000000    0.000000  ...   21.000000    0.000000\n","25%       1.000000   99.000000  ...   24.000000    0.000000\n","50%       3.000000  117.000000  ...   29.000000    0.000000\n","75%       6.000000  140.250000  ...   41.000000    1.000000\n","max      17.000000  199.000000  ...   81.000000    1.000000\n","\n","[8 rows x 9 columns]"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["plt.hist(diabetes_data['Glucose'] , bins = 10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"KgdqfWfrZwd6","executionInfo":{"status":"ok","timestamp":1641925841447,"user_tz":-540,"elapsed":350,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"2951d23e-9326-4476-b033-3ec36dd32a05"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([  5.,   0.,   4.,  32., 156., 211., 163.,  95.,  56.,  46.]),\n"," array([  0. ,  19.9,  39.8,  59.7,  79.6,  99.5, 119.4, 139.3, 159.2,\n","        179.1, 199. ]),\n"," <a list of 10 Patch objects>)"]},"metadata":{},"execution_count":79},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#0값을 검사할 피처 명 리스트\n","zero_features = ['Glucose' , 'BloodPressure' , 'SkinThickness' , 'Insulin' , 'BMI']\n","\n","#전체 데이터 건수\n","total_count = diabetes_data['Glucose'].count()\n","\n","#피처별로 반복하면서 데이터 값이 0인 데이터 건수를 추출하고, 퍼센트 꼐산\n","for feature in zero_features:\n","    zero_count = diabetes_data[diabetes_data[feature] == 0][feature].count()\n","    print(('{0} 0 건수는 {1}, 퍼센트는 {2:.2f} %'.format(feature, zero_count, 100* zero_count/total_count )))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ejTfhWWTaA3P","executionInfo":{"status":"ok","timestamp":1641926099967,"user_tz":-540,"elapsed":354,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"97f3efec-f4a0-4c12-9181-dddd3f701b6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Glucose 0 건수는 5, 퍼센트는 0.65 %\n","BloodPressure 0 건수는 35, 퍼센트는 4.56 %\n","SkinThickness 0 건수는 227, 퍼센트는 29.56 %\n","Insulin 0 건수는 374, 퍼센트는 48.70 %\n","BMI 0 건수는 11, 퍼센트는 1.43 %\n"]}]},{"cell_type":"code","source":["#zero_features 리스트 내부에 저장된 개별 피처들에 대해서 0값을 평균 값으로 대체\n","mean_zero_features = diabetes_data[zero_features].mean()\n","diabetes_data[zero_features] = diabetes_data[zero_features].replace( 0 , mean_zero_features )"],"metadata":{"id":"NqG2NqrSa9cD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = diabetes_data.iloc[:, :-1]\n","y = diabetes_data.iloc[:, -1]\n","\n","#StandardScaler 클래스를 이용해 피처 데이터 세트에 일괄적으로 스케일링 적용\n","scaler = StandardScaler( )\n","X_scaled = scaler.fit_transform(X)\n","\n","X_train , X_test , y_train , y_test = train_test_split(X_scaled, y, test_size = 0.2 , random_state = 156, stratify = y)\n","\n","#로지스틱 회귀로 학습, 예측 및 평가 수행.\n","lr_clf = LogisticRegression( )\n","lr_clf.fit(X_train, y_train)\n","pred = lr_clf.predict(X_test)\n","pred_proba = lr_clf.predict_proba(X_test)[:,1]\n","\n","get_clf_eval(y_test, pred, pred_proba)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pWWCP3g7bZ3g","executionInfo":{"status":"ok","timestamp":1641927705780,"user_tz":-540,"elapsed":309,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"f390cc72-3297-4d12-f245-a1baceebd97c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬\n","confusion\n","정확도: 0.7987, 정밀도: 0.7674, 재현율: 0.6111,     F1: 0.6804, AUC:0.8433\n"]}]},{"cell_type":"code","source":["thresholds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgPMTnVkeE8m","executionInfo":{"status":"ok","timestamp":1641927459535,"user_tz":-540,"elapsed":588,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d6385535-61cc-4fb9-8af9-c2b83c77c330"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.3, 0.33, 0.36, 0.39, 0.42, 0.45, 0.48, 0.5]"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":[""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":172},"id":"faXJdzOIh-Ic","executionInfo":{"status":"error","timestamp":1641927969502,"user_tz":-540,"elapsed":297,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"3e13cb8f-ed38-402d-b7fa-66532004a738"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-115-9625ea4d1fed>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpred_proba\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'isna'"]}]},{"cell_type":"code","source":["def get_eval_by_threshold(y_test, pred_proba_c1, thresholds):\n","    #thresholds list객체 내의 값을 차례로 iteration하면서 Evaluation 수행\n","    for custom_threshold in thresholds:\n","        binarizer = Binarizer(threshold = custom_threshold).fit(pred_proba_c1)\n","        custom_predict = binarizer.transform(pred_proba_c1)\n","        print('임곗값:', custom_threshold)\n","        #print(custom_predict)\n","        get_clf_eval(y_test, custom_predict, pred_proba_c1)"],"metadata":{"id":"ofodV7aMijRq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["thresholds = [0.3 , 0.33, 0.36 , 0.39, 0.42 , 0.45 , 0.48 , 0.5]\n","pred_preoba = lr_clf.predict_proba(X_test)\n","get_eval_by_threshold(y_test , pred_proba.reshape(-1,1) , thresholds )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F2-ljgmDck-M","executionInfo":{"status":"ok","timestamp":1641928167804,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"0dc3d04b-9f4c-40e6-a3be-3d299684c881"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["임곗값: 0.3\n","오차 행렬\n","confusion\n","정확도: 0.7143, 정밀도: 0.5658, 재현율: 0.7963,     F1: 0.6615, AUC:0.8433\n","임곗값: 0.33\n","오차 행렬\n","confusion\n","정확도: 0.7403, 정밀도: 0.6000, 재현율: 0.7778,     F1: 0.6774, AUC:0.8433\n","임곗값: 0.36\n","오차 행렬\n","confusion\n","정확도: 0.7468, 정밀도: 0.6190, 재현율: 0.7222,     F1: 0.6667, AUC:0.8433\n","임곗값: 0.39\n","오차 행렬\n","confusion\n","정확도: 0.7532, 정밀도: 0.6333, 재현율: 0.7037,     F1: 0.6667, AUC:0.8433\n","임곗값: 0.42\n","오차 행렬\n","confusion\n","정확도: 0.7792, 정밀도: 0.6923, 재현율: 0.6667,     F1: 0.6792, AUC:0.8433\n","임곗값: 0.45\n","오차 행렬\n","confusion\n","정확도: 0.7857, 정밀도: 0.7059, 재현율: 0.6667,     F1: 0.6857, AUC:0.8433\n","임곗값: 0.48\n","오차 행렬\n","confusion\n","정확도: 0.7987, 정밀도: 0.7447, 재현율: 0.6481,     F1: 0.6931, AUC:0.8433\n","임곗값: 0.5\n","오차 행렬\n","confusion\n","정확도: 0.7987, 정밀도: 0.7674, 재현율: 0.6111,     F1: 0.6804, AUC:0.8433\n"]}]},{"cell_type":"code","source":["#임곗값을 0.48로 설정한 Binarizer 생성\n","binarizer = Binarizer(threshold=0.48)\n","#위에서 구한 lr_clf의 predict_proba() 예측 확률 array에서 1에 해당하는 칼럼값을 Binarizer 변환.\n","pred_th_048 = binarizer.fit_transform(pred_proba.reshape(-1,1))\n","get_clf_eval(y_test, pred_th_048, pred_proba)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t13TU7P2dXy_","executionInfo":{"status":"ok","timestamp":1641928065010,"user_tz":-540,"elapsed":335,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"1c8e0c0b-0d7d-49ce-ed1e-7a2858e08021"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬\n","confusion\n","정확도: 0.7987, 정밀도: 0.7447, 재현율: 0.6481,     F1: 0.6931, AUC:0.8433\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"RC584v_yfHUv"},"execution_count":null,"outputs":[]}]}