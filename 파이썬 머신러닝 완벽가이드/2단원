{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"2단원","provenance":[],"collapsed_sections":["d8cUfHScZTiO","6XFbj4qQZYjO","vIBcEPsQr-Jc","LlLuSYupu_r1","S3V3VUyp5Ywo","yWcP3qNL5f4d","p0yTk_Hw96oP","XMe-vYuJkefv","Q1JMyrV00NVP","14LAhVMG03lO","iq3St0jv8CTW","LetwIIXfCumI","3SzAbc07DtAH"],"mount_file_id":"1QQsikT3nK_2_-KLPENtzNjDfUrUbOFAp","authorship_tag":"ABX9TyNzjyhtYerniOUC77zNhIQo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 2 - 사이킷런으로 시작하는 머신러닝"],"metadata":{"id":"0muZdajxZN5l"}},{"cell_type":"markdown","source":["## 2-1 사이킷런 소개와 특징"],"metadata":{"id":"d8cUfHScZTiO"}},{"cell_type":"code","source":["import sklearn\n","print(sklearn.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Miws6gKeaEre","executionInfo":{"status":"ok","timestamp":1641405799744,"user_tz":-540,"elapsed":1232,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"2a7212eb-d56c-44f1-c5f3-48a1eebadb3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0.1\n"]}]},{"cell_type":"markdown","source":["## 2-2 첫 번째 머신러닝 만들어 보기 - 붓꽃 품종 예측하기"],"metadata":{"id":"6XFbj4qQZYjO"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"R5QXSQD-ZJ-V"},"outputs":[],"source":["from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","source":["import pandas as pd\n","\n","#붓꽃 데이터 세트를 로딩합니다.\n","iris = load_iris( )\n","\n","#iris,data는 Iris 데이터 세트에서 피처(feature)만으로 된 데이터를 numpy로 가지고 있습니다.\n","iris_data = iris.data\n","\n","#iris.target은 붓꽃 데이터 세트에서 레이블(결정 값) 데이터를 numpy로 가지고 있습니다.\n","iris_label = iris.target\n","print('iris target값:', iris_label)\n","print('iris target명:', iris.target_names)\n","\n","#붓꽃 데이터 세트를 자세히 보기 위해 DataFrame으로 변환합니다.\n","iris_df = pd.DataFrame(data = iris_data, columns=iris.feature_names )\n","iris_df['label'] = iris.target\n","iris_df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":252},"id":"f2-rYq4Vas2J","executionInfo":{"status":"ok","timestamp":1641409867992,"user_tz":-540,"elapsed":474,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"03e3df68-f01f-429f-b380-ffd6e856a56b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["iris target값: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n","iris target명: ['setosa' 'versicolor' 'virginica']\n"]},{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-5a6db6fa-1d3e-43f1-aa45-acd3883eafad\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a6db6fa-1d3e-43f1-aa45-acd3883eafad')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5a6db6fa-1d3e-43f1-aa45-acd3883eafad button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5a6db6fa-1d3e-43f1-aa45-acd3883eafad');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   sepal length (cm)  sepal width (cm)  ...  petal width (cm)  label\n","0                5.1               3.5  ...               0.2      0\n","1                4.9               3.0  ...               0.2      0\n","2                4.7               3.2  ...               0.2      0\n","\n","[3 rows x 5 columns]"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["X_train, X_test, y_train , y_test = train_test_split(iris_data, iris_label, test_size=0.2 , random_state=11)"],"metadata":{"id":"PLmRLX6fayI-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#DecisionTreeClassifier 객체 생성\n","dt_clf = DecisionTreeClassifier(random_state = 11)"],"metadata":{"id":"enxiRF7HqXvw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#학습 수행\n","dt_clf.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vz8uW4UHrNLZ","executionInfo":{"status":"ok","timestamp":1641410292875,"user_tz":-540,"elapsed":454,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"3cb05793-5566-493d-fc41-e399abba52b4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(random_state=11)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#학습이 완료된 DecisionTreeClassifier 객체에서 테스트 데이터 세트로 예측 수행.\n","pred = dt_clf.predict(X_test)"],"metadata":{"id":"iRIs9fswrWRB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","print('예측 정확도: {0:.4f}'.format(accuracy_score(y_test, pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g1190z1Grl19","executionInfo":{"status":"ok","timestamp":1641410438122,"user_tz":-540,"elapsed":451,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"dc144cc9-6b69-41f9-b50a-358bf7451538"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["예측 정확도: 0.9333\n"]}]},{"cell_type":"markdown","source":["## 2-3 사이킷런의 기반 프레임워크 익히기"],"metadata":{"id":"vIBcEPsQr-Jc"}},{"cell_type":"markdown","source":["### Estimator 이해 및 fit(), predict()메서드"],"metadata":{"id":"4IsDHe4GteeK"}},{"cell_type":"markdown","source":["### 사이킷런의 주요 모듈"],"metadata":{"id":"5v5imYoluVta"}},{"cell_type":"markdown","source":["### 내장된 예제 데이터 세트"],"metadata":{"id":"LlLuSYupu_r1"}},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","\n","iris_data = load_iris()\n","print(type(iris_data))"],"metadata":{"id":"yw1w71cOr5yj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641798844099,"user_tz":-540,"elapsed":1143,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"d9b62043-9e4a-4eea-cdd6-a6635d130a84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'sklearn.utils.Bunch'>\n"]}]},{"cell_type":"code","source":["keys = iris_data.keys()\n","print('붓꽃 데이타 세트의 키들:', keys)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FKORGTvQ1gUT","executionInfo":{"status":"ok","timestamp":1641799057751,"user_tz":-540,"elapsed":321,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"41d50d26-4fc2-46e2-aee6-2c2e34ddfd6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["붓꽃 데이타 세트의 키들: dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename', 'data_module'])\n"]}]},{"cell_type":"code","source":["print(\"\\n feature_names 의 type:\" , type(iris_data.feature_names))\n","print(' feature_names 의 shape:', len(iris_data.feature_names))\n","print(iris_data.feature_names)\n","\n","print('\\n target_names의 type:', type(iris_data.target_names))\n","print(' target_names의 shape:', len(iris_data.target_names))\n","print(iris_data.target_names)\n","\n","print(\"\\n data의 type의: \", type(iris_data.data))\n","print(\" data의 shape:\", iris_data.data.shape)\n","print(iris_data['data'])\n","\n","print(\"\\n target 의 type:\", type(iris_data.target))\n","print(' target 의 shape:', iris_data.target.shape)\n","print(iris_data.target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OA3AFLZ72XvN","executionInfo":{"status":"ok","timestamp":1641799793089,"user_tz":-540,"elapsed":354,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"05b4b97f-fe72-47a2-c5d5-a3c401cbcbae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," feature_names 의 type: <class 'list'>\n"," feature_names 의 shape: 4\n","['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n","\n"," target_names의 type: <class 'numpy.ndarray'>\n"," target_names의 shape: 3\n","['setosa' 'versicolor' 'virginica']\n","\n"," data의 type의:  <class 'numpy.ndarray'>\n"," data의 shape: (150, 4)\n","[[5.1 3.5 1.4 0.2]\n"," [4.9 3.  1.4 0.2]\n"," [4.7 3.2 1.3 0.2]\n"," [4.6 3.1 1.5 0.2]\n"," [5.  3.6 1.4 0.2]\n"," [5.4 3.9 1.7 0.4]\n"," [4.6 3.4 1.4 0.3]\n"," [5.  3.4 1.5 0.2]\n"," [4.4 2.9 1.4 0.2]\n"," [4.9 3.1 1.5 0.1]\n"," [5.4 3.7 1.5 0.2]\n"," [4.8 3.4 1.6 0.2]\n"," [4.8 3.  1.4 0.1]\n"," [4.3 3.  1.1 0.1]\n"," [5.8 4.  1.2 0.2]\n"," [5.7 4.4 1.5 0.4]\n"," [5.4 3.9 1.3 0.4]\n"," [5.1 3.5 1.4 0.3]\n"," [5.7 3.8 1.7 0.3]\n"," [5.1 3.8 1.5 0.3]\n"," [5.4 3.4 1.7 0.2]\n"," [5.1 3.7 1.5 0.4]\n"," [4.6 3.6 1.  0.2]\n"," [5.1 3.3 1.7 0.5]\n"," [4.8 3.4 1.9 0.2]\n"," [5.  3.  1.6 0.2]\n"," [5.  3.4 1.6 0.4]\n"," [5.2 3.5 1.5 0.2]\n"," [5.2 3.4 1.4 0.2]\n"," [4.7 3.2 1.6 0.2]\n"," [4.8 3.1 1.6 0.2]\n"," [5.4 3.4 1.5 0.4]\n"," [5.2 4.1 1.5 0.1]\n"," [5.5 4.2 1.4 0.2]\n"," [4.9 3.1 1.5 0.2]\n"," [5.  3.2 1.2 0.2]\n"," [5.5 3.5 1.3 0.2]\n"," [4.9 3.6 1.4 0.1]\n"," [4.4 3.  1.3 0.2]\n"," [5.1 3.4 1.5 0.2]\n"," [5.  3.5 1.3 0.3]\n"," [4.5 2.3 1.3 0.3]\n"," [4.4 3.2 1.3 0.2]\n"," [5.  3.5 1.6 0.6]\n"," [5.1 3.8 1.9 0.4]\n"," [4.8 3.  1.4 0.3]\n"," [5.1 3.8 1.6 0.2]\n"," [4.6 3.2 1.4 0.2]\n"," [5.3 3.7 1.5 0.2]\n"," [5.  3.3 1.4 0.2]\n"," [7.  3.2 4.7 1.4]\n"," [6.4 3.2 4.5 1.5]\n"," [6.9 3.1 4.9 1.5]\n"," [5.5 2.3 4.  1.3]\n"," [6.5 2.8 4.6 1.5]\n"," [5.7 2.8 4.5 1.3]\n"," [6.3 3.3 4.7 1.6]\n"," [4.9 2.4 3.3 1. ]\n"," [6.6 2.9 4.6 1.3]\n"," [5.2 2.7 3.9 1.4]\n"," [5.  2.  3.5 1. ]\n"," [5.9 3.  4.2 1.5]\n"," [6.  2.2 4.  1. ]\n"," [6.1 2.9 4.7 1.4]\n"," [5.6 2.9 3.6 1.3]\n"," [6.7 3.1 4.4 1.4]\n"," [5.6 3.  4.5 1.5]\n"," [5.8 2.7 4.1 1. ]\n"," [6.2 2.2 4.5 1.5]\n"," [5.6 2.5 3.9 1.1]\n"," [5.9 3.2 4.8 1.8]\n"," [6.1 2.8 4.  1.3]\n"," [6.3 2.5 4.9 1.5]\n"," [6.1 2.8 4.7 1.2]\n"," [6.4 2.9 4.3 1.3]\n"," [6.6 3.  4.4 1.4]\n"," [6.8 2.8 4.8 1.4]\n"," [6.7 3.  5.  1.7]\n"," [6.  2.9 4.5 1.5]\n"," [5.7 2.6 3.5 1. ]\n"," [5.5 2.4 3.8 1.1]\n"," [5.5 2.4 3.7 1. ]\n"," [5.8 2.7 3.9 1.2]\n"," [6.  2.7 5.1 1.6]\n"," [5.4 3.  4.5 1.5]\n"," [6.  3.4 4.5 1.6]\n"," [6.7 3.1 4.7 1.5]\n"," [6.3 2.3 4.4 1.3]\n"," [5.6 3.  4.1 1.3]\n"," [5.5 2.5 4.  1.3]\n"," [5.5 2.6 4.4 1.2]\n"," [6.1 3.  4.6 1.4]\n"," [5.8 2.6 4.  1.2]\n"," [5.  2.3 3.3 1. ]\n"," [5.6 2.7 4.2 1.3]\n"," [5.7 3.  4.2 1.2]\n"," [5.7 2.9 4.2 1.3]\n"," [6.2 2.9 4.3 1.3]\n"," [5.1 2.5 3.  1.1]\n"," [5.7 2.8 4.1 1.3]\n"," [6.3 3.3 6.  2.5]\n"," [5.8 2.7 5.1 1.9]\n"," [7.1 3.  5.9 2.1]\n"," [6.3 2.9 5.6 1.8]\n"," [6.5 3.  5.8 2.2]\n"," [7.6 3.  6.6 2.1]\n"," [4.9 2.5 4.5 1.7]\n"," [7.3 2.9 6.3 1.8]\n"," [6.7 2.5 5.8 1.8]\n"," [7.2 3.6 6.1 2.5]\n"," [6.5 3.2 5.1 2. ]\n"," [6.4 2.7 5.3 1.9]\n"," [6.8 3.  5.5 2.1]\n"," [5.7 2.5 5.  2. ]\n"," [5.8 2.8 5.1 2.4]\n"," [6.4 3.2 5.3 2.3]\n"," [6.5 3.  5.5 1.8]\n"," [7.7 3.8 6.7 2.2]\n"," [7.7 2.6 6.9 2.3]\n"," [6.  2.2 5.  1.5]\n"," [6.9 3.2 5.7 2.3]\n"," [5.6 2.8 4.9 2. ]\n"," [7.7 2.8 6.7 2. ]\n"," [6.3 2.7 4.9 1.8]\n"," [6.7 3.3 5.7 2.1]\n"," [7.2 3.2 6.  1.8]\n"," [6.2 2.8 4.8 1.8]\n"," [6.1 3.  4.9 1.8]\n"," [6.4 2.8 5.6 2.1]\n"," [7.2 3.  5.8 1.6]\n"," [7.4 2.8 6.1 1.9]\n"," [7.9 3.8 6.4 2. ]\n"," [6.4 2.8 5.6 2.2]\n"," [6.3 2.8 5.1 1.5]\n"," [6.1 2.6 5.6 1.4]\n"," [7.7 3.  6.1 2.3]\n"," [6.3 3.4 5.6 2.4]\n"," [6.4 3.1 5.5 1.8]\n"," [6.  3.  4.8 1.8]\n"," [6.9 3.1 5.4 2.1]\n"," [6.7 3.1 5.6 2.4]\n"," [6.9 3.1 5.1 2.3]\n"," [5.8 2.7 5.1 1.9]\n"," [6.8 3.2 5.9 2.3]\n"," [6.7 3.3 5.7 2.5]\n"," [6.7 3.  5.2 2.3]\n"," [6.3 2.5 5.  1.9]\n"," [6.5 3.  5.2 2. ]\n"," [6.2 3.4 5.4 2.3]\n"," [5.9 3.  5.1 1.8]]\n","\n"," target 의 type: <class 'numpy.ndarray'>\n"," target 의 shape: (150,)\n","[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n"]}]},{"cell_type":"markdown","source":["## 2-4 Model Selection 모듈 소개"],"metadata":{"id":"S3V3VUyp5Ywo"}},{"cell_type":"markdown","source":["### 학습/ 테스트 데이터 세트 분리 - train_test_split()"],"metadata":{"id":"yWcP3qNL5f4d"}},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","\n","iris = load_iris( )\n","dt_clf = DecisionTreeClassifier( )\n","train_data = iris.data\n","train_label = iris.target\n","dt_clf.fit(train_data, train_label)\n","\n","#학습 데이터 세트으로 예측 수행\n","pred = dt_clf.predict(train_data)\n","print(\"예측 정확도:\", accuracy_score(train_label, pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8DGn-MW43eum","executionInfo":{"status":"ok","timestamp":1641800529032,"user_tz":-540,"elapsed":330,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"6cd537c7-1567-4eb9-a00c-013757f28249"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["예측 정확도: 1.0\n"]}]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","\n","dt_clf = DecisionTreeClassifier( )\n","iris_data = load_iris( )\n","\n","X_train, X_test, y_train, y_test = train_test_split(iris_data.data , iris_data.target, \\\n","                                                    test_size= 0.3 , random_state = 121)\n"],"metadata":{"id":"b4saDQ-b76fI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dt_clf.fit(X_train, y_train)\n","pred = dt_clf.predict(X_test)\n","print(\"예측 정확도: {0:.4f}\".format(accuracy_score(y_test, pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tTWY1yUM82VW","executionInfo":{"status":"ok","timestamp":1641800852168,"user_tz":-540,"elapsed":331,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"6f7a104a-e9a3-4e30-fa81-613bf8ee9074"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["예측 정확도: 0.9556\n"]}]},{"cell_type":"markdown","source":["### 교차 검증"],"metadata":{"id":"p0yTk_Hw96oP"}},{"cell_type":"markdown","source":["K 폴드 교차 검증"],"metadata":{"id":"GkX3qonwZMVZ"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import KFold\n","import numpy as np\n","\n","iris = load_iris( )\n","features = iris.data\n","label = iris.target\n","dt_clf = DecisionTreeClassifier( random_state = 156 )\n","\n","#5개의 폴드 세트로 분리하는 kFold 객체와 폴드 세트별 정확도를 담을 리스트 객체 생성.\n","kfold = KFold(n_splits=5)\n","cv_accuracy = []\n","print('붓꽃 데이터 세트 크기:', features.shape[0]) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e8Kq_s-Q9L-_","executionInfo":{"status":"ok","timestamp":1641803209496,"user_tz":-540,"elapsed":334,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"3749e494-25e8-4e3e-9f0d-7f08f15790ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["붓꽃 데이터 세트 크기: 150\n"]}]},{"cell_type":"code","source":["n_iter = 0\n","\n","#KFold 객체의 split( )를 호출하면 폴드 별 학습용, 검증용 테스트의 로우 인덱스 array로 반환\n","for train_index, test_index in kfold.split(features):\n","    #kfold.split( )으로 반환된 인덱스를 이용해 학습용, 검증용 테스트 데이터 추출\n","    X_train, X_test = features[train_index], features[test_index]\n","    y_train, y_test = label[train_index] , label[test_index]\n","    #학습 및 예측\n","    dt_clf.fit(X_train, y_train)\n","    pred = dt_clf.predict(X_test)\n","    n_iter += 1\n","    #반복 시마다 정확도 측정\n","    accuracy = np.round( accuracy_score( y_test , pred ) , 4)\n","    train_size = X_train.shape[0]\n","    test_size = X_test.shape[0]\n","    print(\"\\n#{0} 교차 검증 정확도 :{1}, 학습 데이터 크기: {2}, 검증 데이터 크기: {3}\".format(n_iter, accuracy, train_size , test_size))\n","    print(\"{0} 검증 세트 인덱스{1}\".format(n_iter, test_index))\n","    cv_accuracy.append(accuracy)\n"," \n","# 개별 iteration별 정확도를 합하여 평균 정확도 계산\n","print(\"\\n## 평균 검증 정확도:\", np.mean(cv_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kJ3duwiwBP5_","executionInfo":{"status":"ok","timestamp":1641803274775,"user_tz":-540,"elapsed":325,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"7bd54f2a-37d6-4f57-d42c-45b40387dfd8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","#1 교차 검증 정확도 :1.0, 학습 데이터 크기: 120, 검증 데이터 크기: 30\n","1 검증 세트 인덱스[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28 29]\n","\n","#2 교차 검증 정확도 :0.9667, 학습 데이터 크기: 120, 검증 데이터 크기: 30\n","2 검증 세트 인덱스[30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\n"," 54 55 56 57 58 59]\n","\n","#3 교차 검증 정확도 :0.8667, 학습 데이터 크기: 120, 검증 데이터 크기: 30\n","3 검증 세트 인덱스[60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83\n"," 84 85 86 87 88 89]\n","\n","#4 교차 검증 정확도 :0.9333, 학습 데이터 크기: 120, 검증 데이터 크기: 30\n","4 검증 세트 인덱스[ 90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107\n"," 108 109 110 111 112 113 114 115 116 117 118 119]\n","\n","#5 교차 검증 정확도 :0.7333, 학습 데이터 크기: 120, 검증 데이터 크기: 30\n","5 검증 세트 인덱스[120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137\n"," 138 139 140 141 142 143 144 145 146 147 148 149]\n","\n","## 평균 검증 정확도: 0.9\n"]}]},{"cell_type":"markdown","source":["Stratified K 폴드"],"metadata":{"id":"J6XZqyhSZQS8"}},{"cell_type":"code","source":["import pandas as pd\n","\n","iris = load_iris( )\n","iris_df = pd.DataFrame(data = iris.data , columns = iris.feature_names)\n","iris_df['label'] = iris.target\n","iris_df['label'].value_counts( )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bA1kFlnhEwfa","executionInfo":{"status":"ok","timestamp":1641808678211,"user_tz":-540,"elapsed":324,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"4724de3b-d904-441f-dc0e-c0f556360644"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2    50\n","1    50\n","0    50\n","Name: label, dtype: int64"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["kfold = KFold(n_splits = 3)\n","n_iter = 0\n","for train_index, test_index in kfold.split(iris_df):\n","    n_iter += 1\n","    label_train = iris_df['label'].iloc[train_index]\n","    label_test = iris_df['label'].iloc[test_index]\n","    print(\"## 교차 검증: {0}\".format(n_iter))\n","    print(\"학습 레이블 데이터 분포:\\n\", label_train.value_counts( ))\n","    print(\"검증 레이블 데이터 분포:\\n\", label_test.value_counts( ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lnsvwHclbEly","executionInfo":{"status":"ok","timestamp":1641808886820,"user_tz":-540,"elapsed":323,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"a9e613de-1fd6-41a0-8857-59933e879874"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["## 교차 검증: 1\n","학습 레이블 데이터 분포:\n"," 2    50\n","1    50\n","Name: label, dtype: int64\n","검증 레이블 데이터 분포:\n"," 0    50\n","Name: label, dtype: int64\n","## 교차 검증: 2\n","학습 레이블 데이터 분포:\n"," 2    50\n","0    50\n","Name: label, dtype: int64\n","검증 레이블 데이터 분포:\n"," 1    50\n","Name: label, dtype: int64\n","## 교차 검증: 3\n","학습 레이블 데이터 분포:\n"," 1    50\n","0    50\n","Name: label, dtype: int64\n","검증 레이블 데이터 분포:\n"," 2    50\n","Name: label, dtype: int64\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import StratifiedKFold\n","\n","skf = StratifiedKFold(n_splits = 3)\n","n_iter = 0\n","\n","for train_index , test_index in skf.split(iris_df , iris_df['label']):\n","    n_iter += 1\n","    label_train = iris_df['label'].iloc[train_index]\n","    label_test = iris_df['label'].iloc[test_index]\n","    print(\"## 교차검증: {0}\".format(n_iter))\n","    print(\"학습 레이블 데이터 분포:\\n\" , label_train.value_counts( ))\n","    print(\"검증 레이블 데이터 분포:\\n\" , label_test.value_counts( ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F0aAZfHubm-J","executionInfo":{"status":"ok","timestamp":1641809157869,"user_tz":-540,"elapsed":375,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"08f62b81-7154-46ff-e83d-c98e0100dc57"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["## 교차검증: 1\n","학습 레이블 데이터 분포:\n"," 2    34\n","1    33\n","0    33\n","Name: label, dtype: int64\n","검증 레이블 데이터 분포:\n"," 1    17\n","0    17\n","2    16\n","Name: label, dtype: int64\n","## 교차검증: 2\n","학습 레이블 데이터 분포:\n"," 1    34\n","2    33\n","0    33\n","Name: label, dtype: int64\n","검증 레이블 데이터 분포:\n"," 2    17\n","0    17\n","1    16\n","Name: label, dtype: int64\n","## 교차검증: 3\n","학습 레이블 데이터 분포:\n"," 0    34\n","2    33\n","1    33\n","Name: label, dtype: int64\n","검증 레이블 데이터 분포:\n"," 2    17\n","1    17\n","0    16\n","Name: label, dtype: int64\n"]}]},{"cell_type":"code","source":["dt_clf = DecisionTreeClassifier(random_state = 156)\n","\n","skfold = StratifiedKFold(n_splits = 3)\n","n_iter = 0\n","cv_accuracy = []\n","\n","#StratifiedKFold의 split( ) 호출시 반드시 레이블 데이터 세트도 추가 입력 필요\n","for train_index, test_index in skfold.split(features, label):\n","    #split( )으로 반환된 인덱스를 이용해 학습용, 검증용 테스트 데이터 추출\n","    X_train, X_test = features[train_index], features[test_index]\n","    y_train, y_test = label[train_index] , label[test_index]\n","    #학습 및 예측\n","    dt_clf.fit(X_train, y_train)\n","    pred = dt_clf.predict(X_test)\n","\n","    #반복 시마다 정확도 측정\n","    n_iter += 1\n","    accuracy = np.round(accuracy_score(y_test , pred) , 4)\n","    train_size = X_train.shape[0]\n","    test_size = X_test.shape[0]\n","    print(\"\\n#{0} 교차 검증 정확도 :{1}, 학습 데이터 크기: {2}, 검증 데이터 크기: {3}\".format(n_iter , accuracy, train_size, test_size))\n","    print(\"#{0} 검증 세트 인덱스:{1}\".format(n_iter, test_index))\n","    cv_accuracy.append(accuracy)\n","\n","#교차 검증별 정확도 및 평균 정확도 계산\n","print(\"\\n## 교차 검증별 정확도:\",np.round(cv_accuracy, 4))\n","print(\"## 평균 검증 정확도:\", np.mean(cv_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D52mqRLrc5uL","executionInfo":{"status":"ok","timestamp":1641810253752,"user_tz":-540,"elapsed":338,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"0128c8ec-8266-443c-daa3-ba84e42b4f25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","#1 교차 검증 정확도 :0.98, 학습 데이터 크기: 100, 검증 데이터 크기: 50\n","#1 검증 세트 인덱스:[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  50\n","  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66 100 101\n"," 102 103 104 105 106 107 108 109 110 111 112 113 114 115]\n","\n","#2 교차 검증 정확도 :0.94, 학습 데이터 크기: 100, 검증 데이터 크기: 50\n","#2 검증 세트 인덱스:[ 17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  67\n","  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82 116 117 118\n"," 119 120 121 122 123 124 125 126 127 128 129 130 131 132]\n","\n","#3 교차 검증 정확도 :0.98, 학습 데이터 크기: 100, 검증 데이터 크기: 50\n","#3 검증 세트 인덱스:[ 34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  83  84\n","  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 133 134 135\n"," 136 137 138 139 140 141 142 143 144 145 146 147 148 149]\n","\n","## 교차 검증별 정확도: [0.98 0.94 0.98]\n","## 평균 검증 정확도: 0.9666666666666667\n"]}]},{"cell_type":"markdown","source":["교차 검증을 보다 간편하게 - cross_val_score( )"],"metadata":{"id":"Vm012WTMhh4m"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import cross_val_score, cross_validate\n","from sklearn.datasets import load_iris\n","\n","iris_data = load_iris( )\n","dt_clf = DecisionTreeClassifier(random_state = 156)\n","\n","data = iris_data.data\n","label = iris_data.target\n","\n","#성능 지표는 정확도(accuracy), 교차 검증 세트는 3개\n","scores = cross_val_score(dt_clf , data , label, scoring=\"accuracy\", cv = 3)\n","print(\"교차 검증별 정확도:\", np.round(scores, 4))\n","print(\"평균 검증 정확도:\", np.round(np.mean(scores) , 4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cqncHGeAg1Kj","executionInfo":{"status":"ok","timestamp":1641810813651,"user_tz":-540,"elapsed":349,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"704ae86c-7d49-46d5-fe8f-d208cbc13437"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["교차 검증별 정확도: [0.98 0.94 0.98]\n","평균 검증 정확도: 0.9667\n"]}]},{"cell_type":"markdown","source":["###GridSearchCV - 교차 검증과 최적 하이퍼 파라튜님을 한 번에"],"metadata":{"id":"XMe-vYuJkefv"}},{"cell_type":"code","source":["grid_paramiters = {'max_depth':[1,2,3], 'min_samples_split':[2,3]}"],"metadata":{"id":"sciyQmuAjN-E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import GridSearchCV\n","\n","#데이터를 로딩하고 학습 데이터와 테스트 데이터 분리\n","iris_data = load_iris( )\n","X_train, X_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target , test_size = 0.3 , random_state=121)\n","\n","dtree = DecisionTreeClassifier( )\n","\n","### 파라미터를 딕셔너리 형태로 설정\n","parameters = {\"max_depth\":[1,2,3] , \"min_samples_split\":[2,3]}"],"metadata":{"id":"owNxJ-g4nAs-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","#param_grid의 하이퍼 파라미터를 3개의 train, test set fold로 나누어 테스트 수행 설정\n","### refit = True가 default임. True이면 가장 좋은 파라미터 설정으로 재학습시킴.\n","grid_dtree = GridSearchCV(dtree , param_grid=parameters , cv=3 , refit = True)\n","\n","#붓꽃 학습 데이터로 param_grid의 하이퍼 파라미터를 순차적으로 학습/평가\n","grid_dtree.fit(X_train, y_train )\n","\n","#GridSearchCV결과를 추출해 DataFrame으로 반환\n","scores_df = pd.DataFrame(grid_dtree.cv_results_)\n","scores_df[['params' , 'mean_test_score' , 'rank_test_score' , 'split0_test_score' , 'split1_test_score' , 'split2_test_score']]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"31Mbr-efnvvq","executionInfo":{"status":"ok","timestamp":1641812406791,"user_tz":-540,"elapsed":327,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"63702d40-95af-4de8-a77f-35e953e1ccbb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-dd3f527b-8c23-4de5-8235-6b8c2f1bb223\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>params</th>\n","      <th>mean_test_score</th>\n","      <th>rank_test_score</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>{'max_depth': 1, 'min_samples_split': 2}</td>\n","      <td>0.657143</td>\n","      <td>5</td>\n","      <td>0.657143</td>\n","      <td>0.657143</td>\n","      <td>0.657143</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>{'max_depth': 1, 'min_samples_split': 3}</td>\n","      <td>0.657143</td>\n","      <td>5</td>\n","      <td>0.657143</td>\n","      <td>0.657143</td>\n","      <td>0.657143</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>{'max_depth': 2, 'min_samples_split': 2}</td>\n","      <td>0.933333</td>\n","      <td>3</td>\n","      <td>0.942857</td>\n","      <td>0.914286</td>\n","      <td>0.942857</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>{'max_depth': 2, 'min_samples_split': 3}</td>\n","      <td>0.933333</td>\n","      <td>3</td>\n","      <td>0.942857</td>\n","      <td>0.914286</td>\n","      <td>0.942857</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>{'max_depth': 3, 'min_samples_split': 2}</td>\n","      <td>0.942857</td>\n","      <td>1</td>\n","      <td>0.971429</td>\n","      <td>0.914286</td>\n","      <td>0.942857</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>{'max_depth': 3, 'min_samples_split': 3}</td>\n","      <td>0.942857</td>\n","      <td>1</td>\n","      <td>0.971429</td>\n","      <td>0.914286</td>\n","      <td>0.942857</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd3f527b-8c23-4de5-8235-6b8c2f1bb223')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dd3f527b-8c23-4de5-8235-6b8c2f1bb223 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dd3f527b-8c23-4de5-8235-6b8c2f1bb223');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                                     params  ...  split2_test_score\n","0  {'max_depth': 1, 'min_samples_split': 2}  ...           0.657143\n","1  {'max_depth': 1, 'min_samples_split': 3}  ...           0.657143\n","2  {'max_depth': 2, 'min_samples_split': 2}  ...           0.942857\n","3  {'max_depth': 2, 'min_samples_split': 3}  ...           0.942857\n","4  {'max_depth': 3, 'min_samples_split': 2}  ...           0.942857\n","5  {'max_depth': 3, 'min_samples_split': 3}  ...           0.942857\n","\n","[6 rows x 6 columns]"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(\"GridSearchCV 최적 파라미터:\", grid_dtree.best_params_)\n","print(\"GridSearchCV 최고 정확도:{0:.4f}\".format(grid_dtree.best_score_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FBYIVipmpS7R","executionInfo":{"status":"ok","timestamp":1641812652759,"user_tz":-540,"elapsed":341,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"ffb62ae4-0ee5-4179-e38e-6c408d2ef0e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["GridSearchCV 최적 파라미터: {'max_depth': 3, 'min_samples_split': 2}\n","GridSearchCV 최고 정확도:0.9429\n"]}]},{"cell_type":"code","source":["#GridSearchCV의 refit으로 이미 학습된 estimator 반환\n","estimator = grid_dtree.best_estimator_\n","\n","#GridSearchCV의 best_estimator_는 이미 최적 학습이 됐으므로 별도 학습이 필요 없음\n","pred = estimator.predict(X_test)\n","print(\"테스트 데이터 세트 정확도: {0:.4f}\".format(accuracy_score(y_test, pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jH-sCKynqO-W","executionInfo":{"status":"ok","timestamp":1641812823473,"user_tz":-540,"elapsed":325,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"ef59b133-f0ab-4e16-9a3c-643c4dde54f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["테스트 데이터 세트 정확도: 0.9556\n"]}]},{"cell_type":"markdown","source":["## 2-5 데이터 전처리"],"metadata":{"id":"Q1JMyrV00NVP"}},{"cell_type":"markdown","source":["### 데이터 인코딩"],"metadata":{"id":"14LAhVMG03lO"}},{"cell_type":"markdown","source":["레이블 인코딩"],"metadata":{"id":"kBkVdukf27xX"}},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","items = ['TV' , '냉장고' , '전자레인지' , '컴퓨터' , '선풍기' , '믹서' , '믹서']\n","\n","#LabelEncoder를 객체로 생성한 후, fit( )과 transform( )으로 레이블 인코딩 수행.\n","encoder = LabelEncoder( )\n","encoder.fit(items)\n","labels = encoder.transform(items)\n","print(\"인코딩 변환값:\" , labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"52Ey3Fopq4qP","executionInfo":{"status":"ok","timestamp":1641816205043,"user_tz":-540,"elapsed":422,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"1d00e663-cca3-4286-a3d2-d993c7e48110"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["인코딩 변환값: [0 1 4 5 3 2 2]\n"]}]},{"cell_type":"code","source":["print(\"인코딩 클래스:\", encoder.classes_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zwOjIHHh3yAE","executionInfo":{"status":"ok","timestamp":1641816276667,"user_tz":-540,"elapsed":359,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"c2fbb328-6cef-4d7f-bce2-16078966be18"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["인코딩 클래스: ['TV' '냉장고' '믹서' '선풍기' '전자레인지' '컴퓨터']\n"]}]},{"cell_type":"code","source":["print(\"디코딩 원본값:\", encoder.inverse_transform([4, 5, 2, 0, 1, 1 ,3, 3]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KbB-XH_U4DPl","executionInfo":{"status":"ok","timestamp":1641816326121,"user_tz":-540,"elapsed":351,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"52766952-8f08-4781-8f6d-49febf176a70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["디코딩 원본값: ['전자레인지' '컴퓨터' '믹서' 'TV' '냉장고' '냉장고' '선풍기' '선풍기']\n"]}]},{"cell_type":"markdown","source":["원-핫 인코딩(One-Hot Encoding)"],"metadata":{"id":"t_m7S3Da5R-f"}},{"cell_type":"code","source":["from sklearn.preprocessing import OneHotEncoder\n","import numpy as np\n","\n","items = ['TV' , '냉장고' , '전자레인지' , '컴퓨터' , '선풍기' , '선풍기' , '믹서' ,'믹서']\n","\n","#먼저 숫자 값으로 변환을 위해 LabelEncoder로 변환 합니다.\n","encoder = LabelEncoder( )\n","encoder.fit(items)\n","labels = encoder.transform(items)\n","#2 차원 데이터로 변환 합니다.\n","labels = labels.reshape(-1, 1)\n","\n","#원-핫 인코딩을 적용합니다.\n","oh_encoder = OneHotEncoder( )\n","oh_encoder.fit(labels)\n","oh_labels = oh_encoder.transform(labels)\n","print('원-핫 인코딩 데이터')\n","print(oh_labels.toarray( ))\n","print(oh_labels.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A695XcJH4PyW","executionInfo":{"status":"ok","timestamp":1641816938495,"user_tz":-540,"elapsed":363,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"eabefe4a-38f3-4c55-ab15-f781718601f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["원-핫 인코딩 데이터\n","[[1. 0. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 1. 0. 0.]\n"," [0. 0. 1. 0. 0. 0.]\n"," [0. 0. 1. 0. 0. 0.]]\n","(8, 6)\n"]}]},{"cell_type":"code","source":["#get_dummies( )\n","import pandas as pd\n","\n","df = pd.DataFrame({\"item\" : [\"TV\" , \"냉장고\" , \"전자레인지\" , \"컴퓨터\" , \"선풍기\" , \"선풍기\" , \"믹서\" ,\"믹서\"]})\n","pd.get_dummies(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"n4AQQAYZ6lRe","executionInfo":{"status":"ok","timestamp":1641817052742,"user_tz":-540,"elapsed":409,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"ea563b00-e96f-4ebf-892b-a738c5b0f7c5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-cd9bee28-6c07-441c-80eb-f0b9ca22dbd6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>item_TV</th>\n","      <th>item_냉장고</th>\n","      <th>item_믹서</th>\n","      <th>item_선풍기</th>\n","      <th>item_전자레인지</th>\n","      <th>item_컴퓨터</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd9bee28-6c07-441c-80eb-f0b9ca22dbd6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cd9bee28-6c07-441c-80eb-f0b9ca22dbd6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cd9bee28-6c07-441c-80eb-f0b9ca22dbd6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   item_TV  item_냉장고  item_믹서  item_선풍기  item_전자레인지  item_컴퓨터\n","0        1         0        0         0           0         0\n","1        0         1        0         0           0         0\n","2        0         0        0         0           1         0\n","3        0         0        0         0           0         1\n","4        0         0        0         1           0         0\n","5        0         0        0         1           0         0\n","6        0         0        1         0           0         0\n","7        0         0        1         0           0         0"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["### 피처 스케일링과 정규화"],"metadata":{"id":"vgDzocJ-7hLJ"}},{"cell_type":"markdown","source":["### StandardScaler"],"metadata":{"id":"iq3St0jv8CTW"}},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","import pandas as pd\n","#붓꽃 데이터 세트를 로딩하고 DataFrame으로 변환합니다.\n","iris = load_iris()\n","iris_data = iris.data\n","iris_df = pd.DataFrame(data=iris_data, columns = iris.feature_names)\n","\n","\n","print(\"feature 들의 평균 값\")\n","print( iris_df.mean( ) )\n","print(\"\\nfeature 들의 분산 값\")\n","print( iris_df.var( ) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HeV3zmjQ7BHr","executionInfo":{"status":"ok","timestamp":1641819047697,"user_tz":-540,"elapsed":412,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"47e61023-2205-4fde-e677-bbb314aa120e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["feature 들의 평균 값\n","sepal length (cm)    5.843333\n","sepal width (cm)     3.057333\n","petal length (cm)    3.758000\n","petal width (cm)     1.199333\n","dtype: float64\n","\n","feature 들의 분산 값\n","sepal length (cm)    0.685694\n","sepal width (cm)     0.189979\n","petal length (cm)    3.116278\n","petal width (cm)     0.581006\n","dtype: float64\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","#StandardScaler객체 생성\n","scaler = StandardScaler( )\n","#StandardScaler로 데이터 세트 변환. fit( )과 transform( )호출.\n","scaler.fit(iris_df)\n","iris_scaled = scaler.transform(iris_df)\n","\n","#transform( ) 시 스케일 변환된 데이터 세트가 Numpy ndarray로 반환돼 이를 DataFrame으로 변환 \n","iris_df_scaled = pd.DataFrame( data=iris_scaled, columns = iris.feature_names )\n","print(\"feature 들의 평균 값\")\n","print(iris_df_scaled.mean( ))\n","print(\"\\nfeature 들의 분산 값\")\n","print(iris_df_scaled.var( ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6lhh59Wd9xmq","executionInfo":{"status":"ok","timestamp":1641819054340,"user_tz":-540,"elapsed":425,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"720e1d2e-a48c-4c25-cfcd-53418cca8791"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["feature 들의 평균 값\n","sepal length (cm)   -1.690315e-15\n","sepal width (cm)    -1.842970e-15\n","petal length (cm)   -1.698641e-15\n","petal width (cm)    -1.409243e-15\n","dtype: float64\n","\n","feature 들의 분산 값\n","sepal length (cm)    1.006711\n","sepal width (cm)     1.006711\n","petal length (cm)    1.006711\n","petal width (cm)     1.006711\n","dtype: float64\n"]}]},{"cell_type":"markdown","source":["### MinMaxScaler"],"metadata":{"id":"LetwIIXfCumI"}},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","\n","#MinMaxScaler 객체 생성\n","scaler = MinMaxScaler( )\n","#MinMaxScaler로 데이터 세트 변환. fit( )과 transforn( ) 호출.\n","scaler.fit(iris_df)\n","iris_scaled = scaler.transform(iris_df)\n","\n","#transform( ) 시 스케일 변환된 데이터 세트가 Numpy ndarray로 반한돼 이를 DataFrame으로 변환\n","iris_df_scaled = pd.DataFrame(data=iris_scaled, columns=iris.feature_names)\n","print(\"feature들의 최솟값\")\n","print(iris_df_scaled.min( ))\n","print(\"\\nfeature들의 최댓값\")\n","print(iris_df_scaled.max( ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H1aZdtj1CHPz","executionInfo":{"status":"ok","timestamp":1641819314739,"user_tz":-540,"elapsed":419,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"11617445-d40f-49ce-e9d2-a5f5b5aae184"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["feature들의 최솟값\n","sepal length (cm)    0.0\n","sepal width (cm)     0.0\n","petal length (cm)    0.0\n","petal width (cm)     0.0\n","dtype: float64\n","\n","feature들의 최댓값\n","sepal length (cm)    1.0\n","sepal width (cm)     1.0\n","petal length (cm)    1.0\n","petal width (cm)     1.0\n","dtype: float64\n"]}]},{"cell_type":"markdown","source":["###학습 데이터와 테스트 데이터의 스케일링 변환 시 유의점 "],"metadata":{"id":"3SzAbc07DtAH"}},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","import numpy as np\n","\n","#학습 데이터는 0부터 10까지, 테스트 데이터는 0부터 5까지의 값을 가지는 데이터 세트로 생성\n","#Scaler 클래스의 fit( ), transform( )은 2차원 이상 데이터만 가능하므로 reshape(-1, 1)로 차원 변결\n","train_array = np.arange(0, 11).reshape(-1, 1)\n","test_array = np.arange(0, 6).reshape(-1, 1)"],"metadata":{"id":"Uey5aSQJDmjr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#MinMaxScaler 객체에 별도의 feature_range 파라미터 값을 지정하지 않으면 0~1 값으로 변환\n","scaler = MinMaxScaler( )\n","\n","#fit( )하게 되면 train_array 데이터의 최솟값이 0, 최댓값이 10으로 설정.\n","scaler.fit(train_array)\n","\n","# 1/10 scaler로 train_array 데이터 변환함. 원본 10 -> 1 으로 설정.\n","train_scaled = scaler.transform(train_array)\n","\n","print(\"원본 train_array 데이터:\" , np.round(train_array.reshape(-1) , 2))\n","print(\"Scale된 train_array 데이터:\" , np.round(train_scaled.reshape(-1), 2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jp4TVjEgFDbA","executionInfo":{"status":"ok","timestamp":1641819894787,"user_tz":-540,"elapsed":369,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"5f82f28f-ef50-4a83-a4fb-7ddf2145766e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["원본 train_array 데이터: [ 0  1  2  3  4  5  6  7  8  9 10]\n","Scale된 train_array 데이터: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n"]}]},{"cell_type":"code","source":["#MinMaxScaler에 test_array를 fit()하세 되면 원본 데이터의 최솟값이 0, 최댓값이 5로 설정됨\n","scaler.fit(test_array)\n","\n","# 1/5 sclae로 test_arraty 데이터 변환함. 원본 5 -> 1로 변환.\n","test_scaled = scaler.transform(test_array)\n","\n","# test_array의 scale 변환 출력.\n","print(\"원본 test_array 데이터:\" , np.round(test_array.reshape(-1) , 2))\n","print(\"Scale된 test_array 데이터:\" , np.round(test_scaled.reshape(-1) , 2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wioUTNHlFToA","executionInfo":{"status":"ok","timestamp":1641820060517,"user_tz":-540,"elapsed":356,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"ad87e35d-6444-4b3a-c479-db902d9e1299"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["원본 test_array 데이터: [0 1 2 3 4 5]\n","Scale된 test_array 데이터: [0.  0.2 0.4 0.6 0.8 1. ]\n"]}]},{"cell_type":"code","source":["scaler = MinMaxScaler( )\n","scaler.fit(train_array)\n","train_scaled = scaler.transform(train_array)\n","print(\"원본 train_array 데이터:\", np.round(train_array.reshape(-1) , 2))\n","print(\"Scale된 train_array 데이터:\" , np.round(train_scaled.reshape(-1), 2))\n","\n","#test_array에 Scale 변환을 할 때느 반드시 fit( )을 호출하지 않고 transform()만으로 변환해야 함.\n","test_scaled = scaler.transform(test_array)\n","print(\"\\n원본 test_array 데이터:\" , np.round(test_array.reshape(-1) , 2))\n","print(\"Scale된 test_array 데이터:\" , np.round(test_scaled.reshape(-1) , 2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GpJNK7EHGffp","executionInfo":{"status":"ok","timestamp":1641820378376,"user_tz":-540,"elapsed":423,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"a3e41da1-844f-44f0-eadb-4430de3a176d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["원본 train_array 데이터: [ 0  1  2  3  4  5  6  7  8  9 10]\n","Scale된 train_array 데이터: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n","\n","원본 test_array 데이터: [0 1 2 3 4 5]\n","Scale된 test_array 데이터: [0.  0.1 0.2 0.3 0.4 0.5]\n"]}]},{"cell_type":"markdown","source":["## 2-6 사이킷런으로 수행하는 타이타닉 생존자 예측"],"metadata":{"id":"Ke9SJ9o_QMir"}},{"cell_type":"code","source":["%cd /content/drive/MyDrive/AI/파이썬 머신러닝 완벽가이드/titanic"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"541J9L5nG_VT","executionInfo":{"status":"ok","timestamp":1641886569273,"user_tz":-540,"elapsed":355,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"129157a0-58e0-45c7-83fb-bb40f3ffd16d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/AI/파이썬 머신러닝 완벽가이드/titanic\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","titanic_df = pd.read_csv(\"titanic_train.csv\")"],"metadata":{"id":"0iAMQhHeRN-7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["titanic_df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"Wb7AIpAmRYum","executionInfo":{"status":"ok","timestamp":1641886569658,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"bdea9631-4e29-4482-85cb-e51a5814b087"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-6e61cbd2-0adc-4efc-bcf6-83b63953421f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e61cbd2-0adc-4efc-bcf6-83b63953421f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6e61cbd2-0adc-4efc-bcf6-83b63953421f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6e61cbd2-0adc-4efc-bcf6-83b63953421f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","\n","[3 rows x 12 columns]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["print(\"\\n ### 학습 데이터 정보 ### \\n\")\n","print(titanic_df.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0ysx3rIzRqXV","executionInfo":{"status":"ok","timestamp":1641886570058,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"75e23534-8b36-4367-c5fe-d34b4ae5c77f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," ### 학습 데이터 정보 ### \n","\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n","None\n"]}]},{"cell_type":"code","source":["titanic_df['Age'].fillna(titanic_df[ 'Age' ].mean(), inplace = True)\n","titanic_df['Cabin'].fillna('N' , inplace=True)\n","titanic_df['Embarked'].fillna('N', inplace = True)\n","print('데이터 세트 Null 값 개수 ', titanic_df.isnull().sum().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uTFaMOSMR22m","executionInfo":{"status":"ok","timestamp":1641886570059,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"51f52f9d-08e5-4a2f-fa5d-940af2c782b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["데이터 세트 Null 값 개수  0\n"]}]},{"cell_type":"code","source":["print(' Sex 값 분포 : \\n', titanic_df['Sex'].value_counts( ))\n","print('\\n Cabin 값 분포 :\\n', titanic_df['Cabin'].value_counts( ))\n","print('\\n Embarked 값 분포 :\\n', titanic_df['Embarked'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bgSVeVKdSh-r","executionInfo":{"status":"ok","timestamp":1641886570458,"user_tz":-540,"elapsed":5,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"c7866f4f-e90e-4b64-c0c1-ae38ce74ae5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" Sex 값 분포 : \n"," male      577\n","female    314\n","Name: Sex, dtype: int64\n","\n"," Cabin 값 분포 :\n"," N              687\n","G6               4\n","C23 C25 C27      4\n","B96 B98          4\n","F33              3\n","              ... \n","C95              1\n","B94              1\n","D21              1\n","C110             1\n","B80              1\n","Name: Cabin, Length: 148, dtype: int64\n","\n"," Embarked 값 분포 :\n"," S    644\n","C    168\n","Q     77\n","N      2\n","Name: Embarked, dtype: int64\n"]}]},{"cell_type":"code","source":[" titanic_df[ 'Cabin' ] = titanic_df[ 'Cabin' ].str[ :1 ]\n"," print( titanic_df[ 'Cabin' ].head( 3 ) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iD1F5K54UwHi","executionInfo":{"status":"ok","timestamp":1641886570458,"user_tz":-540,"elapsed":4,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"c1b75434-66a5-4ebf-e301-b4f06ddc6343"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0    N\n","1    C\n","2    N\n","Name: Cabin, dtype: object\n"]}]},{"cell_type":"code","source":["titanic_df.groupby([ 'Sex' , 'Survived' ])[ 'Survived' ].count( )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fHb20zogVEeQ","executionInfo":{"status":"ok","timestamp":1641886570874,"user_tz":-540,"elapsed":6,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"5cc71127-e4c5-4d40-ad28-53a81100b230"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sex     Survived\n","female  0            81\n","        1           233\n","male    0           468\n","        1           109\n","Name: Survived, dtype: int64"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["sns.barplot(x = 'Sex' , y = 'Survived' , data = titanic_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"U8qYXFkrVZu0","executionInfo":{"status":"ok","timestamp":1641886571285,"user_tz":-540,"elapsed":415,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"05f408ff-4287-4171-fab3-0428c50bee54"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7efdc36155d0>"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYIAAAEGCAYAAABo25JHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAT0klEQVR4nO3df5BdZ33f8ffHMooHY5wSbcceSUYqiDgKcXC8iKT5BcFOZNqR0gCJjDPBUxcNU2QyIcYVhSpUDs1ENKRJKhKU1oUyAeFAhllSpSoBQxPzS+vY2JUcka1skAQqa0xAQGuz8bd/3CvncnW1urJ17tXueb9m7ug+5zx77nelq/3sec49z5OqQpLUXueNuwBJ0ngZBJLUcgaBJLWcQSBJLWcQSFLLnT/uAs7UsmXLatWqVeMuQ5IWlLvuuuuhqpoYtG/BBcGqVauYnp4edxmStKAk+fyp9jk0JEktZxBIUssZBJLUco0GQZL1SQ4mmUmydcD+y5LckeTuJPcmeUmT9UiSTtZYECRZAuwErgXWAtclWdvX7U3A7VV1JbAJeHtT9UiSBmvyjGAdMFNVh6rqUWA3sLGvTwFP7z6/GPhig/VIkgZoMgiWA4d72ke623q9GfjFJEeAPcBNgw6UZHOS6STTs7OzTdQqSa017ovF1wHvrKoVwEuAdyc5qaaq2lVVk1U1OTEx8H4ISdIT1OQNZUeBlT3tFd1tvW4E1gNU1SeTXAAsA77cYF2SznG33HILx44d45JLLmHHjh3jLmfRa/KMYB+wJsnqJEvpXAye6uvzBeDFAEm+D7gAcOxHarljx45x9OhRjh07Nu5SWqGxIKiqOWALsBe4n86ng/Yn2Z5kQ7fbrwKvSvJZ4L3ADeWSaZI0Uo3ONVRVe+hcBO7dtq3n+QHgR5usQZI0v3FfLJYkjZlBIEktZxBIUssZBJLUcgaBJLWcQSBJLWcQSFLLGQSS1HIGgSS1XKN3Fks6M1/Y/gPjLuGcMPfwM4DzmXv48/6dAJdtu6/R43tGIEktZxBIUssZBJLUcgaBJLWcQSBJLWcQSFLLGQSS1HKNBkGS9UkOJplJsnXA/t9Ock/38bkkf9tkPZKkkzV2Q1mSJcBO4BrgCLAvyVR3eUoAqupXevrfBFzZVD2SpMGaPCNYB8xU1aGqehTYDWycp/91dBawlySNUJNBsBw43NM+0t12kiTPBFYDHz3F/s1JppNMz87OnvVCJanNzpWLxZuA91fV3w3aWVW7qmqyqiYnJiZGXJokLW5NBsFRYGVPe0V32yCbcFhIksaiySDYB6xJsjrJUjo/7Kf6OyW5HPgHwCcbrEWSdAqNfWqoquaSbAH2AkuA26pqf5LtwHRVnQiFTcDuqqqmapG0sCy74DFgrvunmtboegRVtQfY07dtW1/7zU3WIGnhufkKbykapXPlYrEkaUwMAklqOYNAklrOIJCkljMIJKnlDAJJajmDQJJaziCQpJYzCCSp5QwCSWo5g0CSWs4gkKSWMwgkqeUMAklqOYNAklrOIJCkljMIJKnlGg2CJOuTHEwyk2TrKfr8fJIDSfYneU+T9UiSTtbYUpVJlgA7gWuAI8C+JFNVdaCnzxrgDcCPVtVXk/zDpuqRJA3W5BnBOmCmqg5V1aPAbmBjX59XATur6qsAVfXlBuuRJA3QZBAsBw73tI90t/V6DvCcJHcm+VSS9YMOlGRzkukk07Ozsw2VK0ntNO6LxecDa4AXAtcBf5jku/s7VdWuqpqsqsmJiYkRlyhJi1uTQXAUWNnTXtHd1usIMFVV366qB4DP0QkGSdKINBkE+4A1SVYnWQpsAqb6+nyQztkASZbRGSo61GBNkqQ+jQVBVc0BW4C9wP3A7VW1P8n2JBu63fYCX0lyALgDeH1VfaWpmiRJJ2vs46MAVbUH2NO3bVvP8wJe131IksZg3BeLJUljZhBIUssZBJLUcgaBJLWcQSBJLWcQSFLLGQSS1HIGgSS1nEEgSS1nEEhSyxkEktRyBoEktZxBIEktZxBIUssZBJLUcgaBJLWcQSBJLWcQSFLLNRoESdYnOZhkJsnWAftvSDKb5J7u4180WY8k6WSNrVmcZAmwE7gGOALsSzJVVQf6ur6vqrY0VYckaX5NnhGsA2aq6lBVPQrsBjY2+HqSpCegySBYDhzuaR/pbuv30iT3Jnl/kpWDDpRkc5LpJNOzs7NN1CpJrTXui8UfAlZV1RXAh4F3DepUVbuqarKqJicmJkZaoCQtdk0GwVGg9zf8Fd1tj6uqr1TVI93mfwKuarAeSdIATQbBPmBNktVJlgKbgKneDkku7WluAO5vsB5J0gDzfmooyXGgTrW/qp4+z765JFuAvcAS4Laq2p9kOzBdVVPAa5NsAOaAh4EbzvxbkCQ9GfMGQVVdBJDkVuBLwLuBANcDl87zpSe+fg+wp2/btp7nbwDecMZVS5LOmmGHhjZU1dur6nhVfb2qfh8/CipJi8KwQfDNJNcnWZLkvCTXA99ssjBJ0mgMGwSvAH4e+D/dx8u72yRJC9xQU0xU1YM4FCRJi9JQZwRJnpPkI0n+V7d9RZI3NVuaJGkUhh0a+kM6n+75NkBV3UvnvgBJ0gI3bBA8tao+07dt7mwXI0kavWGD4KEkz6J7c1mSl9G5r0CStMANux7Ba4BdwOVJjgIP0LmpTJK0wA0bBJ+vqquTXAicV1XHmyxKkjQ6ww4NPZBkF/DDwDcarEeSNGLDBsHlwJ/TGSJ6IMl/TPJjzZUlSRqVoYKgqr5VVbdX1c8BVwJPBz7eaGWSpJEYej2CJD+Z5O3AXcAFdKackCQtcENdLE7yIHA3cDvw+qpywjlJWiSG/dTQFVX19UYrkSSNxelWKLulqnYAb0ly0kplVfXaxiqTJI3E6a4RnFhDeJrOtYH+x7ySrE9yMMlMkq3z9HtpkkoyOWTdkqSz5HRLVX6o+/S+qvqrMzlwkiXATuAa4AiwL8lUVR3o63cR8MvAp8/k+JKks2PYTw39VpL7k9ya5LlDfs06YKaqDlXVo8BuBq9pcCvwm8D/G/K4kqSzaNj7CF4EvAiYBd6R5L4h1iNYDhzuaR/pbntckh8CVlbVf5vvQEk2J5lOMj07OztMyZKkIQ19H0FVHauq3wVeDdwDbHsyL5zkPOBtwK8O8dq7qmqyqiYnJiaezMtKkvoMu0LZ9yV5c5L7gN8DPgGsOM2XHQVW9rRXdLedcBHwXOBj3fsUfhiY8oKxJI3WsPcR3EZnjP9nquqLQ37NPmBNktV0AmATPQveV9XXgGUn2kk+BtxcVdNDHl+SdBac9oyg++mfB6rqd84gBKiqOWALsJfOx1Bvr6r9SbYn2fCEK5YknVWnPSOoqr9LsjLJ0u6nf4ZWVXuAPX3bBl5bqKoXnsmxJUlnx7BDQw8AdyaZAh6fZ6iq3tZIVZKkkRk2CP5393EenYu8kqRFYqggqKp/23QhkqTxGHYa6juAQZPO/dRZr0iSNFLDDg3d3PP8AuClwNzZL0eSNGrDDg31zzR6Z5LPNFCPJGnEhh0aekZP8zxgEri4kYokSSM17NDQXfz9NYI54EHgxiYKkiSN1ulWKHs+cLiqVnfbr6RzfeBB4MA8XypJWiBON8XEO4BHAZL8BPAbwLuArwG7mi1NkjQKpxsaWlJVD3ef/wKwq6o+AHwgyT3NliZJGoXTnREsSXIiLF4MfLRn37DXFyRJ57DT/TB/L/DxJA8B/xf4C4Akz6YzPCRJWuBOt3j9W5J8BLgU+B9VdeKTQ+cBNzVdnCSpecNMQ/2pAds+10w5kqRRG3rNYknS4mQQSFLLNRoESdYnOZhkJsnWAftfneS+JPck+cska5usR5J0ssaCoLvW8U7gWmAtcN2AH/TvqaofqKrnATsAVzyTpBFr8oxgHTBTVYe6ax3vBjb2dqiqr/c0L2TAmgeSpGY1eVPYcuBwT/sI8IL+TkleA7wOWAoMXOgmyWZgM8Bll1121guVpDYb+8XiqtpZVc8C/hXwplP02VVVk1U1OTExMdoCJWmRazIIjgIre9oruttOZTfwsw3WI0kaoMkg2AesSbI6yVJgEzDV2yHJmp7mPwH+psF6JEkDNHaNoKrmkmwB9gJLgNuqan+S7cB0VU0BW5JcDXwb+CrwyqbqkSQN1ugMolW1B9jTt21bz/NfbvL1JUmnN/aLxZKk8TIIJKnlDAJJajmDQJJaziCQpJYzCCSp5QwCSWo5g0CSWs4gkKSWMwgkqeUMAklqOYNAklrOIJCkljMIJKnlGp2GWue2W265hWPHjnHJJZewY8eOcZcjaUwMghY7duwYR4/Ot3qopDZwaEiSWq7RIEiyPsnBJDNJtg7Y/7okB5Lcm+QjSZ7ZZD2SpJM1FgRJlgA7gWuBtcB1Sdb2dbsbmKyqK4D3Aw5US9KINXlGsA6YqapDVfUosBvY2Nuhqu6oqm91m58CVjRYjyRpgCaDYDlwuKd9pLvtVG4E/mzQjiSbk0wnmZ6dnT2LJUqSzomLxUl+EZgE3jpof1XtqqrJqpqcmJgYbXGStMg1+fHRo8DKnvaK7rbvkORq4I3AT1bVIw3WI0kaoMkg2AesSbKaTgBsAl7R2yHJlcA7gPVV9eUGa/kOV73+v47qpc5pFz10nCXAFx467t8JcNdbf2ncJUhj0djQUFXNAVuAvcD9wO1VtT/J9iQbut3eCjwN+OMk9ySZaqoeSdJgjd5ZXFV7gD1927b1PL+6ydeXJJ3eOXGxWJI0PgaBJLWcQSBJLWcQSFLLGQSS1HIGgSS1nEEgSS3nCmUt9tjSC7/jT0ntZBC02DfX/PS4S5B0DnBoSJJaziCQpJYzCCSp5QwCSWo5g0CSWs4gkKSWMwgkqeUMAklquUaDIMn6JAeTzCTZOmD/TyT5qyRzSV7WZC2SpMEaC4IkS4CdwLXAWuC6JGv7un0BuAF4T1N1SJLm1+QUE+uAmao6BJBkN7AROHCiQ1U92N33WIN1SJLm0eTQ0HLgcE/7SHebJOkcsiAuFifZnGQ6yfTs7Oy4y5GkRaXJIDgKrOxpr+huO2NVtauqJqtqcmJi4qwUJ0nqaDII9gFrkqxOshTYBEw1+HqSpCegsSCoqjlgC7AXuB+4var2J9meZANAkucnOQK8HHhHkv1N1SNJGqzRhWmqag+wp2/btp7n++gMGUmSxmRBXCyWJDXHIJCkljMIJKnlDAJJajmDQJJaziCQpJYzCCSp5QwCSWo5g0CSWs4gkKSWMwgkqeUMAklqOYNAklrOIJCkljMIJKnlDAJJajmDQJJaziCQpJZrNAiSrE9yMMlMkq0D9n9Xkvd19386yaom65EknayxIEiyBNgJXAusBa5Lsrav243AV6vq2cBvA7/ZVD2SpMGaPCNYB8xU1aGqehTYDWzs67MReFf3+fuBFydJgzVJkvqc3+CxlwOHe9pHgBecqk9VzSX5GvA9wEO9nZJsBjZ3m99IcrCRittpGX1/322Vf//KcZeg7+R784RfOyu/Hz/zVDuaDIKzpqp2AbvGXcdilGS6qibHXYfUz/fm6DQ5NHQUWNnTXtHdNrBPkvOBi4GvNFiTJKlPk0GwD1iTZHWSpcAmYKqvzxRw4nz8ZcBHq6oarEmS1KexoaHumP8WYC+wBLitqvYn2Q5MV9UU8J+BdyeZAR6mExYaLYfcdK7yvTki8RdwSWo37yyWpJYzCCSp5QwCPS7JC5P86bjr0OKQ5LVJ7k/yRw0d/81Jbm7i2G2zIO4jkLQg/Uvg6qo6Mu5CND/PCBaZJKuS/HWSdyb5XJI/SnJ1kjuT/E2Sdd3HJ5PcneQTSb53wHEuTHJbks90+/VPDyKdUpI/AP4R8GdJ3jjovZTkhiQfTPLhJA8m2ZLkdd0+n0ryjG6/VyXZl+SzST6Q5KkDXu9ZSf57kruS/EWSy0f7HS9sBsHi9Gzgt4DLu49XAD8G3Az8a+CvgR+vqiuBbcC/G3CMN9K5r2Md8CLgrUkuHEHtWgSq6tXAF+m8dy7k1O+l5wI/BzwfeAvwre778pPAL3X7/ElVPb+qfhC4n85klf12ATdV1VV03udvb+Y7W5wcGlqcHqiq+wCS7Ac+UlWV5D5gFZ07uN+VZA1QwFMGHOOngQ09Y7AXAJfR+Y8onYlTvZcA7qiq48Dx7lxjH+puvw+4ovv8uUl+Hfhu4Gl07k16XJKnAf8Y+OOeOSu/q4lvZLEyCBanR3qeP9bTfozOv/mtdP4D/rPuGhAfG3CMAC+tKif405M18L2U5AWc/r0K8E7gZ6vqs0luAF7Yd/zzgL+tqued3bLbw6GhdrqYv5/36YZT9NkL3HRiWvAkV46gLi1OT/a9dBHwpSRPAa7v31lVXwceSPLy7vGT5AefZM2tYhC00w7gN5LczanPCm+lM2R0b3d46dZRFadF58m+l/4N8GngTjrXtwa5HrgxyWeB/Zy89onm4RQTktRynhFIUssZBJLUcgaBJLWcQSBJLWcQSFLLGQTSGejOm7M/yb1J7uneFCUtaN5ZLA0pyY8A/xT4oap6JMkyYOmYy5KeNM8IpOFdCjxUVY8AVNVDVfXFJFcl+Xh35su9SS5NcnGSgydmdk3y3iSvGmv10il4Q5k0pO7kZn8JPBX4c+B9wCeAjwMbq2o2yS8AP1NV/zzJNcB24HeAG6pq/ZhKl+bl0JA0pKr6RpKrgB+nM53y+4BfpzOV8oe7U+ksAb7U7f/h7vw3OwHnvtE5yzMC6QlK8jLgNcAFVfUjA/afR+dsYRXwkhNTg0vnGq8RSENK8r3dNRxOeB6d9RkmuheSSfKUJN/f3f8r3f2vAP5Ld/ZM6ZzjGYE0pO6w0O/RWSBlDpgBNgMrgN+lM733+cB/AP4n8EFgXVUdT/I24HhV/do4apfmYxBIUss5NCRJLWcQSFLLGQSS1HIGgSS1nEEgSS1nEEhSyxkEktRy/x/lEkrYoxn+XQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.barplot(x='Pclass' , y = 'Survived' , hue='Sex' , data = titanic_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"KAIToRLEVjKP","executionInfo":{"status":"ok","timestamp":1641886571844,"user_tz":-540,"elapsed":563,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"4537825d-88a0-4a7d-b200-c7f5884b9f59"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7efdc357e110>"]},"metadata":{},"execution_count":27},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#입력 age에 따라 구분 값을 반환하는 함수 설정. DataFrame의 apply lambda 식에 사용\n","def get_category(age):\n","    cat = ''\n","    if age <= 1: cat = 'Unknown'\n","    elif age <= 5: cat = 'Baby'\n","    elif age <= 12: cat = 'Child'\n","    elif age <= 18: cat = 'Teenager'\n","    elif age <= 25: cat = 'Student'\n","    elif age <= 35: cat = 'Young Adult'\n","    elif age <= 60: cat = 'Adult'\n","    else: cat = 'Elderly'\n","\n","    return cat\n","\n","#막대그래프의 크기 figure를 더 크게 설정\n","plt.figure(figsize=(10, 6))\n","\n","#X축의 값을 순차적으로 표시하기 위한 설정\n","group_names = ['Unknown' , 'Baby' , 'Child' , 'Teenager' , 'Student' , 'Young Adult' , 'Adult' , 'Elderly']\n","\n","#lambda 식에 위에서 생성한 get_category( )함수를 반환값으로 지정.\n","#get_category(X)는 입력값으로 'Age' 칼럼 값을 받아서 해당하는 cat 반환\n","titanic_df['Age_cat'] = titanic_df['Age'].apply(lambda x : get_category(x))\n","sns.barplot(x='Age_cat' , y = 'Survived', hue = 'Sex', data = titanic_df , order = group_names)\n","titanic_df.drop( 'Age_cat' , axis = 1 , inplace = True )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":389},"id":"f59-jB3LV1lh","executionInfo":{"status":"ok","timestamp":1641886572686,"user_tz":-540,"elapsed":845,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"7c192269-194e-46ff-9d0b-5eaecfe030b1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from sklearn import preprocessing\n","\n","def encode_features(dataDF):\n","    features = ['Cabin' , 'Sex' , 'Embarked']\n","    for feature in features:\n","        le = preprocessing.LabelEncoder( )\n","        le = le.fit(dataDF[feature])\n","        dataDF[feature] = le.transform(dataDF[feature])\n","\n","    return dataDF\n","\n","titanic_df = encode_features(titanic_df)\n","titanic_df.head( )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"mnN0SC6ye8Qi","executionInfo":{"status":"ok","timestamp":1641886572686,"user_tz":-540,"elapsed":11,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"6b0611d5-38fc-4865-86ea-cd303d73f16e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-c65baae5-8d03-456c-8371-d666eff91010\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>7</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>7</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>7</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c65baae5-8d03-456c-8371-d666eff91010')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c65baae5-8d03-456c-8371-d666eff91010 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c65baae5-8d03-456c-8371-d666eff91010');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare  Cabin  Embarked\n","0            1         0       3  ...   7.2500      7         3\n","1            2         1       1  ...  71.2833      2         0\n","2            3         1       3  ...   7.9250      7         3\n","3            4         1       1  ...  53.1000      2         3\n","4            5         0       3  ...   8.0500      7         3\n","\n","[5 rows x 12 columns]"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":[""],"metadata":{"id":"dKcxKafZFU6c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Null 처리 함수\n","def fillna(df):\n","    df['Age'].fillna(df['Age'].mean( ) , inplace = True)\n","    df['Cabin'].fillna('N', inplace = True)\n","    df['Embarked'].fillna('N' , inplace = True)\n","    df['Fare'].fillna(0, inplace = True)\n","    return df\n","\n","# 머신러닝 알고리즘에 불필요한 속성 제거\n","def drop_features(df):\n","    df.drop(['PassengerId' , 'Name' , 'Ticket'], axis = 1 , inplace=True)\n","    return df\n","\n","#레이블 인코딩 수행\n","def format_features(df):\n","    df['Cabin'] = df['Cabin'].str[:1]\n","    features = ['Cabin' , 'Sex' , 'Embarked']\n","    for feature in features:\n","        le = preprocessing.LabelEncoder()\n","        le = le.fit(df[feature])\n","        df[feature] = le.transform(df[feature])\n","    return df\n","\n","#앞에서 설정한 데이터 전처리 함수 호출\n","def transform_features(df):\n","    df = fillna(df)\n","    df = drop_features(df)\n","    df = format_features(df)\n","    return df"],"metadata":{"id":"Lhs4RlnggS8e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#원본 데이터를 재로딩하고, 피처 데이터 세트와 레이블 데이터 세트 추출.\n","titanic_df = pd.read_csv('titanic_train.csv')\n","y_titanic_df = titanic_df['Survived']\n","X_titanic_df = titanic_df.drop('Survived', axis = 1)\n","\n","X_titanic_df = transform_features(X_titanic_df)"],"metadata":{"id":"DBDvOEn6hdO8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train , X_test , y_train , y_test = train_test_split(X_titanic_df , y_titanic_df, test_size=0.2 , random_state=11)"],"metadata":{"id":"yG9yBkpWh3vM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","\n","#결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스를 생성\n","dt_clf = DecisionTreeClassifier(random_state=11)\n","rf_clf = RandomForestClassifier(random_state=11)\n","lr_clf = LogisticRegression()\n","\n","# DecisionTreeClassifier 학습/예측/평가\n","dt_clf.fit(X_train, y_train)\n","dt_pred = dt_clf.predict(X_test)\n","print(\"DecisionTreeClassifier 정확도:{0:.4f}\".format(accuracy_score(y_test, dt_pred)))\n","\n","# RandomForestClassifier 학습/예측/평가\n","rf_clf.fit(X_train, y_train)\n","rf_pred = rf_clf.predict(X_test)\n","print(\"RandomForestClassifier 정확도:{0:.4f}\".format(accuracy_score(y_test, rf_pred)))\n","\n","# LogisticRegression 학습/예측/평가\n","lr_clf.fit(X_train, y_train)\n","lr_pred = lr_clf.predict(X_test)\n","print(\"LogisticRegression 정확도: {0:.4f}\".format(accuracy_score(y_test , lr_pred)))"],"metadata":{"id":"6mUdt93tiSMc","executionInfo":{"status":"ok","timestamp":1641887001995,"user_tz":-540,"elapsed":339,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"0d177300-8a64-4d89-dc2d-071d7750e71d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["DecisionTreeClassifier 정확도:0.7877\n","RandomForestClassifier 정확도:0.8547\n","LogisticRegression 정확도: 0.8492\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import KFold\n","\n","def exec_kfold(clf, folds = 5):\n","    # 폴드 세트를 5개인 kFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성.\n","    kfold = KFold(n_splits=folds)\n","    scores = [] \n","\n","    #KFold 교차 검증 수행.\n","    for iter_count , (train_index, test_index) in enumerate(kfold.split(X_titanic_df)):\n","        # X_titanic_df 데이터에서 교차 검증별로 학습과 데이터를 가리키는 index생성\n","        X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index]\n","        y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index]\n","        #Classifier 학습, 예측, 정확도 계산\n","        clf.fit(X_train, y_train)\n","        predictions = clf.predict(X_test)\n","        accuracy = accuracy_score(y_test , predictions)\n","        scores.append(accuracy)\n","        print(\"교차 검증 {0} 정확도: {1:.4f}\".format(iter_count, accuracy))\n","\n","    #5개 fold에서의 평균 정확도 계산.\n","    mean_score = np.mean(scores)\n","    print(\"평균 정확도: {0:.4f}\".format(mean_score))\n","\n","# exec_kfold 호출\n","exec_kfold(dt_clf , folds = 5)"],"metadata":{"id":"YOAm3BuG-O_-","executionInfo":{"status":"ok","timestamp":1641887496805,"user_tz":-540,"elapsed":336,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a63cdf85-e0c3-42be-be33-ab2846f55d97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["교차 검증 0 정확도: 0.7542\n","교차 검증 1 정확도: 0.7809\n","교차 검증 2 정확도: 0.7865\n","교차 검증 3 정확도: 0.7697\n","교차 검증 4 정확도: 0.8202\n","평균 정확도: 0.7823\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","\n","scores = cross_val_score(dt_clf, X_titanic_df, y_titanic_df, cv = 5)\n","for iter_count , accuracy in enumerate(scores):\n","    print(\"교차 검증 {0} 정확도: {1:.4f}\".format(iter_count, accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d_SgYQd8GReA","executionInfo":{"status":"ok","timestamp":1641887656588,"user_tz":-540,"elapsed":349,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"fbd23a61-ae5b-49f2-d448-cdea9a0b009a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["교차 검증 0 정확도: 0.7430\n","교차 검증 1 정확도: 0.7753\n","교차 검증 2 정확도: 0.7921\n","교차 검증 3 정확도: 0.7865\n","교차 검증 4 정확도: 0.8427\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","\n","parameters = {'max_depth':[2,3,5,10] , 'min_samples_split':[2,3,5], 'min_samples_leaf':[1,5,8]}\n","\n","grid_dclf = GridSearchCV(dt_clf, param_grid = parameters, scoring = 'accuracy' , cv = 5)\n","grid_dclf.fit(X_train, y_train)\n","\n","print('GridSearchCV 최적 하이퍼 파라미터 :', grid_dclf.best_params_)\n","print('GridSearchCV 최고 정확도: {0:.4f}'.format(grid_dclf.best_score_))\n","best_dclf = grid_dclf.best_estimator_\n","\n","# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행.\n","dpredictions = best_dclf.predict(X_test)\n","accuracy = accuracy_score(y_test, dpredictions)\n","print(\"테스트 세트에서의 DecisionTreeClassifier 정확도 : {0:.4f}\".format(accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZJqv_I75IWS1","executionInfo":{"status":"ok","timestamp":1641888068629,"user_tz":-540,"elapsed":1734,"user":{"displayName":"김진우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggb7NCfP7aAu0Hj8nNhErTzUou1vuaWKzjtXq6Auw=s64","userId":"12971138652345879224"}},"outputId":"1c32c64f-16e7-4e5a-daa4-03d5b4917fd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["GridSearchCV 최적 하이퍼 파라미터 : {'max_depth': 3, 'min_samples_leaf': 5, 'min_samples_split': 2}\n","GridSearchCV 최고 정확도: 0.7992\n","테스트 세트에서의 DecisionTreeClassifier 정확도 : 0.8715\n"]}]},{"cell_type":"code","source":["|"],"metadata":{"id":"0hW5IGhfJ2c8"},"execution_count":null,"outputs":[]}]}